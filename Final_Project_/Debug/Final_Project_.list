
Final_Project_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c044  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800c1d8  0800c1d8  0000d1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c770  0800c770  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c770  0800c770  0000d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c778  0800c778  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c778  0800c778  0000d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c77c  0800c77c  0000d77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c780  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001e4  0800c964  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800c964  0000e5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d41  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fef  00000000  00000000  00026f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000125d  00000000  00000000  0002b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a404  00000000  00000000  0002c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7be  00000000  00000000  00056d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ab02  00000000  00000000  000724cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017cfd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a94  00000000  00000000  0017d014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00184aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1bc 	.word	0x0800c1bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c1bc 	.word	0x0800c1bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <lcd_write_nibble>:

/* THESE FUNCTIONS HELP IN SETTING UP THE LCD */

// This function helps in creating the data or command htat will be sent
void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	4313      	orrs	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT; // Include backlight state in data
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <lcd_write_nibble+0x7c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	b25a      	sxtb	r2, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	b2db      	uxtb	r3, r3
 8001042:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001044:	f107 020f 	add.w	r2, r7, #15
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	214e      	movs	r1, #78	@ 0x4e
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <lcd_write_nibble+0x80>)
 8001052:	f002 ffa1 	bl	8003f98 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 f96a 	bl	8002330 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f023 0304 	bic.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001066:	f107 020f 	add.w	r2, r7, #15
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	214e      	movs	r1, #78	@ 0x4e
 8001072:	4804      	ldr	r0, [pc, #16]	@ (8001084 <lcd_write_nibble+0x80>)
 8001074:	f002 ff90 	bl	8003f98 <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000264 	.word	0x20000264

08001088 <lcd_send_cmd>:

// THis function helps in sending the command into the LCD
void lcd_send_cmd(uint8_t cmd)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffad 	bl	8001004 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffa8 	bl	8001004 <lcd_write_nibble>

	if (cmd == 0x01 || cmd == 0x02)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <lcd_send_cmd+0x38>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d102      	bne.n	80010c6 <lcd_send_cmd+0x3e>
	{
		HAL_Delay(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f001 f935 	bl	8002330 <HAL_Delay>
	}

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <lcd_send_data>:

// This function helps in sending the data into the LCD
void lcd_send_data(uint8_t data)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff8a 	bl	8001004 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff85 	bl	8001004 <lcd_write_nibble>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <lcd_init>:

// This function helps in initialzing the LCD
void lcd_init()
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001106:	2032      	movs	r0, #50	@ 0x32
 8001108:	f001 f912 	bl	8002330 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 800110c:	2100      	movs	r1, #0
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff ff78 	bl	8001004 <lcd_write_nibble>
	HAL_Delay(5);
 8001114:	2005      	movs	r0, #5
 8001116:	f001 f90b 	bl	8002330 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff ff71 	bl	8001004 <lcd_write_nibble>
	HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f001 f904 	bl	8002330 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 8001128:	2100      	movs	r1, #0
 800112a:	2003      	movs	r0, #3
 800112c:	f7ff ff6a 	bl	8001004 <lcd_write_nibble>
	HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f001 f8fd 	bl	8002330 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 8001136:	2100      	movs	r1, #0
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff ff63 	bl	8001004 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 800113e:	2028      	movs	r0, #40	@ 0x28
 8001140:	f7ff ffa2 	bl	8001088 <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8001144:	200c      	movs	r0, #12
 8001146:	f7ff ff9f 	bl	8001088 <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800114a:	2006      	movs	r0, #6
 800114c:	f7ff ff9c 	bl	8001088 <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff99 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(2);
 8001156:	2002      	movs	r0, #2
 8001158:	f001 f8ea 	bl	8002330 <HAL_Delay>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <lcd_write_string>:

// This function helps in writing into the LCD
void lcd_write_string(char *str)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	while (*str)
 8001168:	e006      	b.n	8001178 <lcd_write_string+0x18>
	{
		lcd_send_data(*str++);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffab 	bl	80010ce <lcd_send_data>
	while (*str)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f4      	bne.n	800116a <lcd_write_string+0xa>
	}
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <lcd_set_cursor>:

// This function helps in the setting the cursor on the LCD
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	460a      	mov	r2, r1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4613      	mov	r3, r2
 8001198:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <lcd_set_cursor+0x1c>
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d003      	beq.n	80011ac <lcd_set_cursor+0x22>
 80011a4:	e005      	b.n	80011b2 <lcd_set_cursor+0x28>
	{
		case 0:
		address = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
		break;
 80011aa:	e004      	b.n	80011b6 <lcd_set_cursor+0x2c>
		case 1:
		address = 0x40;
 80011ac:	2340      	movs	r3, #64	@ 0x40
 80011ae:	73fb      	strb	r3, [r7, #15]
		break;
 80011b0:	e001      	b.n	80011b6 <lcd_set_cursor+0x2c>
		default:
		address = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
	}

	address += column;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	4413      	add	r3, r2
 80011bc:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff5e 	bl	8001088 <lcd_send_cmd>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lcd_clear>:

// This function clears the LCD
void lcd_clear(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff ff55 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(2);
 80011de:	2002      	movs	r0, #2
 80011e0:	f001 f8a6 	bl	8002330 <HAL_Delay>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <lcd_backlight>:

// This function sets the state of the backlight
void lcd_backlight(uint8_t state)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	if (state)
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <lcd_backlight+0x18>
	{
		backlight_state = 1;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <lcd_backlight+0x2c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]

	else
	{
		backlight_state = 0;
	}
}
 80011fe:	e002      	b.n	8001206 <lcd_backlight+0x1e>
		backlight_state = 0;
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <lcd_backlight+0x2c>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <display_voltage>:

// LCD DISPLAY FUNCTIONS

// Function to display the voltage on the LCD
void display_voltage(float battery_voltage) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[16];
    sprintf(buffer, "Voltage: %.1fV", battery_voltage);  // Format the voltage string
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	f107 0008 	add.w	r0, r7, #8
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <display_voltage+0x38>)
 8001232:	f007 fb79 	bl	8008928 <siprintf>
    lcd_set_cursor(0, 0);  // Set cursor to the first row
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ffa6 	bl	800118a <lcd_set_cursor>
    lcd_write_string(buffer);  // Display the voltage value on the LCD
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff8c 	bl	8001160 <lcd_write_string>

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0800c1d8 	.word	0x0800c1d8

08001254 <display_charge>:

// Function to display the charge percentage on the LCD
void display_charge(float battery_percentage) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[16];
    sprintf(buffer, "Charge: %.1f%%", battery_percentage);  // Format the charge percentage string
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff f982 	bl	8000568 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	f107 0008 	add.w	r0, r7, #8
 800126c:	4907      	ldr	r1, [pc, #28]	@ (800128c <display_charge+0x38>)
 800126e:	f007 fb5b 	bl	8008928 <siprintf>
    lcd_set_cursor(1, 0);  // Set cursor to the second row
 8001272:	2100      	movs	r1, #0
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ff88 	bl	800118a <lcd_set_cursor>
    lcd_write_string(buffer);  // Display the charge percentage on the LCD
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff6e 	bl	8001160 <lcd_write_string>

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	0800c1e8 	.word	0x0800c1e8

08001290 <ninev_percentage>:

// 9 VOLTS BATTERY CALCULATION FUNCTIONS //

// This function calculates the percentage for nine volt batteries
float ninev_percentage(uint16_t analog_measurement)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	  // Calculating percentage
	  battery_percentage = (analog_measurement / nivev_measurement_max ) * 100;
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <ninev_percentage+0x44>)
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80012d8 <ninev_percentage+0x48>
 80012b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <ninev_percentage+0x4c>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]

	  // Return value
	  return battery_percentage;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <ninev_percentage+0x4c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	ee07 3a90 	vmov	s15, r3

} // End of function
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000004 	.word	0x20000004
 80012d8:	42c80000 	.word	0x42c80000
 80012dc:	2000045c 	.word	0x2000045c

080012e0 <ninev_voltage>:

// This function calculates the volts for nine volt batteries
float ninev_voltage(float battery_percentage)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
	  // Calculating voltage
	  battery_voltage = (battery_percentage * 9.0) / 100;
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f93c 	bl	8000568 <__aeabi_f2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <ninev_voltage+0x50>)
 80012f6:	f7ff f98f 	bl	8000618 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <ninev_voltage+0x54>)
 8001308:	f7ff fab0 	bl	800086c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fc78 	bl	8000c08 <__aeabi_d2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <ninev_voltage+0x58>)
 800131c:	6013      	str	r3, [r2, #0]

	  // Return value
	  return battery_voltage;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <ninev_voltage+0x58>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3

}	// End of function
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40220000 	.word	0x40220000
 8001334:	40590000 	.word	0x40590000
 8001338:	20000458 	.word	0x20000458

0800133c <onefivev_percentage>:

// 1.5 VOLTS BATTERY CALCULATION FUNCTIONS //

// This function calculates the percentage for 1.5 volt batteries
float onefivev_percentage(uint16_t analog_measurement)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	  // Calculating percentage
	  battery_percentage = (analog_measurement / onefivev_measurement_max ) * 100;
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <onefivev_percentage+0x44>)
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001384 <onefivev_percentage+0x48>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <onefivev_percentage+0x4c>)
 8001364:	edc3 7a00 	vstr	s15, [r3]

	  // Return value
	  return battery_percentage;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <onefivev_percentage+0x4c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3

}	// End of function
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	42c80000 	.word	0x42c80000
 8001388:	2000045c 	.word	0x2000045c

0800138c <onefivev_voltage>:

// This function calculates the volts for 1.5 volt batteries
float onefivev_voltage(float battery_percentage)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	ed87 0a01 	vstr	s0, [r7, #4]
	  // Calculating voltage
	  battery_voltage = (battery_percentage * 1.5) / 100;
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff f8e6 	bl	8000568 <__aeabi_f2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <onefivev_voltage+0x50>)
 80013a2:	f7ff f939 	bl	8000618 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <onefivev_voltage+0x54>)
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc22 	bl	8000c08 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <onefivev_voltage+0x58>)
 80013c8:	6013      	str	r3, [r2, #0]

	  // Return value
	  return battery_voltage;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <onefivev_voltage+0x58>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	ee07 3a90 	vmov	s15, r3

}	// End of function
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	3ff80000 	.word	0x3ff80000
 80013e0:	40590000 	.word	0x40590000
 80013e4:	20000458 	.word	0x20000458

080013e8 <threev_percentage>:

// 3 VOLTS BATTERY CALCULATION FUNCTIONS //

// This function calculates the percentage for 3 volt batteries
float threev_percentage(uint16_t analog_measurement)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
	  // Calculating percentage
	  battery_percentage = (analog_measurement / threev_measurement_max ) * 100;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <threev_percentage+0x44>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001406:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001430 <threev_percentage+0x48>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <threev_percentage+0x4c>)
 8001410:	edc3 7a00 	vstr	s15, [r3]

	  // Return value
	  return battery_percentage;
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <threev_percentage+0x4c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	ee07 3a90 	vmov	s15, r3

} // End of function
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000000c 	.word	0x2000000c
 8001430:	42c80000 	.word	0x42c80000
 8001434:	2000045c 	.word	0x2000045c

08001438 <threev_voltage>:

// This function calculates the voltage for 3 volt batteries
float threev_voltage(float battery_percentage)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
	  // Calculating voltage
	  battery_voltage = (battery_percentage * 3.0) / 100;
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f890 	bl	8000568 <__aeabi_f2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <threev_voltage+0x50>)
 800144e:	f7ff f8e3 	bl	8000618 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <threev_voltage+0x54>)
 8001460:	f7ff fa04 	bl	800086c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fbcc 	bl	8000c08 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <threev_voltage+0x58>)
 8001474:	6013      	str	r3, [r2, #0]

	  // Return value
	  return battery_voltage;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <threev_voltage+0x58>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	ee07 3a90 	vmov	s15, r3

} // End of function
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40080000 	.word	0x40080000
 800148c:	40590000 	.word	0x40590000
 8001490:	20000458 	.word	0x20000458

08001494 <percentage_bounds>:

// END OF 3 VOLTS BATTERY CALCULATION FUNCTIONS //

// This function makes sure that the percentage values are valid percentages
float percentage_bounds(float battery_percentage)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
	  // If that checks if the battery percentage is less than a valid number
	  if (battery_percentage < 0)
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	d504      	bpl.n	80014b6 <percentage_bounds+0x22>
	  {
		  // Percentage is 0
		  battery_percentage = 0.0;
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]

		  // Return correct value
		  return battery_percentage;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	e00d      	b.n	80014d2 <percentage_bounds+0x3e>

	  } // End of if

	  // If that checks if the battery percentage is greater than a valid number
	  else if (battery_percentage > 100)
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80014e4 <percentage_bounds+0x50>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd03      	ble.n	80014d0 <percentage_bounds+0x3c>
	  {
		  // Percentage is 100
		  battery_percentage = 100.0;
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <percentage_bounds+0x54>)
 80014ca:	607b      	str	r3, [r7, #4]

		  // Return the correct value
		  return battery_percentage;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	e000      	b.n	80014d2 <percentage_bounds+0x3e>

	  } // End of else if

	  // Return the good value
	  return battery_percentage;
 80014d0:	687b      	ldr	r3, [r7, #4]

} // End of function
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	42c80000 	.word	0x42c80000
 80014e8:	42c80000 	.word	0x42c80000

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fea1 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f91d 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fa7b 	bl	80019f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014fe:	f000 f96b 	bl	80017d8 <MX_ADC1_Init>
  MX_TIM16_Init();
 8001502:	f000 fa1f 	bl	8001944 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001506:	f000 f9dd 	bl	80018c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800150a:	f000 fa43 	bl	8001994 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16); // Start Timer16
 800150e:	487e      	ldr	r0, [pc, #504]	@ (8001708 <main+0x21c>)
 8001510:	f004 fc84 	bl	8005e1c <HAL_TIM_Base_Start_IT>

  // I2C pull-up resistors
  GPIOB->PUPDR |= 0b01 << (8*2);
 8001514:	4b7d      	ldr	r3, [pc, #500]	@ (800170c <main+0x220>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a7c      	ldr	r2, [pc, #496]	@ (800170c <main+0x220>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= 0b01 << (9*2);
 8001520:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <main+0x220>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a79      	ldr	r2, [pc, #484]	@ (800170c <main+0x220>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152a:	60d3      	str	r3, [r2, #12]

  // Initialize the LCD
  lcd_init();
 800152c:	f7ff fde9 	bl	8001102 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fe59 	bl	80011e8 <lcd_backlight>

  HAL_UART_Receive_IT(&huart2, &uart2_byte, 1); // put byte from UART2 in "uart2_byte"
 8001536:	2201      	movs	r2, #1
 8001538:	4975      	ldr	r1, [pc, #468]	@ (8001710 <main+0x224>)
 800153a:	4876      	ldr	r0, [pc, #472]	@ (8001714 <main+0x228>)
 800153c:	f004 ffb4 	bl	80064a8 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8001540:	4875      	ldr	r0, [pc, #468]	@ (8001718 <main+0x22c>)
 8001542:	f001 fa4d 	bl	80029e0 <HAL_ADC_Start>

	  // Wait for ADC conversion to complete
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001546:	f04f 31ff 	mov.w	r1, #4294967295
 800154a:	4873      	ldr	r0, [pc, #460]	@ (8001718 <main+0x22c>)
 800154c:	f001 fb02 	bl	8002b54 <HAL_ADC_PollForConversion>

	  // Read ADC value
	  uint16_t analog_measurement = HAL_ADC_GetValue(&hadc1);
 8001550:	4871      	ldr	r0, [pc, #452]	@ (8001718 <main+0x22c>)
 8001552:	f001 fbd7 	bl	8002d04 <HAL_ADC_GetValue>
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]

	  // Delay 1 ms
	  HAL_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f000 fee8 	bl	8002330 <HAL_Delay>


	  // If the view 9v battery message was displayed
	  if (ninev_battery)
 8001560:	4b6e      	ldr	r3, [pc, #440]	@ (800171c <main+0x230>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d03e      	beq.n	80015e6 <main+0xfa>
	  {
		  // Calculate the percentage
		  battery_percentage = ninev_percentage(analog_measurement);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fe90 	bl	8001290 <ninev_percentage>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <main+0x234>)
 8001576:	edc3 7a00 	vstr	s15, [r3]

		  // Correct bounds of battery percentage
		  battery_percentage = percentage_bounds(battery_percentage);
 800157a:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <main+0x234>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	f7ff ff86 	bl	8001494 <percentage_bounds>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
 800158c:	4b64      	ldr	r3, [pc, #400]	@ (8001720 <main+0x234>)
 800158e:	edc3 7a00 	vstr	s15, [r3]

		  // Calculate the voltage
		  battery_voltage = ninev_voltage(battery_percentage);
 8001592:	4b63      	ldr	r3, [pc, #396]	@ (8001720 <main+0x234>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	f7ff fea0 	bl	80012e0 <ninev_voltage>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <main+0x238>)
 80015a6:	edc3 7a00 	vstr	s15, [r3]

		  // if the other types were activated
		  if (one_fivev_battery || threev_battery)
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <main+0x23c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <main+0xce>
 80015b2:	4b5e      	ldr	r3, [pc, #376]	@ (800172c <main+0x240>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <main+0xde>
		  {
			  // Clear LCD and turn off other battery types
			  lcd_clear();
 80015ba:	f7ff fe0b 	bl	80011d4 <lcd_clear>
			  one_fivev_battery = false;
 80015be:	4b5a      	ldr	r3, [pc, #360]	@ (8001728 <main+0x23c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
			  threev_battery = false;
 80015c4:	4b59      	ldr	r3, [pc, #356]	@ (800172c <main+0x240>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]

		  } // End of if

		  // Show the voltage on LCD
	      display_voltage(battery_voltage);
 80015ca:	4b56      	ldr	r3, [pc, #344]	@ (8001724 <main+0x238>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	f7ff fe20 	bl	8001218 <display_voltage>
		  // Show the charge percentage on LCD
		  display_charge(battery_percentage);
 80015d8:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <main+0x234>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	f7ff fe37 	bl	8001254 <display_charge>

	  } // End of if

	  // If the view 1.5v battery message was displayed
	  if (one_fivev_battery)
 80015e6:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <main+0x23c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03e      	beq.n	800166c <main+0x180>
	  {
		  // Calculate the percentage
		  battery_percentage = onefivev_percentage(analog_measurement);
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fea3 	bl	800133c <onefivev_percentage>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <main+0x234>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]

		  // Correct bounds of battery percentage
		  battery_percentage = percentage_bounds(battery_percentage);
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <main+0x234>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	f7ff ff43 	bl	8001494 <percentage_bounds>
 800160e:	eef0 7a40 	vmov.f32	s15, s0
 8001612:	4b43      	ldr	r3, [pc, #268]	@ (8001720 <main+0x234>)
 8001614:	edc3 7a00 	vstr	s15, [r3]

		  // Calculate the voltage
		  battery_voltage = onefivev_voltage(battery_percentage);
 8001618:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <main+0x234>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f7ff feb3 	bl	800138c <onefivev_voltage>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <main+0x238>)
 800162c:	edc3 7a00 	vstr	s15, [r3]

		  // if the other types were activated
		  if (ninev_battery || threev_battery)
 8001630:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <main+0x230>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d103      	bne.n	8001640 <main+0x154>
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <main+0x240>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <main+0x164>
		  {
			  // Clear LCD and turn off other battery types
			  lcd_clear();
 8001640:	f7ff fdc8 	bl	80011d4 <lcd_clear>
			  ninev_battery = false;
 8001644:	4b35      	ldr	r3, [pc, #212]	@ (800171c <main+0x230>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
			  threev_battery = false;
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <main+0x240>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

		  } // End of if

		  // SHow the voltage on LCD
	      display_voltage(battery_voltage);
 8001650:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <main+0x238>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f7ff fddd 	bl	8001218 <display_voltage>
		  // Show the charge percentage on LCD
		  display_charge(battery_percentage);
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <main+0x234>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb0 0a67 	vmov.f32	s0, s15
 8001668:	f7ff fdf4 	bl	8001254 <display_charge>

	  } // End of if

	  // If the view 9v battery message was displayed
	  if (threev_battery)
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <main+0x240>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03e      	beq.n	80016f2 <main+0x206>
	  {
		  // Calculate the percentage
		  battery_percentage = threev_percentage(analog_measurement);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff feb6 	bl	80013e8 <threev_percentage>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <main+0x234>)
 8001682:	edc3 7a00 	vstr	s15, [r3]

		  // Correct bounds of battery percentage
		  battery_percentage = percentage_bounds(battery_percentage);
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <main+0x234>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	f7ff ff00 	bl	8001494 <percentage_bounds>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
 8001698:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <main+0x234>)
 800169a:	edc3 7a00 	vstr	s15, [r3]

		  // Calculate the voltage
		  battery_voltage = threev_voltage(battery_percentage);
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <main+0x234>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	f7ff fec6 	bl	8001438 <threev_voltage>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <main+0x238>)
 80016b2:	edc3 7a00 	vstr	s15, [r3]

		  // if the other types were activated
		  if (one_fivev_battery || ninev_battery)
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <main+0x23c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <main+0x1da>
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <main+0x230>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <main+0x1ea>
		  {
			  // Clear LCD and turn off other battery types
			  lcd_clear();
 80016c6:	f7ff fd85 	bl	80011d4 <lcd_clear>
			  one_fivev_battery = false;
 80016ca:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <main+0x23c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
			  ninev_battery = false;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <main+0x230>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]

		  } // End of if

		  // Show the voltage on LCD
	      display_voltage(battery_voltage);
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <main+0x238>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eeb0 0a67 	vmov.f32	s0, s15
 80016e0:	f7ff fd9a 	bl	8001218 <display_voltage>
		  // Show the charge percentage on LCD
		  display_charge(battery_percentage);
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <main+0x234>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb0 0a67 	vmov.f32	s0, s15
 80016ee:	f7ff fdb1 	bl	8001254 <display_charge>

	  } // End of if

	  // If the reset sequence was activated
	  if(reset_system)
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <main+0x244>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f43f af22 	beq.w	8001540 <main+0x54>
	  {
		  // Clear the screen
		  lcd_clear();
 80016fc:	f7ff fd6a 	bl	80011d4 <lcd_clear>

		  // Stop reset sequence
		  reset_system = false;
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <main+0x244>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  {
 8001706:	e71b      	b.n	8001540 <main+0x54>
 8001708:	200002b8 	.word	0x200002b8
 800170c:	48000400 	.word	0x48000400
 8001710:	20000454 	.word	0x20000454
 8001714:	20000304 	.word	0x20000304
 8001718:	20000200 	.word	0x20000200
 800171c:	20000460 	.word	0x20000460
 8001720:	2000045c 	.word	0x2000045c
 8001724:	20000458 	.word	0x20000458
 8001728:	20000461 	.word	0x20000461
 800172c:	20000462 	.word	0x20000462
 8001730:	20000463 	.word	0x20000463

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b096      	sub	sp, #88	@ 0x58
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2244      	movs	r2, #68	@ 0x44
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f007 f953 	bl	80089ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001756:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800175a:	f002 fff5 	bl	8004748 <HAL_PWREx_ControlVoltageScaling>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001764:	f000 faa8 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001772:	2310      	movs	r3, #16
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001776:	2302      	movs	r3, #2
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177a:	2302      	movs	r3, #2
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001782:	230a      	movs	r3, #10
 8001784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001786:	2307      	movs	r3, #7
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800178a:	2302      	movs	r3, #2
 800178c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800178e:	2302      	movs	r3, #2
 8001790:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4618      	mov	r0, r3
 8001798:	f003 f82c 	bl	80047f4 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80017a2:	f000 fa89 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2303      	movs	r3, #3
 80017ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2104      	movs	r1, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fbf4 	bl	8004fac <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ca:	f000 fa75 	bl	8001cb8 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3758      	adds	r7, #88	@ 0x58
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 80017fc:	4a2f      	ldr	r2, [pc, #188]	@ (80018bc <MX_ADC1_Init+0xe4>)
 80017fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001806:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001812:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800181a:	2204      	movs	r2, #4
 800181c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800181e:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001820:	2200      	movs	r2, #0
 8001822:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001826:	2200      	movs	r2, #0
 8001828:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800182c:	2201      	movs	r2, #1
 800182e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183e:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800184e:	2200      	movs	r2, #0
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185a:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 800185c:	f000 ff70 	bl	8002740 <HAL_ADC_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001866:	f000 fa27 	bl	8001cb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 8001876:	f001 fef1 	bl	800365c <HAL_ADCEx_MultiModeConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001880:	f000 fa1a 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_ADC1_Init+0xe8>)
 8001886:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001888:	2306      	movs	r3, #6
 800188a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001890:	237f      	movs	r3, #127	@ 0x7f
 8001892:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001894:	2304      	movs	r3, #4
 8001896:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_ADC1_Init+0xe0>)
 80018a2:	f001 fa3d 	bl	8002d20 <HAL_ADC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80018ac:	f000 fa04 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000200 	.word	0x20000200
 80018bc:	50040000 	.word	0x50040000
 80018c0:	14f00020 	.word	0x14f00020

080018c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <MX_I2C1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <MX_I2C1_Init+0x7c>)
 80018d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018dc:	2201      	movs	r2, #1
 80018de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fe:	480e      	ldr	r0, [pc, #56]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001900:	f002 faae 	bl	8003e60 <HAL_I2C_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800190a:	f000 f9d5 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190e:	2100      	movs	r1, #0
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001912:	f002 fe73 	bl	80045fc <HAL_I2CEx_ConfigAnalogFilter>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800191c:	f000 f9cc 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001924:	f002 feb5 	bl	8004692 <HAL_I2CEx_ConfigDigitalFilter>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800192e:	f000 f9c3 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000264 	.word	0x20000264
 800193c:	40005400 	.word	0x40005400
 8001940:	10d19ce4 	.word	0x10d19ce4

08001944 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001948:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_TIM16_Init+0x48>)
 800194a:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <MX_TIM16_Init+0x4c>)
 800194c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <MX_TIM16_Init+0x48>)
 8001950:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001954:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <MX_TIM16_Init+0x48>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_TIM16_Init+0x48>)
 800195e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001962:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_TIM16_Init+0x48>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_TIM16_Init+0x48>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_TIM16_Init+0x48>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_TIM16_Init+0x48>)
 8001978:	f004 f9f8 	bl	8005d6c <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001982:	f000 f999 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002b8 	.word	0x200002b8
 8001990:	40014400 	.word	0x40014400

08001994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 800199a:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <MX_USART2_UART_Init+0x5c>)
 800199c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_USART2_UART_Init+0x58>)
 80019d8:	f004 fc8e 	bl	80062f8 <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019e2:	f000 f969 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000304 	.word	0x20000304
 80019f0:	40004400 	.word	0x40004400

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a26:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_GPIO_Init+0xcc>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NINEV_LED_Pin|ONEFIVE_LED_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	4815      	ldr	r0, [pc, #84]	@ (8001ac4 <MX_GPIO_Init+0xd0>)
 8001a70:	f002 f9de 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, THREEV_LED_Pin|CHARGE_LED_Pin|VOLTAGE_LED_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2131      	movs	r1, #49	@ 0x31
 8001a78:	4813      	ldr	r0, [pc, #76]	@ (8001ac8 <MX_GPIO_Init+0xd4>)
 8001a7a:	f002 f9d9 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NINEV_LED_Pin ONEFIVE_LED_Pin */
  GPIO_InitStruct.Pin = NINEV_LED_Pin|ONEFIVE_LED_Pin;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <MX_GPIO_Init+0xd0>)
 8001a96:	f002 f821 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : THREEV_LED_Pin CHARGE_LED_Pin VOLTAGE_LED_Pin */
  GPIO_InitStruct.Pin = THREEV_LED_Pin|CHARGE_LED_Pin|VOLTAGE_LED_Pin;
 8001a9a:	2331      	movs	r3, #49	@ 0x31
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <MX_GPIO_Init+0xd4>)
 8001ab2:	f002 f813 	bl	8003adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	@ 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000400 	.word	0x48000400

08001acc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

    // Check if byte received was on UART2 (from laptop)
    if (huart == &huart2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a64      	ldr	r2, [pc, #400]	@ (8001c68 <HAL_UART_RxCpltCallback+0x19c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	f040 80c0 	bne.w	8001c5e <HAL_UART_RxCpltCallback+0x192>
    {

        // If we get here, it means we received a byte from UART2 and it was placed in "uart2_byte"

        // If uart2_byte isn't \r, \n, or \0, it means the message isn't over yet
        if ((uart2_byte != '\r') && (uart2_byte != '\n') && (uart2_byte != '\0')){
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_UART_RxCpltCallback+0x1a0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b0d      	cmp	r3, #13
 8001ae4:	d015      	beq.n	8001b12 <HAL_UART_RxCpltCallback+0x46>
 8001ae6:	4b61      	ldr	r3, [pc, #388]	@ (8001c6c <HAL_UART_RxCpltCallback+0x1a0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d011      	beq.n	8001b12 <HAL_UART_RxCpltCallback+0x46>
 8001aee:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <HAL_UART_RxCpltCallback+0x1a0>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_UART_RxCpltCallback+0x46>

            // Add uart2_byte to the message
            message[buffer_position] = uart2_byte;
 8001af6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c70 <HAL_UART_RxCpltCallback+0x1a4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_UART_RxCpltCallback+0x1a0>)
 8001afe:	7819      	ldrb	r1, [r3, #0]
 8001b00:	4b5c      	ldr	r3, [pc, #368]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001b02:	5499      	strb	r1, [r3, r2]
            buffer_position++;
 8001b04:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <HAL_UART_RxCpltCallback+0x1a4>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <HAL_UART_RxCpltCallback+0x1a4>)
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e0a0      	b.n	8001c54 <HAL_UART_RxCpltCallback+0x188>
     else
     {
            // If we get here, it means we received \r, \n, or \0 and the message is over

            // Check message
            if (strcmp((char*)message, "VIEW_9V") == 0)
 8001b12:	4959      	ldr	r1, [pc, #356]	@ (8001c78 <HAL_UART_RxCpltCallback+0x1ac>)
 8001b14:	4857      	ldr	r0, [pc, #348]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001b16:	f7fe fb5b 	bl	80001d0 <strcmp>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d117      	bne.n	8001b50 <HAL_UART_RxCpltCallback+0x84>
            {
            	// Activate 9v battery calculation sequence
            	ninev_battery = true;
 8001b20:	4b56      	ldr	r3, [pc, #344]	@ (8001c7c <HAL_UART_RxCpltCallback+0x1b0>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]

                // Deactivate not needed LEDs and activate LED needed
            	HAL_GPIO_WritePin(NINEV_LED_GPIO_Port, NINEV_LED_Pin, 1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4855      	ldr	r0, [pc, #340]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b2c:	f002 f980 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(ONEFIVE_LED_GPIO_Port, ONEFIVE_LED_Pin, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2102      	movs	r1, #2
 8001b34:	4852      	ldr	r0, [pc, #328]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b36:	f002 f97b 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(THREEV_LED_GPIO_Port, THREEV_LED_Pin, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4851      	ldr	r0, [pc, #324]	@ (8001c84 <HAL_UART_RxCpltCallback+0x1b8>)
 8001b40:	f002 f976 	bl	8003e30 <HAL_GPIO_WritePin>

                // Prepare response message
                strncpy((char*)response, "Task complete - 9V Battery values displayed.\n\r", MAX_MESSAGE_SIZE);
 8001b44:	2264      	movs	r2, #100	@ 0x64
 8001b46:	4950      	ldr	r1, [pc, #320]	@ (8001c88 <HAL_UART_RxCpltCallback+0x1bc>)
 8001b48:	4850      	ldr	r0, [pc, #320]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001b4a:	f006 ff58 	bl	80089fe <strncpy>
 8001b4e:	e06a      	b.n	8001c26 <HAL_UART_RxCpltCallback+0x15a>

            } // End of if

            // Check message
            else if (strcmp((char*)message, "VIEW_1.5V") == 0)
 8001b50:	494f      	ldr	r1, [pc, #316]	@ (8001c90 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b52:	4848      	ldr	r0, [pc, #288]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001b54:	f7fe fb3c 	bl	80001d0 <strcmp>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d117      	bne.n	8001b8e <HAL_UART_RxCpltCallback+0xc2>
            {
            	// Activate 1.5v battery calculation sequence
            	one_fivev_battery = true;
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]

                // Deactivate not needed LEDs and activate LED needed
            	HAL_GPIO_WritePin(NINEV_LED_GPIO_Port, NINEV_LED_Pin, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2101      	movs	r1, #1
 8001b68:	4845      	ldr	r0, [pc, #276]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b6a:	f002 f961 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(ONEFIVE_LED_GPIO_Port, ONEFIVE_LED_Pin, 1);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2102      	movs	r1, #2
 8001b72:	4843      	ldr	r0, [pc, #268]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b74:	f002 f95c 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(THREEV_LED_GPIO_Port, THREEV_LED_Pin, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4841      	ldr	r0, [pc, #260]	@ (8001c84 <HAL_UART_RxCpltCallback+0x1b8>)
 8001b7e:	f002 f957 	bl	8003e30 <HAL_GPIO_WritePin>

            	// Prepare response message
                strncpy((char*)response, "Task complete - 1.5V Battery values displayed.\n\r", MAX_MESSAGE_SIZE);
 8001b82:	2264      	movs	r2, #100	@ 0x64
 8001b84:	4944      	ldr	r1, [pc, #272]	@ (8001c98 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b86:	4841      	ldr	r0, [pc, #260]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001b88:	f006 ff39 	bl	80089fe <strncpy>
 8001b8c:	e04b      	b.n	8001c26 <HAL_UART_RxCpltCallback+0x15a>

            } // End of else if

            // Check message
			else if (strcmp((char*)message, "VIEW_3V") == 0)
 8001b8e:	4943      	ldr	r1, [pc, #268]	@ (8001c9c <HAL_UART_RxCpltCallback+0x1d0>)
 8001b90:	4838      	ldr	r0, [pc, #224]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001b92:	f7fe fb1d 	bl	80001d0 <strcmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d117      	bne.n	8001bcc <HAL_UART_RxCpltCallback+0x100>
			{
            	// Activate 3v battery calculation sequence
            	threev_battery = true;
 8001b9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]

                // Deactivate not needed LEDs and activate LED needed
            	HAL_GPIO_WritePin(NINEV_LED_GPIO_Port, NINEV_LED_Pin, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4836      	ldr	r0, [pc, #216]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ba8:	f002 f942 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(ONEFIVE_LED_GPIO_Port, ONEFIVE_LED_Pin, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4833      	ldr	r0, [pc, #204]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001bb2:	f002 f93d 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(THREEV_LED_GPIO_Port, THREEV_LED_Pin, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4832      	ldr	r0, [pc, #200]	@ (8001c84 <HAL_UART_RxCpltCallback+0x1b8>)
 8001bbc:	f002 f938 	bl	8003e30 <HAL_GPIO_WritePin>

				// Prepare response message
				strncpy((char*)response, "Task complete - 3V Battery values displayed.\n\r", MAX_MESSAGE_SIZE);
 8001bc0:	2264      	movs	r2, #100	@ 0x64
 8001bc2:	4938      	ldr	r1, [pc, #224]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001bc4:	4831      	ldr	r0, [pc, #196]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001bc6:	f006 ff1a 	bl	80089fe <strncpy>
 8001bca:	e02c      	b.n	8001c26 <HAL_UART_RxCpltCallback+0x15a>

			} // End of else if

            // Check message
			else if (strcmp((char*)message, "RESET") == 0)
 8001bcc:	4936      	ldr	r1, [pc, #216]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001bce:	4829      	ldr	r0, [pc, #164]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001bd0:	f7fe fafe 	bl	80001d0 <strcmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d120      	bne.n	8001c1c <HAL_UART_RxCpltCallback+0x150>
			{
            	// Deactivate 3v battery calculation sequence
            	threev_battery = false;
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
            	// Deactivate 1.5v battery calculation sequence
            	one_fivev_battery = false;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <HAL_UART_RxCpltCallback+0x1c8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
            	// Deactivate 9v battery calculation sequence
            	ninev_battery = false;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_UART_RxCpltCallback+0x1b0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

                // Deactivate all LEDs
            	HAL_GPIO_WritePin(NINEV_LED_GPIO_Port, NINEV_LED_Pin, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4823      	ldr	r0, [pc, #140]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001bf2:	f002 f91d 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(ONEFIVE_LED_GPIO_Port, ONEFIVE_LED_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4821      	ldr	r0, [pc, #132]	@ (8001c80 <HAL_UART_RxCpltCallback+0x1b4>)
 8001bfc:	f002 f918 	bl	8003e30 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(THREEV_LED_GPIO_Port, THREEV_LED_Pin, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	481f      	ldr	r0, [pc, #124]	@ (8001c84 <HAL_UART_RxCpltCallback+0x1b8>)
 8001c06:	f002 f913 	bl	8003e30 <HAL_GPIO_WritePin>

            	// Activate reset sequence
            	reset_system = true;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_UART_RxCpltCallback+0x1e0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]

				// Prepare response message
				strncpy((char*)response, "Task complete - System successfully reset.\n\r", MAX_MESSAGE_SIZE);
 8001c10:	2264      	movs	r2, #100	@ 0x64
 8001c12:	4927      	ldr	r1, [pc, #156]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001c14:	481d      	ldr	r0, [pc, #116]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c16:	f006 fef2 	bl	80089fe <strncpy>
 8001c1a:	e004      	b.n	8001c26 <HAL_UART_RxCpltCallback+0x15a>

            // Else if the message was not valid
             else {

                // Else message was not recognized
                strncpy((char*)response, "Task not recognized.\n\r", MAX_MESSAGE_SIZE);
 8001c1c:	2264      	movs	r2, #100	@ 0x64
 8001c1e:	4925      	ldr	r1, [pc, #148]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001c20:	481a      	ldr	r0, [pc, #104]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c22:	f006 feec 	bl	80089fe <strncpy>

             } // End of else

            // Send the response message to laptop
            HAL_UART_Transmit(&huart2, response, strlen(response), UART_DELAY);
 8001c26:	4819      	ldr	r0, [pc, #100]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c28:	f7fe fb32 	bl	8000290 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	2364      	movs	r3, #100	@ 0x64
 8001c32:	4916      	ldr	r1, [pc, #88]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <HAL_UART_RxCpltCallback+0x19c>)
 8001c36:	f004 fbad 	bl	8006394 <HAL_UART_Transmit>

            // Zero out message array and response array to get ready for the next message
            memset(message,  0, sizeof(message));
 8001c3a:	2264      	movs	r2, #100	@ 0x64
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <HAL_UART_RxCpltCallback+0x1a8>)
 8001c40:	f006 fed5 	bl	80089ee <memset>
            memset(response, 0, sizeof(response));
 8001c44:	2264      	movs	r2, #100	@ 0x64
 8001c46:	2100      	movs	r1, #0
 8001c48:	4810      	ldr	r0, [pc, #64]	@ (8001c8c <HAL_UART_RxCpltCallback+0x1c0>)
 8001c4a:	f006 fed0 	bl	80089ee <memset>
            buffer_position = 0;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_UART_RxCpltCallback+0x1a4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

        }

        // Restart UART2's receive interrupt to wait for next byte
        HAL_UART_Receive_IT(&huart2, &uart2_byte, 1); //start next byte receive interrupt
 8001c54:	2201      	movs	r2, #1
 8001c56:	4905      	ldr	r1, [pc, #20]	@ (8001c6c <HAL_UART_RxCpltCallback+0x1a0>)
 8001c58:	4803      	ldr	r0, [pc, #12]	@ (8001c68 <HAL_UART_RxCpltCallback+0x19c>)
 8001c5a:	f004 fc25 	bl	80064a8 <HAL_UART_Receive_IT>
    }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000304 	.word	0x20000304
 8001c6c:	20000454 	.word	0x20000454
 8001c70:	20000455 	.word	0x20000455
 8001c74:	2000038c 	.word	0x2000038c
 8001c78:	0800c1f8 	.word	0x0800c1f8
 8001c7c:	20000460 	.word	0x20000460
 8001c80:	48000800 	.word	0x48000800
 8001c84:	48000400 	.word	0x48000400
 8001c88:	0800c200 	.word	0x0800c200
 8001c8c:	200003f0 	.word	0x200003f0
 8001c90:	0800c230 	.word	0x0800c230
 8001c94:	20000461 	.word	0x20000461
 8001c98:	0800c23c 	.word	0x0800c23c
 8001c9c:	0800c270 	.word	0x0800c270
 8001ca0:	20000462 	.word	0x20000462
 8001ca4:	0800c278 	.word	0x0800c278
 8001ca8:	0800c2a8 	.word	0x0800c2a8
 8001cac:	20000463 	.word	0x20000463
 8001cb0:	0800c2b0 	.word	0x0800c2b0
 8001cb4:	0800c2e0 	.word	0x0800c2e0

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <Error_Handler+0x8>

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_MspInit+0x44>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <HAL_MspInit+0x44>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <HAL_MspInit+0x44>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_MspInit+0x44>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_MspInit+0x44>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_MspInit+0x44>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ac      	sub	sp, #176	@ 0xb0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2288      	movs	r2, #136	@ 0x88
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f006 fe5e 	bl	80089ee <memset>
  if(hadc->Instance==ADC1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <HAL_ADC_MspInit+0xc8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d147      	bne.n	8001dcc <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d56:	2307      	movs	r3, #7
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fb41 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001d78:	f7ff ff9e 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d7c:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a15      	ldr	r2, [pc, #84]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d98:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001db2:	230b      	movs	r3, #11
 8001db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc8:	f001 fe88 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	@ 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0ac      	sub	sp, #176	@ 0xb0
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2288      	movs	r2, #136	@ 0x88
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fdf6 	bl	80089ee <memset>
  if(hi2c->Instance==I2C1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <HAL_I2C_MspInit+0xb0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13b      	bne.n	8001e84 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 faeb 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e24:	f7ff ff48 	bl	8001cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e64:	4619      	mov	r1, r3
 8001e66:	480b      	ldr	r0, [pc, #44]	@ (8001e94 <HAL_I2C_MspInit+0xb8>)
 8001e68:	f001 fe38 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_I2C_MspInit+0xb4>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e84:	bf00      	nop
 8001e86:	37b0      	adds	r7, #176	@ 0xb0
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48000400 	.word	0x48000400

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_TIM_Base_MspInit+0x44>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d113      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f001 fd53 	bl	8003972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f001 fd6c 	bl	80039aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2288      	movs	r2, #136	@ 0x88
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f006 fd72 	bl	80089ee <memset>
  if(huart->Instance==USART2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a25      	ldr	r2, [pc, #148]	@ (8001fa4 <HAL_UART_MspInit+0xc0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d143      	bne.n	8001f9c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fa67 	bl	80053f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f2c:	f7ff fec4 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_UART_MspInit+0xc4>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f60:	230c      	movs	r3, #12
 8001f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f78:	2307      	movs	r3, #7
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f88:	f001 fda8 	bl	8003adc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2026      	movs	r0, #38	@ 0x26
 8001f92:	f001 fcee 	bl	8003972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f96:	2026      	movs	r0, #38	@ 0x26
 8001f98:	f001 fd07 	bl	80039aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f9c:	bf00      	nop
 8001f9e:	37b0      	adds	r7, #176	@ 0xb0
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40021000 	.word	0x40021000

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002002:	f000 f975 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002012:	f003 ff73 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002b8 	.word	0x200002b8

08002020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <USART2_IRQHandler+0x10>)
 8002026:	f004 fa8b 	bl	8006540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000304 	.word	0x20000304

08002034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_kill>:

int _kill(int pid, int sig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204e:	f006 fd33 	bl	8008ab8 <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	2216      	movs	r2, #22
 8002056:	601a      	str	r2, [r3, #0]
  return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_exit>:

void _exit (int status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffe7 	bl	8002044 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002076:	bf00      	nop
 8002078:	e7fd      	b.n	8002076 <_exit+0x12>

0800207a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e00a      	b.n	80020a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208c:	f3af 8000 	nop.w
 8002090:	4601      	mov	r1, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbf0      	blt.n	800208c <_read+0x12>
  }

  return len;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e009      	b.n	80020da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	60ba      	str	r2, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbf1      	blt.n	80020c6 <_write+0x12>
  }
  return len;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_close>:

int _close(int file)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002114:	605a      	str	r2, [r3, #4]
  return 0;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_isatty>:

int _isatty(int file)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f006 fc98 	bl	8008ab8 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20018000 	.word	0x20018000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	20000464 	.word	0x20000464
 80021bc:	200005b8 	.word	0x200005b8

080021c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SystemInit+0x20>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <SystemInit+0x20>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e8:	f7ff ffea 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopForever+0xe>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopForever+0x16>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f006 fc57 	bl	8008ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002216:	f7ff f969 	bl	80014ec <main>

0800221a <LoopForever>:

LoopForever:
    b LoopForever
 800221a:	e7fe      	b.n	800221a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800221c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002228:	0800c780 	.word	0x0800c780
  ldr r2, =_sbss
 800222c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002230:	200005b8 	.word	0x200005b8

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_Init+0x3c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_Init+0x3c>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224e:	2003      	movs	r0, #3
 8002250:	f001 fb84 	bl	800395c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002254:	2000      	movs	r0, #0
 8002256:	f000 f80f 	bl	8002278 <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	e001      	b.n	800226a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002266:	f7ff fd2d 	bl	8001cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800226a:	79fb      	ldrb	r3, [r7, #7]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_InitTick+0x70>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fb8f 	bl	80039c6 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d809      	bhi.n	80022c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f001 fb59 	bl	8003972 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_InitTick+0x74>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e007      	b.n	80022d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e004      	b.n	80022d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e001      	b.n	80022d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000018 	.word	0x20000018
 80022e8:	20000010 	.word	0x20000010
 80022ec:	20000014 	.word	0x20000014

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000018 	.word	0x20000018
 8002314:	20000468 	.word	0x20000468

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000468 	.word	0x20000468

08002330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff ffee 	bl	8002318 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d005      	beq.n	8002356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_Delay+0x44>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002356:	bf00      	nop
 8002358:	f7ff ffde 	bl	8002318 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d8f7      	bhi.n	8002358 <HAL_Delay+0x28>
  {
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000018 	.word	0x20000018

08002378 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3360      	adds	r3, #96	@ 0x60
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <LL_ADC_SetOffset+0x44>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	4313      	orrs	r3, r2
 8002410:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	03fff000 	.word	0x03fff000

08002428 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3360      	adds	r3, #96	@ 0x60
 8002436:	461a      	mov	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3360      	adds	r3, #96	@ 0x60
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3330      	adds	r3, #48	@ 0x30
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	211f      	movs	r1, #31
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 011f 	and.w	r1, r3, #31
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3314      	adds	r3, #20
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	0e5b      	lsrs	r3, r3, #25
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0d1b      	lsrs	r3, r3, #20
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2107      	movs	r1, #7
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	401a      	ands	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0d1b      	lsrs	r3, r3, #20
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	431a      	orrs	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0318 	and.w	r3, r3, #24
 8002582:	4908      	ldr	r1, [pc, #32]	@ (80025a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002584:	40d9      	lsrs	r1, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	400b      	ands	r3, r1
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	0007ffff 	.word	0x0007ffff

080025a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 031f 	and.w	r3, r3, #31
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6093      	str	r3, [r2, #8]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002618:	d101      	bne.n	800261e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800263c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002640:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002668:	d101      	bne.n	800266e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <LL_ADC_IsEnabled+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_IsEnabled+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026de:	f043 0204 	orr.w	r2, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d101      	bne.n	800270a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d101      	bne.n	8002730 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e130      	b.n	80029bc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff facf 	bl	8001d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff3f 	bl	8002604 <LL_ADC_IsDeepPowerDownEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff25 	bl	80025e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff5a 	bl	8002654 <LL_ADC_IsInternalRegulatorEnabled>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff3e 	bl	800262c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b0:	4b84      	ldr	r3, [pc, #528]	@ (80029c4 <HAL_ADC_Init+0x284>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	4a84      	ldr	r2, [pc, #528]	@ (80029c8 <HAL_ADC_Init+0x288>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff3c 	bl	8002654 <LL_ADC_IsInternalRegulatorEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff75 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002808:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80c9 	bne.w	80029aa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80c5 	bne.w	80029aa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff35 	bl	80026a4 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d115      	bne.n	800286c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002840:	4862      	ldr	r0, [pc, #392]	@ (80029cc <HAL_ADC_Init+0x28c>)
 8002842:	f7ff ff2f 	bl	80026a4 <LL_ADC_IsEnabled>
 8002846:	4604      	mov	r4, r0
 8002848:	4861      	ldr	r0, [pc, #388]	@ (80029d0 <HAL_ADC_Init+0x290>)
 800284a:	f7ff ff2b 	bl	80026a4 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	431c      	orrs	r4, r3
 8002852:	4860      	ldr	r0, [pc, #384]	@ (80029d4 <HAL_ADC_Init+0x294>)
 8002854:	f7ff ff26 	bl	80026a4 <LL_ADC_IsEnabled>
 8002858:	4603      	mov	r3, r0
 800285a:	4323      	orrs	r3, r4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4619      	mov	r1, r3
 8002866:	485c      	ldr	r0, [pc, #368]	@ (80029d8 <HAL_ADC_Init+0x298>)
 8002868:	f7ff fd86 	bl	8002378 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e5b      	ldrb	r3, [r3, #25]
 8002870:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002876:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800287c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002882:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d106      	bne.n	80028a8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	045b      	lsls	r3, r3, #17
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b44      	ldr	r3, [pc, #272]	@ (80029dc <HAL_ADC_Init+0x29c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff1b 	bl	8002718 <LL_ADC_INJ_IsConversionOngoing>
 80028e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13a      	bne.n	8002966 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800290c:	f023 0302 	bic.w	r3, r3, #2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	430b      	orrs	r3, r1
 8002918:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002920:	2b01      	cmp	r3, #1
 8002922:	d118      	bne.n	8002956 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002946:	430a      	orrs	r2, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	611a      	str	r2, [r3, #16]
 8002954:	e007      	b.n	8002966 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10c      	bne.n	8002988 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	f023 010f 	bic.w	r1, r3, #15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
 8002986:	e007      	b.n	8002998 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020f 	bic.w	r2, r2, #15
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f023 0303 	bic.w	r3, r3, #3
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80029a8:	e007      	b.n	80029ba <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3724      	adds	r7, #36	@ 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	20000010 	.word	0x20000010
 80029c8:	053e2d63 	.word	0x053e2d63
 80029cc:	50040000 	.word	0x50040000
 80029d0:	50040100 	.word	0x50040100
 80029d4:	50040200 	.word	0x50040200
 80029d8:	50040300 	.word	0x50040300
 80029dc:	fff0c007 	.word	0xfff0c007

080029e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e8:	4857      	ldr	r0, [pc, #348]	@ (8002b48 <HAL_ADC_Start+0x168>)
 80029ea:	f7ff fddd 	bl	80025a8 <LL_ADC_GetMultimode>
 80029ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe7c 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 809c 	bne.w	8002b3a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_Start+0x30>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e097      	b.n	8002b40 <HAL_ADC_Start+0x160>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fd73 	bl	8003504 <ADC_Enable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 8083 	bne.w	8002b30 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a42      	ldr	r2, [pc, #264]	@ (8002b4c <HAL_ADC_Start+0x16c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d002      	beq.n	8002a4e <HAL_ADC_Start+0x6e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e000      	b.n	8002a50 <HAL_ADC_Start+0x70>
 8002a4e:	4b40      	ldr	r3, [pc, #256]	@ (8002b50 <HAL_ADC_Start+0x170>)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a76:	d106      	bne.n	8002a86 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	f023 0206 	bic.w	r2, r3, #6
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a84:	e002      	b.n	8002a8c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	221c      	movs	r2, #28
 8002a92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <HAL_ADC_Start+0x16c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d002      	beq.n	8002aac <HAL_ADC_Start+0xcc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_Start+0xce>
 8002aac:	4b28      	ldr	r3, [pc, #160]	@ (8002b50 <HAL_ADC_Start+0x170>)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d008      	beq.n	8002ac8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d002      	beq.n	8002ac8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d114      	bne.n	8002af2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ade:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fded 	bl	80026ca <LL_ADC_REG_StartConversion>
 8002af0:	e025      	b.n	8002b3e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <HAL_ADC_Start+0x16c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d002      	beq.n	8002b0e <HAL_ADC_Start+0x12e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_Start+0x130>
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_ADC_Start+0x170>)
 8002b10:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b2e:	e006      	b.n	8002b3e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b38:	e001      	b.n	8002b3e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	50040300 	.word	0x50040300
 8002b4c:	50040100 	.word	0x50040100
 8002b50:	50040000 	.word	0x50040000

08002b54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b5e:	4866      	ldr	r0, [pc, #408]	@ (8002cf8 <HAL_ADC_PollForConversion+0x1a4>)
 8002b60:	f7ff fd22 	bl	80025a8 <LL_ADC_GetMultimode>
 8002b64:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d102      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e02a      	b.n	8002bca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d002      	beq.n	8002b86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b09      	cmp	r3, #9
 8002b84:	d111      	bne.n	8002baa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0a4      	b.n	8002cee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ba8:	e00f      	b.n	8002bca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002baa:	4853      	ldr	r0, [pc, #332]	@ (8002cf8 <HAL_ADC_PollForConversion+0x1a4>)
 8002bac:	f7ff fd0a 	bl	80025c4 <LL_ADC_GetMultiDMATransfer>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e093      	b.n	8002cee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bca:	f7ff fba5 	bl	8002318 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bd0:	e021      	b.n	8002c16 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d01d      	beq.n	8002c16 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bda:	f7ff fb9d 	bl	8002318 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <HAL_ADC_PollForConversion+0x9c>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d112      	bne.n	8002c16 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e06b      	b.n	8002cee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0d6      	beq.n	8002bd2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc28 	bl	800248a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e5b      	ldrb	r3, [r3, #25]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d118      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d111      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_ADC_PollForConversion+0x1a8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d002      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x136>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_PollForConversion+0x138>
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d00 <HAL_ADC_PollForConversion+0x1ac>)
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d008      	beq.n	8002ca6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b09      	cmp	r3, #9
 8002ca4:	d104      	bne.n	8002cb0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e00c      	b.n	8002cca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a11      	ldr	r2, [pc, #68]	@ (8002cfc <HAL_ADC_PollForConversion+0x1a8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_PollForConversion+0x16c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_PollForConversion+0x16e>
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <HAL_ADC_PollForConversion+0x1ac>)
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d104      	bne.n	8002cda <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e008      	b.n	8002cec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	220c      	movs	r2, #12
 8002cea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	50040300 	.word	0x50040300
 8002cfc:	50040100 	.word	0x50040100
 8002d00:	50040000 	.word	0x50040000

08002d04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0b6      	sub	sp, #216	@ 0xd8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x22>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e3c9      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x7b6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fccf 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 83aa 	bne.w	80034b0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d824      	bhi.n	8002db6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	3b02      	subs	r3, #2
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d81b      	bhi.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
 8002d76:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <HAL_ADC_ConfigChannel+0x5c>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d95 	.word	0x08002d95
 8002d84:	08002d9d 	.word	0x08002d9d
 8002d88:	08002da5 	.word	0x08002da5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d92:	e010      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d94:	2312      	movs	r3, #18
 8002d96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d9c:	2318      	movs	r3, #24
 8002d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002da2:	e008      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dac:	e003      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002dae:	2306      	movs	r3, #6
 8002db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002db4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dc4:	f7ff fb74 	bl	80024b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fc90 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002dd2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fc9c 	bl	8002718 <LL_ADC_INJ_IsConversionOngoing>
 8002de0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 81a4 	bne.w	8003136 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 819f 	bne.w	8003136 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f7ff fb7f 	bl	8002508 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00a      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6919      	ldr	r1, [r3, #16]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e3c:	f7ff fad0 	bl	80023e0 <LL_ADC_SetOffset>
 8002e40:	e179      	b.n	8003136 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff faed 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x14e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fae2 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	e01e      	b.n	8002eac <HAL_ADC_ConfigChannel+0x18c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fad7 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e004      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ea0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1a4>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	e018      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1d6>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e004      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff faa6 	bl	8002454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fa8a 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x214>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fa7f 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	e01e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x252>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fa74 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e004      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x26a>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	e018      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x29c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e004      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d106      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fa43 	bl	8002454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fa27 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x2da>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fa1c 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	e01e      	b.n	8003038 <HAL_ADC_ConfigChannel+0x318>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fa11 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800301c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e004      	b.n	8003036 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800302c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x330>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	e014      	b.n	800307a <HAL_ADC_ConfigChannel+0x35a>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800305e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e004      	b.n	800307a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800307a:	429a      	cmp	r2, r3
 800307c:	d106      	bne.n	800308c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f9e4 	bl	8002454 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2103      	movs	r1, #3
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f9c8 	bl	8002428 <LL_ADC_GetOffsetChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x398>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2103      	movs	r1, #3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f9bd 	bl	8002428 <LL_ADC_GetOffsetChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	f003 021f 	and.w	r2, r3, #31
 80030b6:	e017      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x3c8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2103      	movs	r1, #3
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f9b2 	bl	8002428 <LL_ADC_GetOffsetChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e003      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x3e0>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	e011      	b.n	8003124 <HAL_ADC_ConfigChannel+0x404>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800310e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003110:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800311c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003124:	429a      	cmp	r2, r3
 8003126:	d106      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2200      	movs	r2, #0
 800312e:	2103      	movs	r1, #3
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f98f 	bl	8002454 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fab2 	bl	80026a4 <LL_ADC_IsEnabled>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 8140 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	461a      	mov	r2, r3
 8003156:	f7ff fa03 	bl	8002560 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a8f      	ldr	r2, [pc, #572]	@ (800339c <HAL_ADC_ConfigChannel+0x67c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	f040 8131 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_ADC_ConfigChannel+0x46e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	3301      	adds	r3, #1
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2b09      	cmp	r3, #9
 8003184:	bf94      	ite	ls
 8003186:	2301      	movls	r3, #1
 8003188:	2300      	movhi	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e019      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x4a2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e003      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d079      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x4c2>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	3301      	adds	r3, #1
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e0:	e015      	b.n	800320e <HAL_ADC_ConfigChannel+0x4ee>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	069b      	lsls	r3, r3, #26
 800320a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_ADC_ConfigChannel+0x50e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	3301      	adds	r3, #1
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	e017      	b.n	800325e <HAL_ADC_ConfigChannel+0x53e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800324a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	ea42 0103 	orr.w	r1, r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x564>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	3301      	adds	r3, #1
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	051b      	lsls	r3, r3, #20
 8003282:	e018      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x596>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f003 021f 	and.w	r2, r3, #31
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b6:	430b      	orrs	r3, r1
 80032b8:	e081      	b.n	80033be <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x5b6>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	3301      	adds	r3, #1
 80032ce:	069b      	lsls	r3, r3, #26
 80032d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d4:	e015      	b.n	8003302 <HAL_ADC_ConfigChannel+0x5e2>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x602>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	3301      	adds	r3, #1
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	e017      	b.n	8003352 <HAL_ADC_ConfigChannel+0x632>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	61bb      	str	r3, [r7, #24]
  return result;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	ea42 0103 	orr.w	r1, r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_ADC_ConfigChannel+0x65e>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	3301      	adds	r3, #1
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	3b1e      	subs	r3, #30
 8003376:	051b      	lsls	r3, r3, #20
 8003378:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800337c:	e01e      	b.n	80033bc <HAL_ADC_ConfigChannel+0x69c>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	60fb      	str	r3, [r7, #12]
  return result;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e006      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x688>
 800339a:	bf00      	nop
 800339c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	3b1e      	subs	r3, #30
 80033b6:	051b      	lsls	r3, r3, #20
 80033b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7ff f8a0 	bl	8002508 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b44      	ldr	r3, [pc, #272]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d07a      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d4:	4843      	ldr	r0, [pc, #268]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033d6:	f7fe fff5 	bl	80023c4 <LL_ADC_GetCommonPathInternalCh>
 80033da:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a41      	ldr	r2, [pc, #260]	@ (80034e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d12c      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d126      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3c      	ldr	r2, [pc, #240]	@ (80034ec <HAL_ADC_ConfigChannel+0x7cc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x6e8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3b      	ldr	r2, [pc, #236]	@ (80034f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d15d      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800340c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003410:	4619      	mov	r1, r3
 8003412:	4834      	ldr	r0, [pc, #208]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003414:	f7fe ffc3 	bl	800239e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003418:	4b36      	ldr	r3, [pc, #216]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7d4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	4a36      	ldr	r2, [pc, #216]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003432:	e002      	b.n	800343a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3b01      	subs	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f9      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003440:	e040      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <HAL_ADC_ConfigChannel+0x7dc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d118      	bne.n	800347e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800344c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d112      	bne.n	800347e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a23      	ldr	r2, [pc, #140]	@ (80034ec <HAL_ADC_ConfigChannel+0x7cc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_ADC_ConfigChannel+0x74c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a22      	ldr	r2, [pc, #136]	@ (80034f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d12d      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003474:	4619      	mov	r1, r3
 8003476:	481b      	ldr	r0, [pc, #108]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003478:	f7fe ff91 	bl	800239e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347c:	e024      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_ADC_ConfigChannel+0x7e0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d120      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800348c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11a      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <HAL_ADC_ConfigChannel+0x7cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d115      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034a6:	4619      	mov	r1, r3
 80034a8:	480e      	ldr	r0, [pc, #56]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80034aa:	f7fe ff78 	bl	800239e <LL_ADC_SetCommonPathInternalCh>
 80034ae:	e00c      	b.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034c2:	e002      	b.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034c4:	bf00      	nop
 80034c6:	e000      	b.n	80034ca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	37d8      	adds	r7, #216	@ 0xd8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	80080000 	.word	0x80080000
 80034e4:	50040300 	.word	0x50040300
 80034e8:	c7520000 	.word	0xc7520000
 80034ec:	50040000 	.word	0x50040000
 80034f0:	50040200 	.word	0x50040200
 80034f4:	20000010 	.word	0x20000010
 80034f8:	053e2d63 	.word	0x053e2d63
 80034fc:	cb840000 	.word	0xcb840000
 8003500:	80000001 	.word	0x80000001

08003504 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff f8c5 	bl	80026a4 <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d169      	bne.n	80035f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	4b36      	ldr	r3, [pc, #216]	@ (8003600 <ADC_Enable+0xfc>)
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f043 0210 	orr.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e055      	b.n	80035f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f894 	bl	800267c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003554:	482b      	ldr	r0, [pc, #172]	@ (8003604 <ADC_Enable+0x100>)
 8003556:	f7fe ff35 	bl	80023c4 <LL_ADC_GetCommonPathInternalCh>
 800355a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800355c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003564:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <ADC_Enable+0x104>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	4a28      	ldr	r2, [pc, #160]	@ (800360c <ADC_Enable+0x108>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800357e:	e002      	b.n	8003586 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3b01      	subs	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f9      	bne.n	8003580 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800358c:	f7fe fec4 	bl	8002318 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003592:	e028      	b.n	80035e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f883 	bl	80026a4 <LL_ADC_IsEnabled>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff f867 	bl	800267c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035ae:	f7fe feb3 	bl	8002318 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d914      	bls.n	80035e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d00d      	beq.n	80035e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d1cf      	bne.n	8003594 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	8000003f 	.word	0x8000003f
 8003604:	50040300 	.word	0x50040300
 8003608:	20000010 	.word	0x20000010
 800360c:	053e2d63 	.word	0x053e2d63

08003610 <LL_ADC_IsEnabled>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <LL_ADC_IsEnabled+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_ADC_IsEnabled+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_ADC_REG_IsConversionOngoing>:
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d101      	bne.n	800364e <LL_ADC_REG_IsConversionOngoing+0x18>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b09f      	sub	sp, #124	@ 0x7c
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003676:	2302      	movs	r3, #2
 8003678:	e093      	b.n	80037a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003682:	2300      	movs	r3, #0
 8003684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003686:	2300      	movs	r3, #0
 8003688:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a47      	ldr	r2, [pc, #284]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d102      	bne.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003694:	4b46      	ldr	r3, [pc, #280]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	e001      	b.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e072      	b.n	80037a2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ffb9 	bl	8003636 <LL_ADC_REG_IsConversionOngoing>
 80036c4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ffb3 	bl	8003636 <LL_ADC_REG_IsConversionOngoing>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d154      	bne.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d151      	bne.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036dc:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80036de:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02c      	beq.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036fa:	035b      	lsls	r3, r3, #13
 80036fc:	430b      	orrs	r3, r1
 80036fe:	431a      	orrs	r2, r3
 8003700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003702:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003704:	4829      	ldr	r0, [pc, #164]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003706:	f7ff ff83 	bl	8003610 <LL_ADC_IsEnabled>
 800370a:	4604      	mov	r4, r0
 800370c:	4828      	ldr	r0, [pc, #160]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800370e:	f7ff ff7f 	bl	8003610 <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	431c      	orrs	r4, r3
 8003716:	4828      	ldr	r0, [pc, #160]	@ (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003718:	f7ff ff7a 	bl	8003610 <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	4323      	orrs	r3, r4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d137      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800372c:	f023 030f 	bic.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	6811      	ldr	r1, [r2, #0]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	430a      	orrs	r2, r1
 800373a:	431a      	orrs	r2, r3
 800373c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003740:	e028      	b.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800374a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800374e:	4817      	ldr	r0, [pc, #92]	@ (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003750:	f7ff ff5e 	bl	8003610 <LL_ADC_IsEnabled>
 8003754:	4604      	mov	r4, r0
 8003756:	4816      	ldr	r0, [pc, #88]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003758:	f7ff ff5a 	bl	8003610 <LL_ADC_IsEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	431c      	orrs	r4, r3
 8003760:	4815      	ldr	r0, [pc, #84]	@ (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003762:	f7ff ff55 	bl	8003610 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	4323      	orrs	r3, r4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d112      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800376e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003776:	f023 030f 	bic.w	r3, r3, #15
 800377a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800377c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800377e:	e009      	b.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003792:	e000      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003794:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800379e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	377c      	adds	r7, #124	@ 0x7c
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	bf00      	nop
 80037ac:	50040000 	.word	0x50040000
 80037b0:	50040100 	.word	0x50040100
 80037b4:	50040300 	.word	0x50040300
 80037b8:	50040200 	.word	0x50040200

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4907      	ldr	r1, [pc, #28]	@ (8003858 <__NVIC_EnableIRQ+0x38>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000e100 	.word	0xe000e100

0800385c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	2b00      	cmp	r3, #0
 800386e:	db0a      	blt.n	8003886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <__NVIC_SetPriority+0x4c>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	0112      	lsls	r2, r2, #4
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	440b      	add	r3, r1
 8003880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003884:	e00a      	b.n	800389c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4908      	ldr	r1, [pc, #32]	@ (80038ac <__NVIC_SetPriority+0x50>)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	3b04      	subs	r3, #4
 8003894:	0112      	lsls	r2, r2, #4
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	440b      	add	r3, r1
 800389a:	761a      	strb	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000e100 	.word	0xe000e100
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	@ 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	bf28      	it	cs
 80038ce:	2304      	movcs	r3, #4
 80038d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d902      	bls.n	80038e0 <NVIC_EncodePriority+0x30>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3b03      	subs	r3, #3
 80038de:	e000      	b.n	80038e2 <NVIC_EncodePriority+0x32>
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	401a      	ands	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f8:	f04f 31ff 	mov.w	r1, #4294967295
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43d9      	mvns	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	4313      	orrs	r3, r2
         );
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003928:	d301      	bcc.n	800392e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392a:	2301      	movs	r3, #1
 800392c:	e00f      	b.n	800394e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <SysTick_Config+0x40>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003936:	210f      	movs	r1, #15
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	f7ff ff8e 	bl	800385c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <SysTick_Config+0x40>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003946:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <SysTick_Config+0x40>)
 8003948:	2207      	movs	r2, #7
 800394a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	e000e010 	.word	0xe000e010

0800395c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff29 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003984:	f7ff ff3e 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	6978      	ldr	r0, [r7, #20]
 8003990:	f7ff ff8e 	bl	80038b0 <NVIC_EncodePriority>
 8003994:	4602      	mov	r2, r0
 8003996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff5d 	bl	800385c <__NVIC_SetPriority>
}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff31 	bl	8003820 <__NVIC_EnableIRQ>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffa2 	bl	8003918 <SysTick_Config>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d008      	beq.n	8003a08 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2204      	movs	r2, #4
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e022      	b.n	8003a4e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 020e 	bic.w	r2, r2, #14
 8003a16:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	f003 021c 	and.w	r2, r3, #28
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d005      	beq.n	8003a7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2204      	movs	r2, #4
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e029      	b.n	8003ad2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 020e 	bic.w	r2, r2, #14
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 021c 	and.w	r2, r3, #28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
    }
  }
  return status;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aea:	e17f      	b.n	8003dec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	4013      	ands	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8171 	beq.w	8003de6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d005      	beq.n	8003b1c <HAL_GPIO_Init+0x40>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d130      	bne.n	8003b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b52:	2201      	movs	r2, #1
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 0201 	and.w	r2, r3, #1
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d118      	bne.n	8003bbc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b90:	2201      	movs	r2, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f003 0201 	and.w	r2, r3, #1
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d017      	beq.n	8003bf8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d123      	bne.n	8003c4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	08da      	lsrs	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3208      	adds	r2, #8
 8003c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	08da      	lsrs	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3208      	adds	r2, #8
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0203 	and.w	r2, r3, #3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80ac 	beq.w	8003de6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e0c <HAL_GPIO_Init+0x330>)
 8003c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c92:	4a5e      	ldr	r2, [pc, #376]	@ (8003e0c <HAL_GPIO_Init+0x330>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e0c <HAL_GPIO_Init+0x330>)
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e10 <HAL_GPIO_Init+0x334>)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	3302      	adds	r3, #2
 8003cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x242>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_GPIO_Init+0x338>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x23e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e18 <HAL_GPIO_Init+0x33c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x23a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_GPIO_Init+0x340>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x236>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4c      	ldr	r2, [pc, #304]	@ (8003e20 <HAL_GPIO_Init+0x344>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x232>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e24 <HAL_GPIO_Init+0x348>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x22e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <HAL_GPIO_Init+0x34c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x22a>
 8003d02:	2306      	movs	r3, #6
 8003d04:	e00c      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00a      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d0a:	2305      	movs	r3, #5
 8003d0c:	e008      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e006      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d12:	2303      	movs	r3, #3
 8003d14:	e004      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e002      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_GPIO_Init+0x244>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	f002 0203 	and.w	r2, r2, #3
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	4093      	lsls	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d30:	4937      	ldr	r1, [pc, #220]	@ (8003e10 <HAL_GPIO_Init+0x334>)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	089b      	lsrs	r3, r3, #2
 8003d36:	3302      	adds	r3, #2
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d62:	4a32      	ldr	r2, [pc, #200]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d68:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d8c:	4a27      	ldr	r2, [pc, #156]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d92:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de0:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <HAL_GPIO_Init+0x350>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3301      	adds	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f47f ae78 	bne.w	8003aec <HAL_GPIO_Init+0x10>
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010000 	.word	0x40010000
 8003e14:	48000400 	.word	0x48000400
 8003e18:	48000800 	.word	0x48000800
 8003e1c:	48000c00 	.word	0x48000c00
 8003e20:	48001000 	.word	0x48001000
 8003e24:	48001400 	.word	0x48001400
 8003e28:	48001800 	.word	0x48001800
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e08d      	b.n	8003f8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd ffa8 	bl	8001ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e006      	b.n	8003ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d108      	bne.n	8003f02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e007      	b.n	8003f12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	817b      	strh	r3, [r7, #10]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	f040 80fd 	bne.w	80041b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x30>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e0f6      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fe f9a2 	bl	8002318 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f914 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0e1      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	@ 0x21
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2bff      	cmp	r3, #255	@ 0xff
 8004022:	d906      	bls.n	8004032 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	22ff      	movs	r2, #255	@ 0xff
 8004028:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800402a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e007      	b.n	8004042 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800403c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004040:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d024      	beq.n	8004094 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	4b4e      	ldr	r3, [pc, #312]	@ (80041c0 <HAL_I2C_Master_Transmit+0x228>)
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fa83 	bl	8004598 <I2C_TransferConfig>
 8004092:	e066      	b.n	8004162 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	b2da      	uxtb	r2, r3
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	4b48      	ldr	r3, [pc, #288]	@ (80041c0 <HAL_I2C_Master_Transmit+0x228>)
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa78 	bl	8004598 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80040a8:	e05b      	b.n	8004162 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	6a39      	ldr	r1, [r7, #32]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f907 	bl	80042c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07b      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d034      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x1ca>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d130      	bne.n	8004162 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2200      	movs	r2, #0
 8004108:	2180      	movs	r1, #128	@ 0x80
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f880 	bl	8004210 <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e04d      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2bff      	cmp	r3, #255	@ 0xff
 8004122:	d90e      	bls.n	8004142 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	22ff      	movs	r2, #255	@ 0xff
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	b2da      	uxtb	r2, r3
 8004130:	8979      	ldrh	r1, [r7, #10]
 8004132:	2300      	movs	r3, #0
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa2c 	bl	8004598 <I2C_TransferConfig>
 8004140:	e00f      	b.n	8004162 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	b2da      	uxtb	r2, r3
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa1b 	bl	8004598 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d19e      	bne.n	80040aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	6a39      	ldr	r1, [r7, #32]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f8ed 	bl	8004350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e01a      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2220      	movs	r2, #32
 8004186:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_I2C_Master_Transmit+0x22c>)
 8004194:	400b      	ands	r3, r1
 8004196:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	80002000 	.word	0x80002000
 80041c4:	fe00e800 	.word	0xfe00e800

080041c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d103      	bne.n	80041e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d007      	beq.n	8004204 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	619a      	str	r2, [r3, #24]
  }
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004220:	e03b      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f8d6 	bl	80043d8 <I2C_IsErrorOccurred>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e041      	b.n	80042ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d02d      	beq.n	800429a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe f86b 	bl	8002318 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnFlagUntilTimeout+0x44>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d122      	bne.n	800429a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4013      	ands	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	429a      	cmp	r2, r3
 8004270:	d113      	bne.n	800429a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0b4      	beq.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042ce:	e033      	b.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f87f 	bl	80043d8 <I2C_IsErrorOccurred>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e031      	b.n	8004348 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d025      	beq.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ec:	f7fe f814 	bl	8002318 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d11a      	bne.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d013      	beq.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d1c4      	bne.n	80042d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800435c:	e02f      	b.n	80043be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f838 	bl	80043d8 <I2C_IsErrorOccurred>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02d      	b.n	80043ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fd ffd1 	bl	8002318 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11a      	bne.n	80043be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d013      	beq.n	80043be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d1c8      	bne.n	800435e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	@ 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d068      	beq.n	80044d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800440c:	e049      	b.n	80044a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d045      	beq.n	80044a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004416:	f7fd ff7f 	bl	8002318 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	d302      	bcc.n	800442c <I2C_IsErrorOccurred+0x54>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13a      	bne.n	80044a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004436:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800443e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444e:	d121      	bne.n	8004494 <I2C_IsErrorOccurred+0xbc>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004456:	d01d      	beq.n	8004494 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b20      	cmp	r3, #32
 800445c:	d01a      	beq.n	8004494 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800446c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800446e:	f7fd ff53 	bl	8002318 <HAL_GetTick>
 8004472:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004474:	e00e      	b.n	8004494 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004476:	f7fd ff4f 	bl	8002318 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b19      	cmp	r3, #25
 8004482:	d907      	bls.n	8004494 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f043 0320 	orr.w	r3, r3, #32
 800448a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004492:	e006      	b.n	80044a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d1e9      	bne.n	8004476 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d003      	beq.n	80044b8 <I2C_IsErrorOccurred+0xe0>
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0aa      	beq.n	800440e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2220      	movs	r2, #32
 80044c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800451a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01c      	beq.n	8004586 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fe3b 	bl	80041c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <I2C_IsErrorOccurred+0x1bc>)
 800455e:	400b      	ands	r3, r1
 8004560:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800458a:	4618      	mov	r0, r3
 800458c:	3728      	adds	r7, #40	@ 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	fe00e800 	.word	0xfe00e800

08004598 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	4613      	mov	r3, r2
 80045a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045b0:	7a7b      	ldrb	r3, [r7, #9]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	0d5b      	lsrs	r3, r3, #21
 80045d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <I2C_TransferConfig+0x60>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	43db      	mvns	r3, r3
 80045dc:	ea02 0103 	and.w	r1, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	03ff63ff 	.word	0x03ff63ff

080045fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b20      	cmp	r3, #32
 8004610:	d138      	bne.n	8004684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800461c:	2302      	movs	r3, #2
 800461e:	e032      	b.n	8004686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	@ 0x24
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800464e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d139      	bne.n	800471c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e033      	b.n	800471e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2224      	movs	r2, #36	@ 0x24
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <HAL_PWREx_GetVoltageRange+0x18>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40007000 	.word	0x40007000

08004748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004756:	d130      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d038      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004770:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2232      	movs	r2, #50	@ 0x32
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478c:	e002      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b01      	subs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004794:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a0:	d102      	bne.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f2      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b4:	d110      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d007      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047d0:	4a05      	ldr	r2, [pc, #20]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000
 80047ec:	20000010 	.word	0x20000010
 80047f0:	431bde83 	.word	0x431bde83

080047f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e3ca      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004806:	4b97      	ldr	r3, [pc, #604]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004810:	4b94      	ldr	r3, [pc, #592]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80e4 	beq.w	80049f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_RCC_OscConfig+0x4a>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	f040 808b 	bne.w	800494c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b01      	cmp	r3, #1
 800483a:	f040 8087 	bne.w	800494c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800483e:	4b89      	ldr	r3, [pc, #548]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_RCC_OscConfig+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e3a2      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	4b82      	ldr	r3, [pc, #520]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <HAL_RCC_OscConfig+0x7c>
 8004866:	4b7f      	ldr	r3, [pc, #508]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800486e:	e005      	b.n	800487c <HAL_RCC_OscConfig+0x88>
 8004870:	4b7c      	ldr	r3, [pc, #496]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800487c:	4293      	cmp	r3, r2
 800487e:	d223      	bcs.n	80048c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fd55 	bl	8005334 <RCC_SetFlashLatencyFromMSIRange>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e383      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004894:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a72      	ldr	r2, [pc, #456]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800489a:	f043 0308 	orr.w	r3, r3, #8
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b70      	ldr	r3, [pc, #448]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	496d      	ldr	r1, [pc, #436]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	4968      	ldr	r1, [pc, #416]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
 80048c6:	e025      	b.n	8004914 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c8:	4b66      	ldr	r3, [pc, #408]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a65      	ldr	r2, [pc, #404]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048ce:	f043 0308 	orr.w	r3, r3, #8
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b63      	ldr	r3, [pc, #396]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	4960      	ldr	r1, [pc, #384]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	495b      	ldr	r1, [pc, #364]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fd15 	bl	8005334 <RCC_SetFlashLatencyFromMSIRange>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e343      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004914:	f000 fc4a 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b52      	ldr	r3, [pc, #328]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	4950      	ldr	r1, [pc, #320]	@ (8004a68 <HAL_RCC_OscConfig+0x274>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	4a4e      	ldr	r2, [pc, #312]	@ (8004a6c <HAL_RCC_OscConfig+0x278>)
 8004932:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004934:	4b4e      	ldr	r3, [pc, #312]	@ (8004a70 <HAL_RCC_OscConfig+0x27c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd fc9d 	bl	8002278 <HAL_InitTick>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d052      	beq.n	80049ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	e327      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d032      	beq.n	80049ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004954:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a42      	ldr	r2, [pc, #264]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004960:	f7fd fcda 	bl	8002318 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004968:	f7fd fcd6 	bl	8002318 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e310      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800497a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004986:	4b37      	ldr	r3, [pc, #220]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a36      	ldr	r2, [pc, #216]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4931      	ldr	r1, [pc, #196]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	492c      	ldr	r1, [pc, #176]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
 80049b8:	e01a      	b.n	80049f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a29      	ldr	r2, [pc, #164]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c6:	f7fd fca7 	bl	8002318 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ce:	f7fd fca3 	bl	8002318 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e2dd      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x1da>
 80049ec:	e000      	b.n	80049f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d074      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x21a>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d10e      	bne.n	8004a26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4b15      	ldr	r3, [pc, #84]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d064      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d160      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e2ba      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x24a>
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e026      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a46:	d115      	bne.n	8004a74 <HAL_RCC_OscConfig+0x280>
 8004a48:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a05      	ldr	r2, [pc, #20]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a02      	ldr	r2, [pc, #8]	@ (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e014      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800c2f8 	.word	0x0800c2f8
 8004a6c:	20000010 	.word	0x20000010
 8004a70:	20000014 	.word	0x20000014
 8004a74:	4ba0      	ldr	r3, [pc, #640]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a9f      	ldr	r2, [pc, #636]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b9d      	ldr	r3, [pc, #628]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a9c      	ldr	r2, [pc, #624]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fc40 	bl	8002318 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fc3c 	bl	8002318 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e276      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aae:	4b92      	ldr	r3, [pc, #584]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2a8>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fc2c 	bl	8002318 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd fc28 	bl	8002318 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e262      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad6:	4b88      	ldr	r3, [pc, #544]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2d0>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d060      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_OscConfig+0x310>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d116      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b04:	4b7c      	ldr	r3, [pc, #496]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x328>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e23f      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b76      	ldr	r3, [pc, #472]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	4973      	ldr	r1, [pc, #460]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	e040      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d023      	beq.n	8004b82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fbe7 	bl	8002318 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fbe3 	bl	8002318 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e21d      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b60:	4b65      	ldr	r3, [pc, #404]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b62      	ldr	r3, [pc, #392]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	495f      	ldr	r1, [pc, #380]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	e018      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b82:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5c      	ldr	r2, [pc, #368]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fbc3 	bl	8002318 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b96:	f7fd fbbf 	bl	8002318 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1f9      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba8:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fb9e 	bl	8002318 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fb9a 	bl	8002318 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e1d4      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf2:	4b41      	ldr	r3, [pc, #260]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCC_OscConfig+0x3ec>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c02:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c08:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fb81 	bl	8002318 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fb7d 	bl	8002318 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1b7      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2c:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1ef      	bne.n	8004c1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a6 	beq.w	8004d94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c64:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c70:	2301      	movs	r3, #1
 8004c72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b21      	ldr	r3, [pc, #132]	@ (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d118      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c80:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fb44 	bl	8002318 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c94:	f7fd fb40 	bl	8002318 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e17a      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca6:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4d8>
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cca:	e029      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_OscConfig+0x50c>
 8004cd4:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	4a07      	ldr	r2, [pc, #28]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce4:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cea:	4a03      	ldr	r2, [pc, #12]	@ (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf4:	e014      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	4b9c      	ldr	r3, [pc, #624]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	4a9b      	ldr	r2, [pc, #620]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d10:	4b98      	ldr	r3, [pc, #608]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a97      	ldr	r2, [pc, #604]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d016      	beq.n	8004d56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd faf6 	bl	8002318 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd faf2 	bl	8002318 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e12a      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	4b8b      	ldr	r3, [pc, #556]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ed      	beq.n	8004d30 <HAL_RCC_OscConfig+0x53c>
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd fadf 	bl	8002318 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fadb 	bl	8002318 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e113      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d74:	4b7f      	ldr	r3, [pc, #508]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ed      	bne.n	8004d5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d82:	7ffb      	ldrb	r3, [r7, #31]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b7a      	ldr	r3, [pc, #488]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	4a79      	ldr	r2, [pc, #484]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80fe 	beq.w	8004f9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	f040 80d0 	bne.w	8004f48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004da8:	4b72      	ldr	r3, [pc, #456]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0203 	and.w	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d130      	bne.n	8004e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d127      	bne.n	8004e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d11f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004de8:	2a07      	cmp	r2, #7
 8004dea:	bf14      	ite	ne
 8004dec:	2201      	movne	r2, #1
 8004dee:	2200      	moveq	r2, #0
 8004df0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d113      	bne.n	8004e1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	3b01      	subs	r3, #1
 8004e04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d109      	bne.n	8004e1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d06e      	beq.n	8004efc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d069      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e30:	4b50      	ldr	r3, [pc, #320]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0ad      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e40:	4b4c      	ldr	r3, [pc, #304]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a4b      	ldr	r2, [pc, #300]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e4c:	f7fd fa64 	bl	8002318 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd fa60 	bl	8002318 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e09a      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e66:	4b43      	ldr	r3, [pc, #268]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e72:	4b40      	ldr	r3, [pc, #256]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e82:	3a01      	subs	r2, #1
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	4311      	orrs	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e8c:	0212      	lsls	r2, r2, #8
 8004e8e:	4311      	orrs	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e94:	0852      	lsrs	r2, r2, #1
 8004e96:	3a01      	subs	r2, #1
 8004e98:	0552      	lsls	r2, r2, #21
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ea0:	0852      	lsrs	r2, r2, #1
 8004ea2:	3a01      	subs	r2, #1
 8004ea4:	0652      	lsls	r2, r2, #25
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004eac:	0912      	lsrs	r2, r2, #4
 8004eae:	0452      	lsls	r2, r2, #17
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	4930      	ldr	r1, [pc, #192]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ed0:	f7fd fa22 	bl	8002318 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd fa1e 	bl	8002318 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e058      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eea:	4b22      	ldr	r3, [pc, #136]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef6:	e050      	b.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04f      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d148      	bne.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f14:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f20:	f7fd f9fa 	bl	8002318 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd f9f6 	bl	8002318 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e030      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x734>
 8004f46:	e028      	b.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d023      	beq.n	8004f96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <HAL_RCC_OscConfig+0x780>)
 8004f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd f9dd 	bl	8002318 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	e00c      	b.n	8004f7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fd f9d9 	bl	8002318 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d905      	bls.n	8004f7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e013      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
 8004f74:	40021000 	.word	0x40021000
 8004f78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_OscConfig+0x7b0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1ec      	bne.n	8004f62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f88:	4b06      	ldr	r3, [pc, #24]	@ (8004fa4 <HAL_RCC_OscConfig+0x7b0>)
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	4905      	ldr	r1, [pc, #20]	@ (8004fa4 <HAL_RCC_OscConfig+0x7b0>)
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <HAL_RCC_OscConfig+0x7b4>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60cb      	str	r3, [r1, #12]
 8004f94:	e001      	b.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	feeefffc 	.word	0xfeeefffc

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0e7      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b75      	ldr	r3, [pc, #468]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d910      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b72      	ldr	r3, [pc, #456]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 0207 	bic.w	r2, r3, #7
 8004fd6:	4970      	ldr	r1, [pc, #448]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b6e      	ldr	r3, [pc, #440]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0cf      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d010      	beq.n	800501e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	4b66      	ldr	r3, [pc, #408]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005008:	429a      	cmp	r2, r3
 800500a:	d908      	bls.n	800501e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800500c:	4b63      	ldr	r3, [pc, #396]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4960      	ldr	r1, [pc, #384]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04c      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	4b5a      	ldr	r3, [pc, #360]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d121      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0a6      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504a:	4b54      	ldr	r3, [pc, #336]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d115      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e09a      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005062:	4b4e      	ldr	r3, [pc, #312]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e08e      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005072:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e086      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4943      	ldr	r1, [pc, #268]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fd f940 	bl	8002318 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fd f93c 	bl	8002318 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e06e      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b3a      	ldr	r3, [pc, #232]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4b31      	ldr	r3, [pc, #196]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050dc:	429a      	cmp	r2, r3
 80050de:	d208      	bcs.n	80050f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e0:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	492b      	ldr	r1, [pc, #172]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f2:	4b29      	ldr	r3, [pc, #164]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d210      	bcs.n	8005122 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005100:	4b25      	ldr	r3, [pc, #148]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 0207 	bic.w	r2, r3, #7
 8005108:	4923      	ldr	r1, [pc, #140]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCC_ClockConfig+0x1ec>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d001      	beq.n	8005122 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e036      	b.n	8005190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512e:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4918      	ldr	r1, [pc, #96]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514c:	4b13      	ldr	r3, [pc, #76]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4910      	ldr	r1, [pc, #64]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005160:	f000 f824 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	490b      	ldr	r1, [pc, #44]	@ (80051a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	4a09      	ldr	r2, [pc, #36]	@ (80051a4 <HAL_RCC_ClockConfig+0x1f8>)
 800517e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd f877 	bl	8002278 <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
 800518c:	72fb      	strb	r3, [r7, #11]

  return status;
 800518e:	7afb      	ldrb	r3, [r7, #11]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40022000 	.word	0x40022000
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800c2f8 	.word	0x0800c2f8
 80051a4:	20000010 	.word	0x20000010
 80051a8:	20000014 	.word	0x20000014

080051ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ba:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051c4:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x34>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d121      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11e      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e0:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051ec:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e005      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051fc:	4b2d      	ldr	r3, [pc, #180]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005208:	4a2b      	ldr	r2, [pc, #172]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10d      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800521c:	e00a      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d102      	bne.n	800522a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005224:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	e004      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d101      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005230:	4b23      	ldr	r3, [pc, #140]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d134      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523a:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0xa6>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d003      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0xac>
 8005250:	e005      	b.n	800525e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005252:	4b1a      	ldr	r3, [pc, #104]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005254:	617b      	str	r3, [r7, #20]
      break;
 8005256:	e005      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005258:	4b19      	ldr	r3, [pc, #100]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800525a:	617b      	str	r3, [r7, #20]
      break;
 800525c:	e002      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	617b      	str	r3, [r7, #20]
      break;
 8005262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	3301      	adds	r3, #1
 8005270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	fb03 f202 	mul.w	r2, r3, r2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	0e5b      	lsrs	r3, r3, #25
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	3301      	adds	r3, #1
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052a4:	69bb      	ldr	r3, [r7, #24]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3724      	adds	r7, #36	@ 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	0800c310 	.word	0x0800c310
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	007a1200 	.word	0x007a1200

080052c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c8:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ca:	681b      	ldr	r3, [r3, #0]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000010 	.word	0x20000010

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052e0:	f7ff fff0 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4904      	ldr	r1, [pc, #16]	@ (8005304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	0800c308 	.word	0x0800c308

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800530c:	f7ff ffda 	bl	80052c4 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b06      	ldr	r3, [pc, #24]	@ (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0adb      	lsrs	r3, r3, #11
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4904      	ldr	r1, [pc, #16]	@ (8005330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	0800c308 	.word	0x0800c308

08005334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005340:	4b2a      	ldr	r3, [pc, #168]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800534c:	f7ff f9ee 	bl	800472c <HAL_PWREx_GetVoltageRange>
 8005350:	6178      	str	r0, [r7, #20]
 8005352:	e014      	b.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	4a24      	ldr	r2, [pc, #144]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005360:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800536c:	f7ff f9de 	bl	800472c <HAL_PWREx_GetVoltageRange>
 8005370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005372:	4b1e      	ldr	r3, [pc, #120]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	4a1d      	ldr	r2, [pc, #116]	@ (80053ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005384:	d10b      	bne.n	800539e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d919      	bls.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005390:	d902      	bls.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005392:	2302      	movs	r3, #2
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e013      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005398:	2301      	movs	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e010      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b80      	cmp	r3, #128	@ 0x80
 80053a2:	d902      	bls.n	80053aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053a4:	2303      	movs	r3, #3
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e00a      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b80      	cmp	r3, #128	@ 0x80
 80053ae:	d102      	bne.n	80053b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053b0:	2302      	movs	r3, #2
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e004      	b.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b70      	cmp	r3, #112	@ 0x70
 80053ba:	d101      	bne.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053bc:	2301      	movs	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053c0:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 0207 	bic.w	r2, r3, #7
 80053c8:	4909      	ldr	r1, [pc, #36]	@ (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d001      	beq.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40022000 	.word	0x40022000

080053f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053fc:	2300      	movs	r3, #0
 80053fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005400:	2300      	movs	r3, #0
 8005402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800540c:	2b00      	cmp	r3, #0
 800540e:	d041      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005414:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005418:	d02a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800541a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800541e:	d824      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005424:	d008      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800542a:	d81e      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005434:	d010      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005436:	e018      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005438:	4b86      	ldr	r3, [pc, #536]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a85      	ldr	r2, [pc, #532]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005442:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005444:	e015      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2100      	movs	r1, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fabb 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005456:	e00c      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3320      	adds	r3, #32
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fba6 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	74fb      	strb	r3, [r7, #19]
      break;
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005478:	4b76      	ldr	r3, [pc, #472]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005486:	4973      	ldr	r1, [pc, #460]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800548e:	e001      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d041      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054a8:	d02a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054ae:	d824      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054b4:	d008      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ba:	d81e      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054c4:	d010      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054c6:	e018      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c8:	4b62      	ldr	r3, [pc, #392]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4a61      	ldr	r2, [pc, #388]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d4:	e015      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fa73 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054e6:	e00c      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3320      	adds	r3, #32
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fb5e 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	74fb      	strb	r3, [r7, #19]
      break;
 80054fe:	e000      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005508:	4b52      	ldr	r3, [pc, #328]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005516:	494f      	ldr	r1, [pc, #316]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800551e:	e001      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a0 	beq.w	8005672 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005532:	2300      	movs	r3, #0
 8005534:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005536:	4b47      	ldr	r3, [pc, #284]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554c:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	4a40      	ldr	r2, [pc, #256]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005556:	6593      	str	r3, [r2, #88]	@ 0x58
 8005558:	4b3e      	ldr	r3, [pc, #248]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005564:	2301      	movs	r3, #1
 8005566:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005568:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3a      	ldr	r2, [pc, #232]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800556e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005572:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005574:	f7fc fed0 	bl	8002318 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800557a:	e009      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fc fecc 	bl	8002318 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	74fb      	strb	r3, [r7, #19]
        break;
 800558e:	e005      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005590:	4b31      	ldr	r3, [pc, #196]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ef      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d15c      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d019      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055cc:	4b21      	ldr	r3, [pc, #132]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	4a20      	ldr	r2, [pc, #128]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055ec:	4a19      	ldr	r2, [pc, #100]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d016      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fc fe8b 	bl	8002318 <HAL_GetTick>
 8005602:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005604:	e00b      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fc fe87 	bl	8002318 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d902      	bls.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	74fb      	strb	r3, [r7, #19]
            break;
 800561c:	e006      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ec      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005638:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005642:	4904      	ldr	r1, [pc, #16]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800564a:	e009      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	74bb      	strb	r3, [r7, #18]
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005660:	7c7b      	ldrb	r3, [r7, #17]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d105      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4b9e      	ldr	r3, [pc, #632]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566a:	4a9d      	ldr	r2, [pc, #628]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005670:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800567e:	4b98      	ldr	r3, [pc, #608]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f023 0203 	bic.w	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	4994      	ldr	r1, [pc, #592]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056a0:	4b8f      	ldr	r3, [pc, #572]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f023 020c 	bic.w	r2, r3, #12
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	498c      	ldr	r1, [pc, #560]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056c2:	4b87      	ldr	r3, [pc, #540]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	4983      	ldr	r1, [pc, #524]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056e4:	4b7e      	ldr	r3, [pc, #504]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	497b      	ldr	r1, [pc, #492]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005706:	4b76      	ldr	r3, [pc, #472]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	4972      	ldr	r1, [pc, #456]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005728:	4b6d      	ldr	r3, [pc, #436]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005736:	496a      	ldr	r1, [pc, #424]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800574a:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005750:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	4961      	ldr	r1, [pc, #388]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800576c:	4b5c      	ldr	r3, [pc, #368]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005772:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577a:	4959      	ldr	r1, [pc, #356]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800578e:	4b54      	ldr	r3, [pc, #336]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800579c:	4950      	ldr	r1, [pc, #320]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057b0:	4b4b      	ldr	r3, [pc, #300]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	4948      	ldr	r1, [pc, #288]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057d2:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	493f      	ldr	r1, [pc, #252]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d028      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f4:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005802:	4937      	ldr	r1, [pc, #220]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005812:	d106      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005814:	4b32      	ldr	r3, [pc, #200]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a31      	ldr	r2, [pc, #196]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800581e:	60d3      	str	r3, [r2, #12]
 8005820:	e011      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800582a:	d10c      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f8c8 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005842:	7cfb      	ldrb	r3, [r7, #19]
 8005844:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d028      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005852:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	491f      	ldr	r1, [pc, #124]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005870:	d106      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587c:	60d3      	str	r3, [r2, #12]
 800587e:	e011      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005888:	d10c      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f899 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02b      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b0:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058be:	4908      	ldr	r1, [pc, #32]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ce:	d109      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d0:	4b03      	ldr	r3, [pc, #12]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a02      	ldr	r2, [pc, #8]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058da:	60d3      	str	r3, [r2, #12]
 80058dc:	e014      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f867 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02f      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005914:	4b2b      	ldr	r3, [pc, #172]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005922:	4928      	ldr	r1, [pc, #160]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800592e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005932:	d10d      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	2102      	movs	r1, #2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f844 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	74bb      	strb	r3, [r7, #18]
 800594e:	e011      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005958:	d10c      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3320      	adds	r3, #32
 800595e:	2102      	movs	r1, #2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f925 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800596a:	7cfb      	ldrb	r3, [r7, #19]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005986:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800598e:	490d      	ldr	r1, [pc, #52]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059a2:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b2:	4904      	ldr	r1, [pc, #16]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000

080059c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d6:	4b75      	ldr	r3, [pc, #468]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059e2:	4b72      	ldr	r3, [pc, #456]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0203 	and.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d10d      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
       ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059fa:	4b6c      	ldr	r3, [pc, #432]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
       ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d047      	beq.n	8005a9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e044      	b.n	8005a9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d018      	beq.n	8005a4e <RCCEx_PLLSAI1_Config+0x86>
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d825      	bhi.n	8005a6c <RCCEx_PLLSAI1_Config+0xa4>
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d002      	beq.n	8005a2a <RCCEx_PLLSAI1_Config+0x62>
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d009      	beq.n	8005a3c <RCCEx_PLLSAI1_Config+0x74>
 8005a28:	e020      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a2a:	4b60      	ldr	r3, [pc, #384]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11d      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3a:	e01a      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d116      	bne.n	8005a76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4c:	e013      	b.n	8005a76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a4e:	4b57      	ldr	r3, [pc, #348]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10f      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a5a:	4b54      	ldr	r3, [pc, #336]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a6a:	e006      	b.n	8005a7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e004      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a82:	4b4a      	ldr	r3, [pc, #296]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	430b      	orrs	r3, r1
 8005a98:	4944      	ldr	r1, [pc, #272]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d17d      	bne.n	8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005aa4:	4b41      	ldr	r3, [pc, #260]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a40      	ldr	r2, [pc, #256]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc fc32 	bl	8002318 <HAL_GetTick>
 8005ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ab6:	e009      	b.n	8005acc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ab8:	f7fc fc2e 	bl	8002318 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d902      	bls.n	8005acc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aca:	e005      	b.n	8005ad8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005acc:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d160      	bne.n	8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d111      	bne.n	8005b08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ae4:	4b31      	ldr	r3, [pc, #196]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6892      	ldr	r2, [r2, #8]
 8005af4:	0211      	lsls	r1, r2, #8
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	0912      	lsrs	r2, r2, #4
 8005afc:	0452      	lsls	r2, r2, #17
 8005afe:	430a      	orrs	r2, r1
 8005b00:	492a      	ldr	r1, [pc, #168]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]
 8005b06:	e027      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d112      	bne.n	8005b34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b0e:	4b27      	ldr	r3, [pc, #156]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6892      	ldr	r2, [r2, #8]
 8005b1e:	0211      	lsls	r1, r2, #8
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6912      	ldr	r2, [r2, #16]
 8005b24:	0852      	lsrs	r2, r2, #1
 8005b26:	3a01      	subs	r2, #1
 8005b28:	0552      	lsls	r2, r2, #21
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	491f      	ldr	r1, [pc, #124]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	610b      	str	r3, [r1, #16]
 8005b32:	e011      	b.n	8005b58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b34:	4b1d      	ldr	r3, [pc, #116]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6892      	ldr	r2, [r2, #8]
 8005b44:	0211      	lsls	r1, r2, #8
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6952      	ldr	r2, [r2, #20]
 8005b4a:	0852      	lsrs	r2, r2, #1
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	0652      	lsls	r2, r2, #25
 8005b50:	430a      	orrs	r2, r1
 8005b52:	4916      	ldr	r1, [pc, #88]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b58:	4b14      	ldr	r3, [pc, #80]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fc fbd8 	bl	8002318 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b6a:	e009      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6c:	f7fc fbd4 	bl	8002318 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d902      	bls.n	8005b80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b7e:	e005      	b.n	8005b8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b80:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ef      	beq.n	8005b6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b92:	4b06      	ldr	r3, [pc, #24]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	4904      	ldr	r1, [pc, #16]	@ (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000

08005bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bca:	4b67      	ldr	r3, [pc, #412]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0203 	and.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10d      	bne.n	8005bf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005be2:	4b61      	ldr	r3, [pc, #388]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d047      	beq.n	8005c86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e044      	b.n	8005c86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d018      	beq.n	8005c36 <RCCEx_PLLSAI2_Config+0x86>
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d825      	bhi.n	8005c54 <RCCEx_PLLSAI2_Config+0xa4>
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d002      	beq.n	8005c12 <RCCEx_PLLSAI2_Config+0x62>
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d009      	beq.n	8005c24 <RCCEx_PLLSAI2_Config+0x74>
 8005c10:	e020      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c12:	4b55      	ldr	r3, [pc, #340]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11d      	bne.n	8005c5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c22:	e01a      	b.n	8005c5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c24:	4b50      	ldr	r3, [pc, #320]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d116      	bne.n	8005c5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c34:	e013      	b.n	8005c5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c36:	4b4c      	ldr	r3, [pc, #304]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c42:	4b49      	ldr	r3, [pc, #292]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c52:	e006      	b.n	8005c62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e004      	b.n	8005c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	4939      	ldr	r1, [pc, #228]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d167      	bne.n	8005d5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c8c:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a35      	ldr	r2, [pc, #212]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c98:	f7fc fb3e 	bl	8002318 <HAL_GetTick>
 8005c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c9e:	e009      	b.n	8005cb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ca0:	f7fc fb3a 	bl	8002318 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d902      	bls.n	8005cb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005cb2:	e005      	b.n	8005cc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ef      	bne.n	8005ca0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d14a      	bne.n	8005d5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d111      	bne.n	8005cf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ccc:	4b26      	ldr	r3, [pc, #152]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6892      	ldr	r2, [r2, #8]
 8005cdc:	0211      	lsls	r1, r2, #8
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	0912      	lsrs	r2, r2, #4
 8005ce4:	0452      	lsls	r2, r2, #17
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	491f      	ldr	r1, [pc, #124]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	614b      	str	r3, [r1, #20]
 8005cee:	e011      	b.n	8005d14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005cf8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6892      	ldr	r2, [r2, #8]
 8005d00:	0211      	lsls	r1, r2, #8
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6912      	ldr	r2, [r2, #16]
 8005d06:	0852      	lsrs	r2, r2, #1
 8005d08:	3a01      	subs	r2, #1
 8005d0a:	0652      	lsls	r2, r2, #25
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	4916      	ldr	r1, [pc, #88]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d14:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a13      	ldr	r2, [pc, #76]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fc fafa 	bl	8002318 <HAL_GetTick>
 8005d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d26:	e009      	b.n	8005d3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d28:	f7fc faf6 	bl	8002318 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d902      	bls.n	8005d3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	73fb      	strb	r3, [r7, #15]
          break;
 8005d3a:	e005      	b.n	8005d48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ef      	beq.n	8005d28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000

08005d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e049      	b.n	8005e12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc f880 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 f9e0 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d001      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04f      	b.n	8005ed4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a23      	ldr	r2, [pc, #140]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5e:	d018      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <HAL_TIM_Base_Start_IT+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x76>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d115      	bne.n	8005ebe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	4b17      	ldr	r3, [pc, #92]	@ (8005ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	d015      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0xb4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eaa:	d011      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebc:	e008      	b.n	8005ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e000      	b.n	8005ed2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	00010007 	.word	0x00010007

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8f3 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8e5 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8f6 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8cd 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8bf 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8d0 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8a7 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f899 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8aa 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0210 	mvn.w	r2, #16
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f881 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f873 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f884 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0201 	mvn.w	r2, #1
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f851 	bl	800610a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f91d 	bl	80062d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f915 	bl	80062e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f83e 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0220 	mvn.w	r2, #32
 80060fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8dd 	bl	80062bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a46      	ldr	r2, [pc, #280]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a43      	ldr	r2, [pc, #268]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a42      	ldr	r2, [pc, #264]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a41      	ldr	r2, [pc, #260]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a40      	ldr	r2, [pc, #256]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a35      	ldr	r2, [pc, #212]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a32      	ldr	r2, [pc, #200]	@ (80062a0 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a31      	ldr	r2, [pc, #196]	@ (80062a4 <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a30      	ldr	r2, [pc, #192]	@ (80062a8 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2f      	ldr	r2, [pc, #188]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2e      	ldr	r2, [pc, #184]	@ (80062b0 <TIM_Base_SetConfig+0x140>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2d      	ldr	r2, [pc, #180]	@ (80062b4 <TIM_Base_SetConfig+0x144>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x9a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	@ (80062b8 <TIM_Base_SetConfig+0x148>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <TIM_Base_SetConfig+0x12c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <TIM_Base_SetConfig+0x13c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <TIM_Base_SetConfig+0x140>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a16      	ldr	r2, [pc, #88]	@ (80062b4 <TIM_Base_SetConfig+0x144>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <TIM_Base_SetConfig+0x148>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]
  }
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e040      	b.n	800638c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fb fde2 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	@ 0x24
 8006324:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fedc 	bl	80070fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fc21 	bl	8006b8c <UART_SetConfig>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e01b      	b.n	800638c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 ff5b 	bl	8007240 <UART_CheckIdleState>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d177      	bne.n	800649c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_UART_Transmit+0x24>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e070      	b.n	800649e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2221      	movs	r2, #33	@ 0x21
 80063c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ca:	f7fb ffa5 	bl	8002318 <HAL_GetTick>
 80063ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e8:	d108      	bne.n	80063fc <HAL_UART_Transmit+0x68>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e003      	b.n	8006404 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006404:	e02f      	b.n	8006466 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2200      	movs	r2, #0
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 ffbd 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e03b      	b.n	800649e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	881a      	ldrh	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006438:	b292      	uxth	r2, r2
 800643a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	3302      	adds	r3, #2
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	e007      	b.n	8006454 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1c9      	bne.n	8006406 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2140      	movs	r1, #64	@ 0x40
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 ff87 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e005      	b.n	800649e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d137      	bne.n	8006530 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Receive_IT+0x24>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e030      	b.n	8006532 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <HAL_UART_Receive_IT+0x94>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01f      	beq.n	8006520 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	61bb      	str	r3, [r7, #24]
   return(result);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e6      	bne.n	80064ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 ffa0 	bl	800746c <UART_Start_Receive_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	@ 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40008000 	.word	0x40008000

08006540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b0ba      	sub	sp, #232	@ 0xe8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800656a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800656e:	4013      	ands	r3, r2
 8006570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d115      	bne.n	80065a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00f      	beq.n	80065a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 82ca 	beq.w	8006b32 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      }
      return;
 80065a6:	e2c4      	b.n	8006b32 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8117 	beq.w	80067e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065c2:	4b85      	ldr	r3, [pc, #532]	@ (80067d8 <HAL_UART_IRQHandler+0x298>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 810a 	beq.w	80067e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <HAL_UART_IRQHandler+0xbc>
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2201      	movs	r2, #1
 80065ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d011      	beq.n	800662c <HAL_UART_IRQHandler+0xec>
 8006608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2202      	movs	r2, #2
 800661a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d011      	beq.n	800665c <HAL_UART_IRQHandler+0x11c>
 8006638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2204      	movs	r2, #4
 800664a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006652:	f043 0202 	orr.w	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d017      	beq.n	8006698 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006678:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2208      	movs	r2, #8
 8006686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800668e:	f043 0208 	orr.w	r2, r3, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d012      	beq.n	80066ca <HAL_UART_IRQHandler+0x18a>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00c      	beq.n	80066ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8230 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00d      	beq.n	80066fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006704:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671e:	2b00      	cmp	r3, #0
 8006720:	d04f      	beq.n	80067c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 ff68 	bl	80075f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006732:	2b40      	cmp	r3, #64	@ 0x40
 8006734:	d141      	bne.n	80067ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800674c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006762:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800676e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800677a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1d9      	bne.n	8006736 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006786:	2b00      	cmp	r3, #0
 8006788:	d013      	beq.n	80067b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678e:	4a13      	ldr	r2, [pc, #76]	@ (80067dc <HAL_UART_IRQHandler+0x29c>)
 8006790:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd f95f 	bl	8003a5a <HAL_DMA_Abort_IT>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	e00f      	b.n	80067d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f9d4 	bl	8006b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	e00b      	b.n	80067d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9d0 	bl	8006b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	e007      	b.n	80067d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9cc 	bl	8006b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80067d0:	e1b1      	b.n	8006b36 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	bf00      	nop
    return;
 80067d4:	e1af      	b.n	8006b36 <HAL_UART_IRQHandler+0x5f6>
 80067d6:	bf00      	nop
 80067d8:	04000120 	.word	0x04000120
 80067dc:	080076c1 	.word	0x080076c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f040 816a 	bne.w	8006abe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8163 	beq.w	8006abe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 815c 	beq.w	8006abe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2210      	movs	r2, #16
 800680c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b40      	cmp	r3, #64	@ 0x40
 800681a:	f040 80d4 	bne.w	80069c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800682a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80ad 	beq.w	800698e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800683a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800683e:	429a      	cmp	r2, r3
 8006840:	f080 80a5 	bcs.w	800698e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800684a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 8086 	bne.w	800696c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006874:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800688a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800688e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006896:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1da      	bne.n	8006860 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e1      	bne.n	80068aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800690a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800690c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006910:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e3      	bne.n	80068e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800693a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800693c:	f023 0310 	bic.w	r3, r3, #16
 8006940:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800694e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006950:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800695c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e4      	bne.n	800692c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd f839 	bl	80039de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800697e:	b29b      	uxth	r3, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	b29b      	uxth	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8f4 	bl	8006b74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800698c:	e0d5      	b.n	8006b3a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006998:	429a      	cmp	r2, r3
 800699a:	f040 80ce 	bne.w	8006b3a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	f040 80c5 	bne.w	8006b3a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8d8 	bl	8006b74 <HAL_UARTEx_RxEventCallback>
      return;
 80069c4:	e0b9      	b.n	8006b3a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80ab 	beq.w	8006b3e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80069e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80a6 	beq.w	8006b3e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e4      	bne.n	80069f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	623b      	str	r3, [r7, #32]
   return(result);
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e3      	bne.n	8006a28 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 0310 	bic.w	r3, r3, #16
 8006a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	69b9      	ldr	r1, [r7, #24]
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e4      	bne.n	8006a74 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f85c 	bl	8006b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006abc:	e03f      	b.n	8006b3e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x5a8>
 8006aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 ffe9 	bl	8007ab8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ae6:	e02d      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00e      	beq.n	8006b12 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01c      	beq.n	8006b42 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
    }
    return;
 8006b10:	e017      	b.n	8006b42 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <HAL_UART_IRQHandler+0x604>
 8006b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fdde 	bl	80076ec <UART_EndTransmit_IT>
    return;
 8006b30:	e008      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
      return;
 8006b32:	bf00      	nop
 8006b34:	e006      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
    return;
 8006b36:	bf00      	nop
 8006b38:	e004      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
      return;
 8006b3a:	bf00      	nop
 8006b3c:	e002      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
      return;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <HAL_UART_IRQHandler+0x604>
    return;
 8006b42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b44:	37e8      	adds	r7, #232	@ 0xe8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop

08006b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b90:	b08a      	sub	sp, #40	@ 0x28
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4ba4      	ldr	r3, [pc, #656]	@ (8006e4c <UART_SetConfig+0x2c0>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a99      	ldr	r2, [pc, #612]	@ (8006e50 <UART_SetConfig+0x2c4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a90      	ldr	r2, [pc, #576]	@ (8006e54 <UART_SetConfig+0x2c8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d126      	bne.n	8006c64 <UART_SetConfig+0xd8>
 8006c16:	4b90      	ldr	r3, [pc, #576]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d81b      	bhi.n	8006c5c <UART_SetConfig+0xd0>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <UART_SetConfig+0xa0>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c55 	.word	0x08006c55
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c42:	e116      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006c44:	2302      	movs	r3, #2
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4a:	e112      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c52:	e10e      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5a:	e10a      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c62:	e106      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7c      	ldr	r2, [pc, #496]	@ (8006e5c <UART_SetConfig+0x2d0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d138      	bne.n	8006ce0 <UART_SetConfig+0x154>
 8006c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c74:	f003 030c 	and.w	r3, r3, #12
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d82d      	bhi.n	8006cd8 <UART_SetConfig+0x14c>
 8006c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <UART_SetConfig+0xf8>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cd9 	.word	0x08006cd9
 8006c8c:	08006cd9 	.word	0x08006cd9
 8006c90:	08006cd9 	.word	0x08006cd9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cd9 	.word	0x08006cd9
 8006c9c:	08006cd9 	.word	0x08006cd9
 8006ca0:	08006cd9 	.word	0x08006cd9
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	08006cd9 	.word	0x08006cd9
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbe:	e0d8      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc6:	e0d4      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cce:	e0d0      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd6:	e0cc      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cde:	e0c8      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e60 <UART_SetConfig+0x2d4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d125      	bne.n	8006d36 <UART_SetConfig+0x1aa>
 8006cea:	4b5b      	ldr	r3, [pc, #364]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cf4:	2b30      	cmp	r3, #48	@ 0x30
 8006cf6:	d016      	beq.n	8006d26 <UART_SetConfig+0x19a>
 8006cf8:	2b30      	cmp	r3, #48	@ 0x30
 8006cfa:	d818      	bhi.n	8006d2e <UART_SetConfig+0x1a2>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d00a      	beq.n	8006d16 <UART_SetConfig+0x18a>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d814      	bhi.n	8006d2e <UART_SetConfig+0x1a2>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <UART_SetConfig+0x182>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d008      	beq.n	8006d1e <UART_SetConfig+0x192>
 8006d0c:	e00f      	b.n	8006d2e <UART_SetConfig+0x1a2>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d14:	e0ad      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d16:	2302      	movs	r3, #2
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1c:	e0a9      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d1e:	2304      	movs	r3, #4
 8006d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d24:	e0a5      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d26:	2308      	movs	r3, #8
 8006d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2c:	e0a1      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d2e:	2310      	movs	r3, #16
 8006d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d34:	e09d      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006e64 <UART_SetConfig+0x2d8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d125      	bne.n	8006d8c <UART_SetConfig+0x200>
 8006d40:	4b45      	ldr	r3, [pc, #276]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d4c:	d016      	beq.n	8006d7c <UART_SetConfig+0x1f0>
 8006d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d50:	d818      	bhi.n	8006d84 <UART_SetConfig+0x1f8>
 8006d52:	2b80      	cmp	r3, #128	@ 0x80
 8006d54:	d00a      	beq.n	8006d6c <UART_SetConfig+0x1e0>
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	d814      	bhi.n	8006d84 <UART_SetConfig+0x1f8>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <UART_SetConfig+0x1d8>
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	d008      	beq.n	8006d74 <UART_SetConfig+0x1e8>
 8006d62:	e00f      	b.n	8006d84 <UART_SetConfig+0x1f8>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e082      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e07e      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d74:	2304      	movs	r3, #4
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7a:	e07a      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d82:	e076      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d84:	2310      	movs	r3, #16
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d8a:	e072      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a35      	ldr	r2, [pc, #212]	@ (8006e68 <UART_SetConfig+0x2dc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d12a      	bne.n	8006dec <UART_SetConfig+0x260>
 8006d96:	4b30      	ldr	r3, [pc, #192]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006da4:	d01a      	beq.n	8006ddc <UART_SetConfig+0x250>
 8006da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006daa:	d81b      	bhi.n	8006de4 <UART_SetConfig+0x258>
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db0:	d00c      	beq.n	8006dcc <UART_SetConfig+0x240>
 8006db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db6:	d815      	bhi.n	8006de4 <UART_SetConfig+0x258>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <UART_SetConfig+0x238>
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc0:	d008      	beq.n	8006dd4 <UART_SetConfig+0x248>
 8006dc2:	e00f      	b.n	8006de4 <UART_SetConfig+0x258>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e052      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e04e      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dda:	e04a      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de2:	e046      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dea:	e042      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <UART_SetConfig+0x2c4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d13a      	bne.n	8006e6c <UART_SetConfig+0x2e0>
 8006df6:	4b18      	ldr	r3, [pc, #96]	@ (8006e58 <UART_SetConfig+0x2cc>)
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e04:	d01a      	beq.n	8006e3c <UART_SetConfig+0x2b0>
 8006e06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e0a:	d81b      	bhi.n	8006e44 <UART_SetConfig+0x2b8>
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e10:	d00c      	beq.n	8006e2c <UART_SetConfig+0x2a0>
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e16:	d815      	bhi.n	8006e44 <UART_SetConfig+0x2b8>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <UART_SetConfig+0x298>
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e20:	d008      	beq.n	8006e34 <UART_SetConfig+0x2a8>
 8006e22:	e00f      	b.n	8006e44 <UART_SetConfig+0x2b8>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2a:	e022      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e32:	e01e      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3a:	e01a      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e42:	e016      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	e012      	b.n	8006e72 <UART_SetConfig+0x2e6>
 8006e4c:	efff69f3 	.word	0xefff69f3
 8006e50:	40008000 	.word	0x40008000
 8006e54:	40013800 	.word	0x40013800
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a9f      	ldr	r2, [pc, #636]	@ (80070f4 <UART_SetConfig+0x568>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d17a      	bne.n	8006f72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d824      	bhi.n	8006ece <UART_SetConfig+0x342>
 8006e84:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <UART_SetConfig+0x300>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006ecf 	.word	0x08006ecf
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ecf 	.word	0x08006ecf
 8006e9c:	08006ebf 	.word	0x08006ebf
 8006ea0:	08006ecf 	.word	0x08006ecf
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006ecf 	.word	0x08006ecf
 8006eac:	08006ec7 	.word	0x08006ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb0:	f7fe fa14 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006eb4:	61f8      	str	r0, [r7, #28]
        break;
 8006eb6:	e010      	b.n	8006eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80070f8 <UART_SetConfig+0x56c>)
 8006eba:	61fb      	str	r3, [r7, #28]
        break;
 8006ebc:	e00d      	b.n	8006eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fe f975 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8006ec2:	61f8      	str	r0, [r7, #28]
        break;
 8006ec4:	e009      	b.n	8006eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e005      	b.n	8006eda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 80fb 	beq.w	80070d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	4413      	add	r3, r2
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d305      	bcc.n	8006efe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f04:	e0e8      	b.n	80070d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	461c      	mov	r4, r3
 8006f0c:	4615      	mov	r5, r2
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	022b      	lsls	r3, r5, #8
 8006f18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f1c:	0222      	lsls	r2, r4, #8
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	6849      	ldr	r1, [r1, #4]
 8006f22:	0849      	lsrs	r1, r1, #1
 8006f24:	2000      	movs	r0, #0
 8006f26:	4688      	mov	r8, r1
 8006f28:	4681      	mov	r9, r0
 8006f2a:	eb12 0a08 	adds.w	sl, r2, r8
 8006f2e:	eb43 0b09 	adc.w	fp, r3, r9
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f40:	4650      	mov	r0, sl
 8006f42:	4659      	mov	r1, fp
 8006f44:	f7f9 feb0 	bl	8000ca8 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f56:	d308      	bcc.n	8006f6a <UART_SetConfig+0x3de>
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5e:	d204      	bcs.n	8006f6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	60da      	str	r2, [r3, #12]
 8006f68:	e0b6      	b.n	80070d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f70:	e0b2      	b.n	80070d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f7a:	d15e      	bne.n	800703a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d828      	bhi.n	8006fd6 <UART_SetConfig+0x44a>
 8006f84:	a201      	add	r2, pc, #4	@ (adr r2, 8006f8c <UART_SetConfig+0x400>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	08006fd7 	.word	0x08006fd7
 8006f9c:	08006fc7 	.word	0x08006fc7
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	08006fd7 	.word	0x08006fd7
 8006fa8:	08006fd7 	.word	0x08006fd7
 8006fac:	08006fcf 	.word	0x08006fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f7fe f994 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006fb4:	61f8      	str	r0, [r7, #28]
        break;
 8006fb6:	e014      	b.n	8006fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb8:	f7fe f9a6 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8006fbc:	61f8      	str	r0, [r7, #28]
        break;
 8006fbe:	e010      	b.n	8006fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80070f8 <UART_SetConfig+0x56c>)
 8006fc2:	61fb      	str	r3, [r7, #28]
        break;
 8006fc4:	e00d      	b.n	8006fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fe f8f1 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8006fca:	61f8      	str	r0, [r7, #28]
        break;
 8006fcc:	e009      	b.n	8006fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fd2:	61fb      	str	r3, [r7, #28]
        break;
 8006fd4:	e005      	b.n	8006fe2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d077      	beq.n	80070d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	005a      	lsls	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d916      	bls.n	8007032 <UART_SetConfig+0x4a6>
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800700a:	d212      	bcs.n	8007032 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f023 030f 	bic.w	r3, r3, #15
 8007014:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	b29a      	uxth	r2, r3
 8007022:	8afb      	ldrh	r3, [r7, #22]
 8007024:	4313      	orrs	r3, r2
 8007026:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	8afa      	ldrh	r2, [r7, #22]
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	e052      	b.n	80070d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007038:	e04e      	b.n	80070d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800703e:	2b08      	cmp	r3, #8
 8007040:	d827      	bhi.n	8007092 <UART_SetConfig+0x506>
 8007042:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <UART_SetConfig+0x4bc>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007075 	.word	0x08007075
 8007050:	0800707d 	.word	0x0800707d
 8007054:	08007093 	.word	0x08007093
 8007058:	08007083 	.word	0x08007083
 800705c:	08007093 	.word	0x08007093
 8007060:	08007093 	.word	0x08007093
 8007064:	08007093 	.word	0x08007093
 8007068:	0800708b 	.word	0x0800708b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800706c:	f7fe f936 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8007070:	61f8      	str	r0, [r7, #28]
        break;
 8007072:	e014      	b.n	800709e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007074:	f7fe f948 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8007078:	61f8      	str	r0, [r7, #28]
        break;
 800707a:	e010      	b.n	800709e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800707c:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <UART_SetConfig+0x56c>)
 800707e:	61fb      	str	r3, [r7, #28]
        break;
 8007080:	e00d      	b.n	800709e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007082:	f7fe f893 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8007086:	61f8      	str	r0, [r7, #28]
        break;
 8007088:	e009      	b.n	800709e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708e:	61fb      	str	r3, [r7, #28]
        break;
 8007090:	e005      	b.n	800709e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800709c:	bf00      	nop
    }

    if (pclk != 0U)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d019      	beq.n	80070d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	085a      	lsrs	r2, r3, #1
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b0f      	cmp	r3, #15
 80070bc:	d909      	bls.n	80070d2 <UART_SetConfig+0x546>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c4:	d205      	bcs.n	80070d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60da      	str	r2, [r3, #12]
 80070d0:	e002      	b.n	80070d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	@ 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f2:	bf00      	nop
 80070f4:	40008000 	.word	0x40008000
 80070f8:	00f42400 	.word	0x00f42400

080070fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01a      	beq.n	8007212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fa:	d10a      	bne.n	8007212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
  }
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b098      	sub	sp, #96	@ 0x60
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007250:	f7fb f862 	bl	8002318 <HAL_GetTick>
 8007254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b08      	cmp	r3, #8
 8007262:	d12e      	bne.n	80072c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726c:	2200      	movs	r2, #0
 800726e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f88c 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d021      	beq.n	80072c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007292:	653b      	str	r3, [r7, #80]	@ 0x50
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729c:	647b      	str	r3, [r7, #68]	@ 0x44
 800729e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e062      	b.n	8007388 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d149      	bne.n	8007364 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d8:	2200      	movs	r2, #0
 80072da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f856 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03c      	beq.n	8007364 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	623b      	str	r3, [r7, #32]
   return(result);
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007308:	633b      	str	r3, [r7, #48]	@ 0x30
 800730a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800730e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	60fb      	str	r3, [r7, #12]
   return(result);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800733c:	61fa      	str	r2, [r7, #28]
 800733e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	69b9      	ldr	r1, [r7, #24]
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	617b      	str	r3, [r7, #20]
   return(result);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e011      	b.n	8007388 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3758      	adds	r7, #88	@ 0x58
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e04f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d04b      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fa ffb5 	bl	8002318 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e04e      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d037      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b80      	cmp	r3, #128	@ 0x80
 80073d6:	d034      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d031      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d110      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2208      	movs	r2, #8
 80073f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f8ff 	bl	80075f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2208      	movs	r2, #8
 80073fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e029      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741c:	d111      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f8e5 	bl	80075f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00f      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	429a      	cmp	r2, r3
 800745e:	d0a0      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746c:	b480      	push	{r7}
 800746e:	b097      	sub	sp, #92	@ 0x5c
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	d10e      	bne.n	80074be <UART_Start_Receive_IT+0x52>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <UART_Start_Receive_IT+0x48>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b2:	e02d      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	22ff      	movs	r2, #255	@ 0xff
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074bc:	e028      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <UART_Start_Receive_IT+0x76>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <UART_Start_Receive_IT+0x6c>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	22ff      	movs	r2, #255	@ 0xff
 80074d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074d6:	e01b      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	227f      	movs	r2, #127	@ 0x7f
 80074dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074e0:	e016      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ea:	d10d      	bne.n	8007508 <UART_Start_Receive_IT+0x9c>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <UART_Start_Receive_IT+0x92>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	227f      	movs	r2, #127	@ 0x7f
 80074f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074fc:	e008      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	223f      	movs	r2, #63	@ 0x3f
 8007502:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007506:	e003      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2222      	movs	r2, #34	@ 0x22
 800751c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	657b      	str	r3, [r7, #84]	@ 0x54
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007540:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007542:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800754e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e5      	bne.n	8007520 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800755c:	d107      	bne.n	800756e <UART_Start_Receive_IT+0x102>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a21      	ldr	r2, [pc, #132]	@ (80075f0 <UART_Start_Receive_IT+0x184>)
 800756a:	669a      	str	r2, [r3, #104]	@ 0x68
 800756c:	e002      	b.n	8007574 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a20      	ldr	r2, [pc, #128]	@ (80075f4 <UART_Start_Receive_IT+0x188>)
 8007572:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d019      	beq.n	80075b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800759a:	637b      	str	r3, [r7, #52]	@ 0x34
 800759c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e6      	bne.n	800757c <UART_Start_Receive_IT+0x110>
 80075ae:	e018      	b.n	80075e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	613b      	str	r3, [r7, #16]
   return(result);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ce:	623b      	str	r3, [r7, #32]
 80075d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	69f9      	ldr	r1, [r7, #28]
 80075d4:	6a3a      	ldr	r2, [r7, #32]
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	61bb      	str	r3, [r7, #24]
   return(result);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e6      	bne.n	80075b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	375c      	adds	r7, #92	@ 0x5c
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	080078fd 	.word	0x080078fd
 80075f4:	08007741 	.word	0x08007741

080075f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b095      	sub	sp, #84	@ 0x54
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800761e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e6      	bne.n	8007600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	61fb      	str	r3, [r7, #28]
   return(result);
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800766a:	2b01      	cmp	r3, #1
 800766c:	d118      	bne.n	80076a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	60bb      	str	r3, [r7, #8]
   return(result);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0310 	bic.w	r3, r3, #16
 8007682:	647b      	str	r3, [r7, #68]	@ 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	613b      	str	r3, [r7, #16]
   return(result);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076b4:	bf00      	nop
 80076b6:	3754      	adds	r7, #84	@ 0x54
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fa3e 	bl	8006b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	60bb      	str	r3, [r7, #8]
   return(result);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6979      	ldr	r1, [r7, #20]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	613b      	str	r3, [r7, #16]
   return(result);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fa0a 	bl	8006b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007738:	bf00      	nop
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b09c      	sub	sp, #112	@ 0x70
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800774e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007758:	2b22      	cmp	r3, #34	@ 0x22
 800775a:	f040 80be 	bne.w	80078da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007764:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007768:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800776c:	b2d9      	uxtb	r1, r3
 800776e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007772:	b2da      	uxtb	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007778:	400a      	ands	r2, r1
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f040 80a3 	bne.w	80078ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80077fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e5      	bne.n	80077da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a34      	ldr	r2, [pc, #208]	@ (80078f8 <UART_RxISR_8BIT+0x1b8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d01f      	beq.n	800786c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d018      	beq.n	800786c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	623b      	str	r3, [r7, #32]
   return(result);
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800784e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007858:	633b      	str	r3, [r7, #48]	@ 0x30
 800785a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800785e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007870:	2b01      	cmp	r3, #1
 8007872:	d12e      	bne.n	80078d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	60fb      	str	r3, [r7, #12]
   return(result);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0310 	bic.w	r3, r3, #16
 800788e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	617b      	str	r3, [r7, #20]
   return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e6      	bne.n	800787a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d103      	bne.n	80078c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2210      	movs	r2, #16
 80078c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f952 	bl	8006b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078d0:	e00d      	b.n	80078ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fa f8fa 	bl	8001acc <HAL_UART_RxCpltCallback>
}
 80078d8:	e009      	b.n	80078ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	8b1b      	ldrh	r3, [r3, #24]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0208 	orr.w	r2, r2, #8
 80078ea:	b292      	uxth	r2, r2
 80078ec:	831a      	strh	r2, [r3, #24]
}
 80078ee:	bf00      	nop
 80078f0:	3770      	adds	r7, #112	@ 0x70
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40008000 	.word	0x40008000

080078fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b09c      	sub	sp, #112	@ 0x70
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800790a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007914:	2b22      	cmp	r3, #34	@ 0x22
 8007916:	f040 80be 	bne.w	8007a96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007920:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007928:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800792a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800792e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007932:	4013      	ands	r3, r2
 8007934:	b29a      	uxth	r2, r3
 8007936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007938:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 80a3 	bne.w	8007aaa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007978:	667b      	str	r3, [r7, #100]	@ 0x64
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007982:	657b      	str	r3, [r7, #84]	@ 0x54
 8007984:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007988:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a34      	ldr	r2, [pc, #208]	@ (8007ab4 <UART_RxISR_16BIT+0x1b8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d01f      	beq.n	8007a28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d018      	beq.n	8007a28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d12e      	bne.n	8007a8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f023 0310 	bic.w	r3, r3, #16
 8007a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6979      	ldr	r1, [r7, #20]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	613b      	str	r3, [r7, #16]
   return(result);
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e6      	bne.n	8007a36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d103      	bne.n	8007a7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2210      	movs	r2, #16
 8007a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff f874 	bl	8006b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a8c:	e00d      	b.n	8007aaa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fa f81c 	bl	8001acc <HAL_UART_RxCpltCallback>
}
 8007a94:	e009      	b.n	8007aaa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	8b1b      	ldrh	r3, [r3, #24]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0208 	orr.w	r2, r2, #8
 8007aa6:	b292      	uxth	r2, r2
 8007aa8:	831a      	strh	r2, [r3, #24]
}
 8007aaa:	bf00      	nop
 8007aac:	3770      	adds	r7, #112	@ 0x70
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40008000 	.word	0x40008000

08007ab8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <__cvt>:
 8007acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	ec57 6b10 	vmov	r6, r7, d0
 8007ad4:	2f00      	cmp	r7, #0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	463b      	mov	r3, r7
 8007adc:	bfbb      	ittet	lt
 8007ade:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ae2:	461f      	movlt	r7, r3
 8007ae4:	2300      	movge	r3, #0
 8007ae6:	232d      	movlt	r3, #45	@ 0x2d
 8007ae8:	700b      	strb	r3, [r1, #0]
 8007aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007aec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007af0:	4691      	mov	r9, r2
 8007af2:	f023 0820 	bic.w	r8, r3, #32
 8007af6:	bfbc      	itt	lt
 8007af8:	4632      	movlt	r2, r6
 8007afa:	4616      	movlt	r6, r2
 8007afc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b00:	d005      	beq.n	8007b0e <__cvt+0x42>
 8007b02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b06:	d100      	bne.n	8007b0a <__cvt+0x3e>
 8007b08:	3401      	adds	r4, #1
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	e000      	b.n	8007b10 <__cvt+0x44>
 8007b0e:	2103      	movs	r1, #3
 8007b10:	ab03      	add	r3, sp, #12
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	ab02      	add	r3, sp, #8
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	ec47 6b10 	vmov	d0, r6, r7
 8007b1c:	4653      	mov	r3, sl
 8007b1e:	4622      	mov	r2, r4
 8007b20:	f001 f886 	bl	8008c30 <_dtoa_r>
 8007b24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b28:	4605      	mov	r5, r0
 8007b2a:	d119      	bne.n	8007b60 <__cvt+0x94>
 8007b2c:	f019 0f01 	tst.w	r9, #1
 8007b30:	d00e      	beq.n	8007b50 <__cvt+0x84>
 8007b32:	eb00 0904 	add.w	r9, r0, r4
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 ffd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b42:	b108      	cbz	r0, 8007b48 <__cvt+0x7c>
 8007b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b48:	2230      	movs	r2, #48	@ 0x30
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	454b      	cmp	r3, r9
 8007b4e:	d31e      	bcc.n	8007b8e <__cvt+0xc2>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b54:	1b5b      	subs	r3, r3, r5
 8007b56:	4628      	mov	r0, r5
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	b004      	add	sp, #16
 8007b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b64:	eb00 0904 	add.w	r9, r0, r4
 8007b68:	d1e5      	bne.n	8007b36 <__cvt+0x6a>
 8007b6a:	7803      	ldrb	r3, [r0, #0]
 8007b6c:	2b30      	cmp	r3, #48	@ 0x30
 8007b6e:	d10a      	bne.n	8007b86 <__cvt+0xba>
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 ffb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b7c:	b918      	cbnz	r0, 8007b86 <__cvt+0xba>
 8007b7e:	f1c4 0401 	rsb	r4, r4, #1
 8007b82:	f8ca 4000 	str.w	r4, [sl]
 8007b86:	f8da 3000 	ldr.w	r3, [sl]
 8007b8a:	4499      	add	r9, r3
 8007b8c:	e7d3      	b.n	8007b36 <__cvt+0x6a>
 8007b8e:	1c59      	adds	r1, r3, #1
 8007b90:	9103      	str	r1, [sp, #12]
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e7d9      	b.n	8007b4a <__cvt+0x7e>

08007b96 <__exponent>:
 8007b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	bfba      	itte	lt
 8007b9c:	4249      	neglt	r1, r1
 8007b9e:	232d      	movlt	r3, #45	@ 0x2d
 8007ba0:	232b      	movge	r3, #43	@ 0x2b
 8007ba2:	2909      	cmp	r1, #9
 8007ba4:	7002      	strb	r2, [r0, #0]
 8007ba6:	7043      	strb	r3, [r0, #1]
 8007ba8:	dd29      	ble.n	8007bfe <__exponent+0x68>
 8007baa:	f10d 0307 	add.w	r3, sp, #7
 8007bae:	461d      	mov	r5, r3
 8007bb0:	270a      	movs	r7, #10
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007bb8:	fb07 1416 	mls	r4, r7, r6, r1
 8007bbc:	3430      	adds	r4, #48	@ 0x30
 8007bbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2c63      	cmp	r4, #99	@ 0x63
 8007bc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bca:	4631      	mov	r1, r6
 8007bcc:	dcf1      	bgt.n	8007bb2 <__exponent+0x1c>
 8007bce:	3130      	adds	r1, #48	@ 0x30
 8007bd0:	1e94      	subs	r4, r2, #2
 8007bd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007bd6:	1c41      	adds	r1, r0, #1
 8007bd8:	4623      	mov	r3, r4
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	d30a      	bcc.n	8007bf4 <__exponent+0x5e>
 8007bde:	f10d 0309 	add.w	r3, sp, #9
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	42ac      	cmp	r4, r5
 8007be6:	bf88      	it	hi
 8007be8:	2300      	movhi	r3, #0
 8007bea:	3302      	adds	r3, #2
 8007bec:	4403      	add	r3, r0
 8007bee:	1a18      	subs	r0, r3, r0
 8007bf0:	b003      	add	sp, #12
 8007bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007bf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007bfc:	e7ed      	b.n	8007bda <__exponent+0x44>
 8007bfe:	2330      	movs	r3, #48	@ 0x30
 8007c00:	3130      	adds	r1, #48	@ 0x30
 8007c02:	7083      	strb	r3, [r0, #2]
 8007c04:	70c1      	strb	r1, [r0, #3]
 8007c06:	1d03      	adds	r3, r0, #4
 8007c08:	e7f1      	b.n	8007bee <__exponent+0x58>
	...

08007c0c <_printf_float>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	b08d      	sub	sp, #52	@ 0x34
 8007c12:	460c      	mov	r4, r1
 8007c14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c18:	4616      	mov	r6, r2
 8007c1a:	461f      	mov	r7, r3
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	f000 ff01 	bl	8008a24 <_localeconv_r>
 8007c22:	6803      	ldr	r3, [r0, #0]
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f8 fb32 	bl	8000290 <strlen>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	f8d8 3000 	ldr.w	r3, [r8]
 8007c34:	9005      	str	r0, [sp, #20]
 8007c36:	3307      	adds	r3, #7
 8007c38:	f023 0307 	bic.w	r3, r3, #7
 8007c3c:	f103 0208 	add.w	r2, r3, #8
 8007c40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c44:	f8d4 b000 	ldr.w	fp, [r4]
 8007c48:	f8c8 2000 	str.w	r2, [r8]
 8007c4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c62:	4b9c      	ldr	r3, [pc, #624]	@ (8007ed4 <_printf_float+0x2c8>)
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	f7f8 ff70 	bl	8000b4c <__aeabi_dcmpun>
 8007c6c:	bb70      	cbnz	r0, 8007ccc <_printf_float+0xc0>
 8007c6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c72:	4b98      	ldr	r3, [pc, #608]	@ (8007ed4 <_printf_float+0x2c8>)
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	f7f8 ff4a 	bl	8000b10 <__aeabi_dcmple>
 8007c7c:	bb30      	cbnz	r0, 8007ccc <_printf_float+0xc0>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2300      	movs	r3, #0
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	f7f8 ff39 	bl	8000afc <__aeabi_dcmplt>
 8007c8a:	b110      	cbz	r0, 8007c92 <_printf_float+0x86>
 8007c8c:	232d      	movs	r3, #45	@ 0x2d
 8007c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c92:	4a91      	ldr	r2, [pc, #580]	@ (8007ed8 <_printf_float+0x2cc>)
 8007c94:	4b91      	ldr	r3, [pc, #580]	@ (8007edc <_printf_float+0x2d0>)
 8007c96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c9a:	bf94      	ite	ls
 8007c9c:	4690      	movls	r8, r2
 8007c9e:	4698      	movhi	r8, r3
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	6123      	str	r3, [r4, #16]
 8007ca4:	f02b 0304 	bic.w	r3, fp, #4
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	f04f 0900 	mov.w	r9, #0
 8007cae:	9700      	str	r7, [sp, #0]
 8007cb0:	4633      	mov	r3, r6
 8007cb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f9d2 	bl	8008060 <_printf_common>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f040 808d 	bne.w	8007ddc <_printf_float+0x1d0>
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	b00d      	add	sp, #52	@ 0x34
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	4642      	mov	r2, r8
 8007cce:	464b      	mov	r3, r9
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	f7f8 ff3a 	bl	8000b4c <__aeabi_dcmpun>
 8007cd8:	b140      	cbz	r0, 8007cec <_printf_float+0xe0>
 8007cda:	464b      	mov	r3, r9
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfbc      	itt	lt
 8007ce0:	232d      	movlt	r3, #45	@ 0x2d
 8007ce2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ee0 <_printf_float+0x2d4>)
 8007ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ee4 <_printf_float+0x2d8>)
 8007cea:	e7d4      	b.n	8007c96 <_printf_float+0x8a>
 8007cec:	6863      	ldr	r3, [r4, #4]
 8007cee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cf2:	9206      	str	r2, [sp, #24]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	d13b      	bne.n	8007d70 <_printf_float+0x164>
 8007cf8:	2306      	movs	r3, #6
 8007cfa:	6063      	str	r3, [r4, #4]
 8007cfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d00:	2300      	movs	r3, #0
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d0c:	ab09      	add	r3, sp, #36	@ 0x24
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	6861      	ldr	r1, [r4, #4]
 8007d12:	ec49 8b10 	vmov	d0, r8, r9
 8007d16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7ff fed6 	bl	8007acc <__cvt>
 8007d20:	9b06      	ldr	r3, [sp, #24]
 8007d22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d24:	2b47      	cmp	r3, #71	@ 0x47
 8007d26:	4680      	mov	r8, r0
 8007d28:	d129      	bne.n	8007d7e <_printf_float+0x172>
 8007d2a:	1cc8      	adds	r0, r1, #3
 8007d2c:	db02      	blt.n	8007d34 <_printf_float+0x128>
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	4299      	cmp	r1, r3
 8007d32:	dd41      	ble.n	8007db8 <_printf_float+0x1ac>
 8007d34:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d38:	fa5f fa8a 	uxtb.w	sl, sl
 8007d3c:	3901      	subs	r1, #1
 8007d3e:	4652      	mov	r2, sl
 8007d40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d44:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d46:	f7ff ff26 	bl	8007b96 <__exponent>
 8007d4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d4c:	1813      	adds	r3, r2, r0
 8007d4e:	2a01      	cmp	r2, #1
 8007d50:	4681      	mov	r9, r0
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	dc02      	bgt.n	8007d5c <_printf_float+0x150>
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	07d2      	lsls	r2, r2, #31
 8007d5a:	d501      	bpl.n	8007d60 <_printf_float+0x154>
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0a2      	beq.n	8007cae <_printf_float+0xa2>
 8007d68:	232d      	movs	r3, #45	@ 0x2d
 8007d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d6e:	e79e      	b.n	8007cae <_printf_float+0xa2>
 8007d70:	9a06      	ldr	r2, [sp, #24]
 8007d72:	2a47      	cmp	r2, #71	@ 0x47
 8007d74:	d1c2      	bne.n	8007cfc <_printf_float+0xf0>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1c0      	bne.n	8007cfc <_printf_float+0xf0>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7bd      	b.n	8007cfa <_printf_float+0xee>
 8007d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d82:	d9db      	bls.n	8007d3c <_printf_float+0x130>
 8007d84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d88:	d118      	bne.n	8007dbc <_printf_float+0x1b0>
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	6863      	ldr	r3, [r4, #4]
 8007d8e:	dd0b      	ble.n	8007da8 <_printf_float+0x19c>
 8007d90:	6121      	str	r1, [r4, #16]
 8007d92:	b913      	cbnz	r3, 8007d9a <_printf_float+0x18e>
 8007d94:	6822      	ldr	r2, [r4, #0]
 8007d96:	07d0      	lsls	r0, r2, #31
 8007d98:	d502      	bpl.n	8007da0 <_printf_float+0x194>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	440b      	add	r3, r1
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007da2:	f04f 0900 	mov.w	r9, #0
 8007da6:	e7db      	b.n	8007d60 <_printf_float+0x154>
 8007da8:	b913      	cbnz	r3, 8007db0 <_printf_float+0x1a4>
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	07d2      	lsls	r2, r2, #31
 8007dae:	d501      	bpl.n	8007db4 <_printf_float+0x1a8>
 8007db0:	3302      	adds	r3, #2
 8007db2:	e7f4      	b.n	8007d9e <_printf_float+0x192>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e7f2      	b.n	8007d9e <_printf_float+0x192>
 8007db8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	db05      	blt.n	8007dce <_printf_float+0x1c2>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	6121      	str	r1, [r4, #16]
 8007dc6:	07d8      	lsls	r0, r3, #31
 8007dc8:	d5ea      	bpl.n	8007da0 <_printf_float+0x194>
 8007dca:	1c4b      	adds	r3, r1, #1
 8007dcc:	e7e7      	b.n	8007d9e <_printf_float+0x192>
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	bfd4      	ite	le
 8007dd2:	f1c1 0202 	rsble	r2, r1, #2
 8007dd6:	2201      	movgt	r2, #1
 8007dd8:	4413      	add	r3, r2
 8007dda:	e7e0      	b.n	8007d9e <_printf_float+0x192>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	055a      	lsls	r2, r3, #21
 8007de0:	d407      	bmi.n	8007df2 <_printf_float+0x1e6>
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	4642      	mov	r2, r8
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	d12b      	bne.n	8007e48 <_printf_float+0x23c>
 8007df0:	e767      	b.n	8007cc2 <_printf_float+0xb6>
 8007df2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007df6:	f240 80dd 	bls.w	8007fb4 <_printf_float+0x3a8>
 8007dfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2300      	movs	r3, #0
 8007e02:	f7f8 fe71 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d033      	beq.n	8007e72 <_printf_float+0x266>
 8007e0a:	4a37      	ldr	r2, [pc, #220]	@ (8007ee8 <_printf_float+0x2dc>)
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b8      	blx	r7
 8007e14:	3001      	adds	r0, #1
 8007e16:	f43f af54 	beq.w	8007cc2 <_printf_float+0xb6>
 8007e1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e1e:	4543      	cmp	r3, r8
 8007e20:	db02      	blt.n	8007e28 <_printf_float+0x21c>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	07d8      	lsls	r0, r3, #31
 8007e26:	d50f      	bpl.n	8007e48 <_printf_float+0x23c>
 8007e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b8      	blx	r7
 8007e32:	3001      	adds	r0, #1
 8007e34:	f43f af45 	beq.w	8007cc2 <_printf_float+0xb6>
 8007e38:	f04f 0900 	mov.w	r9, #0
 8007e3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e40:	f104 0a1a 	add.w	sl, r4, #26
 8007e44:	45c8      	cmp	r8, r9
 8007e46:	dc09      	bgt.n	8007e5c <_printf_float+0x250>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	079b      	lsls	r3, r3, #30
 8007e4c:	f100 8103 	bmi.w	8008056 <_printf_float+0x44a>
 8007e50:	68e0      	ldr	r0, [r4, #12]
 8007e52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e54:	4298      	cmp	r0, r3
 8007e56:	bfb8      	it	lt
 8007e58:	4618      	movlt	r0, r3
 8007e5a:	e734      	b.n	8007cc6 <_printf_float+0xba>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4652      	mov	r2, sl
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	f43f af2b 	beq.w	8007cc2 <_printf_float+0xb6>
 8007e6c:	f109 0901 	add.w	r9, r9, #1
 8007e70:	e7e8      	b.n	8007e44 <_printf_float+0x238>
 8007e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dc39      	bgt.n	8007eec <_printf_float+0x2e0>
 8007e78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <_printf_float+0x2dc>)
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	f43f af1d 	beq.w	8007cc2 <_printf_float+0xb6>
 8007e88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e8c:	ea59 0303 	orrs.w	r3, r9, r3
 8007e90:	d102      	bne.n	8007e98 <_printf_float+0x28c>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	07d9      	lsls	r1, r3, #31
 8007e96:	d5d7      	bpl.n	8007e48 <_printf_float+0x23c>
 8007e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b8      	blx	r7
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f43f af0d 	beq.w	8007cc2 <_printf_float+0xb6>
 8007ea8:	f04f 0a00 	mov.w	sl, #0
 8007eac:	f104 0b1a 	add.w	fp, r4, #26
 8007eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb2:	425b      	negs	r3, r3
 8007eb4:	4553      	cmp	r3, sl
 8007eb6:	dc01      	bgt.n	8007ebc <_printf_float+0x2b0>
 8007eb8:	464b      	mov	r3, r9
 8007eba:	e793      	b.n	8007de4 <_printf_float+0x1d8>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	465a      	mov	r2, fp
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f aefb 	beq.w	8007cc2 <_printf_float+0xb6>
 8007ecc:	f10a 0a01 	add.w	sl, sl, #1
 8007ed0:	e7ee      	b.n	8007eb0 <_printf_float+0x2a4>
 8007ed2:	bf00      	nop
 8007ed4:	7fefffff 	.word	0x7fefffff
 8007ed8:	0800c340 	.word	0x0800c340
 8007edc:	0800c344 	.word	0x0800c344
 8007ee0:	0800c348 	.word	0x0800c348
 8007ee4:	0800c34c 	.word	0x0800c34c
 8007ee8:	0800c350 	.word	0x0800c350
 8007eec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ef2:	4553      	cmp	r3, sl
 8007ef4:	bfa8      	it	ge
 8007ef6:	4653      	movge	r3, sl
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	4699      	mov	r9, r3
 8007efc:	dc36      	bgt.n	8007f6c <_printf_float+0x360>
 8007efe:	f04f 0b00 	mov.w	fp, #0
 8007f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f06:	f104 021a 	add.w	r2, r4, #26
 8007f0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f0c:	9306      	str	r3, [sp, #24]
 8007f0e:	eba3 0309 	sub.w	r3, r3, r9
 8007f12:	455b      	cmp	r3, fp
 8007f14:	dc31      	bgt.n	8007f7a <_printf_float+0x36e>
 8007f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f18:	459a      	cmp	sl, r3
 8007f1a:	dc3a      	bgt.n	8007f92 <_printf_float+0x386>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	07da      	lsls	r2, r3, #31
 8007f20:	d437      	bmi.n	8007f92 <_printf_float+0x386>
 8007f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f24:	ebaa 0903 	sub.w	r9, sl, r3
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	ebaa 0303 	sub.w	r3, sl, r3
 8007f2e:	4599      	cmp	r9, r3
 8007f30:	bfa8      	it	ge
 8007f32:	4699      	movge	r9, r3
 8007f34:	f1b9 0f00 	cmp.w	r9, #0
 8007f38:	dc33      	bgt.n	8007fa2 <_printf_float+0x396>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f42:	f104 0b1a 	add.w	fp, r4, #26
 8007f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f48:	ebaa 0303 	sub.w	r3, sl, r3
 8007f4c:	eba3 0309 	sub.w	r3, r3, r9
 8007f50:	4543      	cmp	r3, r8
 8007f52:	f77f af79 	ble.w	8007e48 <_printf_float+0x23c>
 8007f56:	2301      	movs	r3, #1
 8007f58:	465a      	mov	r2, fp
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	f43f aeae 	beq.w	8007cc2 <_printf_float+0xb6>
 8007f66:	f108 0801 	add.w	r8, r8, #1
 8007f6a:	e7ec      	b.n	8007f46 <_printf_float+0x33a>
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1c2      	bne.n	8007efe <_printf_float+0x2f2>
 8007f78:	e6a3      	b.n	8007cc2 <_printf_float+0xb6>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	9206      	str	r2, [sp, #24]
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	f43f ae9c 	beq.w	8007cc2 <_printf_float+0xb6>
 8007f8a:	9a06      	ldr	r2, [sp, #24]
 8007f8c:	f10b 0b01 	add.w	fp, fp, #1
 8007f90:	e7bb      	b.n	8007f0a <_printf_float+0x2fe>
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d1c0      	bne.n	8007f22 <_printf_float+0x316>
 8007fa0:	e68f      	b.n	8007cc2 <_printf_float+0xb6>
 8007fa2:	9a06      	ldr	r2, [sp, #24]
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	4442      	add	r2, r8
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d1c3      	bne.n	8007f3a <_printf_float+0x32e>
 8007fb2:	e686      	b.n	8007cc2 <_printf_float+0xb6>
 8007fb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fb8:	f1ba 0f01 	cmp.w	sl, #1
 8007fbc:	dc01      	bgt.n	8007fc2 <_printf_float+0x3b6>
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d536      	bpl.n	8008030 <_printf_float+0x424>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f ae78 	beq.w	8007cc2 <_printf_float+0xb6>
 8007fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f ae70 	beq.w	8007cc2 <_printf_float+0xb6>
 8007fe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fee:	f7f8 fd7b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ff2:	b9c0      	cbnz	r0, 8008026 <_printf_float+0x41a>
 8007ff4:	4653      	mov	r3, sl
 8007ff6:	f108 0201 	add.w	r2, r8, #1
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	d10c      	bne.n	800801e <_printf_float+0x412>
 8008004:	e65d      	b.n	8007cc2 <_printf_float+0xb6>
 8008006:	2301      	movs	r3, #1
 8008008:	465a      	mov	r2, fp
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	f43f ae56 	beq.w	8007cc2 <_printf_float+0xb6>
 8008016:	f108 0801 	add.w	r8, r8, #1
 800801a:	45d0      	cmp	r8, sl
 800801c:	dbf3      	blt.n	8008006 <_printf_float+0x3fa>
 800801e:	464b      	mov	r3, r9
 8008020:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008024:	e6df      	b.n	8007de6 <_printf_float+0x1da>
 8008026:	f04f 0800 	mov.w	r8, #0
 800802a:	f104 0b1a 	add.w	fp, r4, #26
 800802e:	e7f4      	b.n	800801a <_printf_float+0x40e>
 8008030:	2301      	movs	r3, #1
 8008032:	4642      	mov	r2, r8
 8008034:	e7e1      	b.n	8007ffa <_printf_float+0x3ee>
 8008036:	2301      	movs	r3, #1
 8008038:	464a      	mov	r2, r9
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	f43f ae3e 	beq.w	8007cc2 <_printf_float+0xb6>
 8008046:	f108 0801 	add.w	r8, r8, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	4543      	cmp	r3, r8
 8008052:	dcf0      	bgt.n	8008036 <_printf_float+0x42a>
 8008054:	e6fc      	b.n	8007e50 <_printf_float+0x244>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	f104 0919 	add.w	r9, r4, #25
 800805e:	e7f4      	b.n	800804a <_printf_float+0x43e>

08008060 <_printf_common>:
 8008060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	4616      	mov	r6, r2
 8008066:	4698      	mov	r8, r3
 8008068:	688a      	ldr	r2, [r1, #8]
 800806a:	690b      	ldr	r3, [r1, #16]
 800806c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008070:	4293      	cmp	r3, r2
 8008072:	bfb8      	it	lt
 8008074:	4613      	movlt	r3, r2
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800807c:	4607      	mov	r7, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b10a      	cbz	r2, 8008086 <_printf_common+0x26>
 8008082:	3301      	adds	r3, #1
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	0699      	lsls	r1, r3, #26
 800808a:	bf42      	ittt	mi
 800808c:	6833      	ldrmi	r3, [r6, #0]
 800808e:	3302      	addmi	r3, #2
 8008090:	6033      	strmi	r3, [r6, #0]
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	f015 0506 	ands.w	r5, r5, #6
 8008098:	d106      	bne.n	80080a8 <_printf_common+0x48>
 800809a:	f104 0a19 	add.w	sl, r4, #25
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	6832      	ldr	r2, [r6, #0]
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc26      	bgt.n	80080f6 <_printf_common+0x96>
 80080a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	3b00      	subs	r3, #0
 80080b0:	bf18      	it	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	0692      	lsls	r2, r2, #26
 80080b6:	d42b      	bmi.n	8008110 <_printf_common+0xb0>
 80080b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080bc:	4641      	mov	r1, r8
 80080be:	4638      	mov	r0, r7
 80080c0:	47c8      	blx	r9
 80080c2:	3001      	adds	r0, #1
 80080c4:	d01e      	beq.n	8008104 <_printf_common+0xa4>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	f003 0306 	and.w	r3, r3, #6
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	bf02      	ittt	eq
 80080d2:	68e5      	ldreq	r5, [r4, #12]
 80080d4:	6833      	ldreq	r3, [r6, #0]
 80080d6:	1aed      	subeq	r5, r5, r3
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	bf0c      	ite	eq
 80080dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e0:	2500      	movne	r5, #0
 80080e2:	4293      	cmp	r3, r2
 80080e4:	bfc4      	itt	gt
 80080e6:	1a9b      	subgt	r3, r3, r2
 80080e8:	18ed      	addgt	r5, r5, r3
 80080ea:	2600      	movs	r6, #0
 80080ec:	341a      	adds	r4, #26
 80080ee:	42b5      	cmp	r5, r6
 80080f0:	d11a      	bne.n	8008128 <_printf_common+0xc8>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e008      	b.n	8008108 <_printf_common+0xa8>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4641      	mov	r1, r8
 80080fc:	4638      	mov	r0, r7
 80080fe:	47c8      	blx	r9
 8008100:	3001      	adds	r0, #1
 8008102:	d103      	bne.n	800810c <_printf_common+0xac>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810c:	3501      	adds	r5, #1
 800810e:	e7c6      	b.n	800809e <_printf_common+0x3e>
 8008110:	18e1      	adds	r1, r4, r3
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	2030      	movs	r0, #48	@ 0x30
 8008116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800811a:	4422      	add	r2, r4
 800811c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008124:	3302      	adds	r3, #2
 8008126:	e7c7      	b.n	80080b8 <_printf_common+0x58>
 8008128:	2301      	movs	r3, #1
 800812a:	4622      	mov	r2, r4
 800812c:	4641      	mov	r1, r8
 800812e:	4638      	mov	r0, r7
 8008130:	47c8      	blx	r9
 8008132:	3001      	adds	r0, #1
 8008134:	d0e6      	beq.n	8008104 <_printf_common+0xa4>
 8008136:	3601      	adds	r6, #1
 8008138:	e7d9      	b.n	80080ee <_printf_common+0x8e>
	...

0800813c <_printf_i>:
 800813c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	7e0f      	ldrb	r7, [r1, #24]
 8008142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008144:	2f78      	cmp	r7, #120	@ 0x78
 8008146:	4691      	mov	r9, r2
 8008148:	4680      	mov	r8, r0
 800814a:	460c      	mov	r4, r1
 800814c:	469a      	mov	sl, r3
 800814e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008152:	d807      	bhi.n	8008164 <_printf_i+0x28>
 8008154:	2f62      	cmp	r7, #98	@ 0x62
 8008156:	d80a      	bhi.n	800816e <_printf_i+0x32>
 8008158:	2f00      	cmp	r7, #0
 800815a:	f000 80d2 	beq.w	8008302 <_printf_i+0x1c6>
 800815e:	2f58      	cmp	r7, #88	@ 0x58
 8008160:	f000 80b9 	beq.w	80082d6 <_printf_i+0x19a>
 8008164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800816c:	e03a      	b.n	80081e4 <_printf_i+0xa8>
 800816e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008172:	2b15      	cmp	r3, #21
 8008174:	d8f6      	bhi.n	8008164 <_printf_i+0x28>
 8008176:	a101      	add	r1, pc, #4	@ (adr r1, 800817c <_printf_i+0x40>)
 8008178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081e9 	.word	0x080081e9
 8008184:	08008165 	.word	0x08008165
 8008188:	08008165 	.word	0x08008165
 800818c:	08008165 	.word	0x08008165
 8008190:	08008165 	.word	0x08008165
 8008194:	080081e9 	.word	0x080081e9
 8008198:	08008165 	.word	0x08008165
 800819c:	08008165 	.word	0x08008165
 80081a0:	08008165 	.word	0x08008165
 80081a4:	08008165 	.word	0x08008165
 80081a8:	080082e9 	.word	0x080082e9
 80081ac:	08008213 	.word	0x08008213
 80081b0:	080082a3 	.word	0x080082a3
 80081b4:	08008165 	.word	0x08008165
 80081b8:	08008165 	.word	0x08008165
 80081bc:	0800830b 	.word	0x0800830b
 80081c0:	08008165 	.word	0x08008165
 80081c4:	08008213 	.word	0x08008213
 80081c8:	08008165 	.word	0x08008165
 80081cc:	08008165 	.word	0x08008165
 80081d0:	080082ab 	.word	0x080082ab
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6032      	str	r2, [r6, #0]
 80081dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081e4:	2301      	movs	r3, #1
 80081e6:	e09d      	b.n	8008324 <_printf_i+0x1e8>
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	6031      	str	r1, [r6, #0]
 80081f0:	0606      	lsls	r6, r0, #24
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0xbc>
 80081f4:	681d      	ldr	r5, [r3, #0]
 80081f6:	e003      	b.n	8008200 <_printf_i+0xc4>
 80081f8:	0645      	lsls	r5, r0, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0xb8>
 80081fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008200:	2d00      	cmp	r5, #0
 8008202:	da03      	bge.n	800820c <_printf_i+0xd0>
 8008204:	232d      	movs	r3, #45	@ 0x2d
 8008206:	426d      	negs	r5, r5
 8008208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800820c:	4859      	ldr	r0, [pc, #356]	@ (8008374 <_printf_i+0x238>)
 800820e:	230a      	movs	r3, #10
 8008210:	e011      	b.n	8008236 <_printf_i+0xfa>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	0608      	lsls	r0, r1, #24
 8008218:	f853 5b04 	ldr.w	r5, [r3], #4
 800821c:	d402      	bmi.n	8008224 <_printf_i+0xe8>
 800821e:	0649      	lsls	r1, r1, #25
 8008220:	bf48      	it	mi
 8008222:	b2ad      	uxthmi	r5, r5
 8008224:	2f6f      	cmp	r7, #111	@ 0x6f
 8008226:	4853      	ldr	r0, [pc, #332]	@ (8008374 <_printf_i+0x238>)
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	bf14      	ite	ne
 800822c:	230a      	movne	r3, #10
 800822e:	2308      	moveq	r3, #8
 8008230:	2100      	movs	r1, #0
 8008232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008236:	6866      	ldr	r6, [r4, #4]
 8008238:	60a6      	str	r6, [r4, #8]
 800823a:	2e00      	cmp	r6, #0
 800823c:	bfa2      	ittt	ge
 800823e:	6821      	ldrge	r1, [r4, #0]
 8008240:	f021 0104 	bicge.w	r1, r1, #4
 8008244:	6021      	strge	r1, [r4, #0]
 8008246:	b90d      	cbnz	r5, 800824c <_printf_i+0x110>
 8008248:	2e00      	cmp	r6, #0
 800824a:	d04b      	beq.n	80082e4 <_printf_i+0x1a8>
 800824c:	4616      	mov	r6, r2
 800824e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008252:	fb03 5711 	mls	r7, r3, r1, r5
 8008256:	5dc7      	ldrb	r7, [r0, r7]
 8008258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800825c:	462f      	mov	r7, r5
 800825e:	42bb      	cmp	r3, r7
 8008260:	460d      	mov	r5, r1
 8008262:	d9f4      	bls.n	800824e <_printf_i+0x112>
 8008264:	2b08      	cmp	r3, #8
 8008266:	d10b      	bne.n	8008280 <_printf_i+0x144>
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	07df      	lsls	r7, r3, #31
 800826c:	d508      	bpl.n	8008280 <_printf_i+0x144>
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6861      	ldr	r1, [r4, #4]
 8008272:	4299      	cmp	r1, r3
 8008274:	bfde      	ittt	le
 8008276:	2330      	movle	r3, #48	@ 0x30
 8008278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800827c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008280:	1b92      	subs	r2, r2, r6
 8008282:	6122      	str	r2, [r4, #16]
 8008284:	f8cd a000 	str.w	sl, [sp]
 8008288:	464b      	mov	r3, r9
 800828a:	aa03      	add	r2, sp, #12
 800828c:	4621      	mov	r1, r4
 800828e:	4640      	mov	r0, r8
 8008290:	f7ff fee6 	bl	8008060 <_printf_common>
 8008294:	3001      	adds	r0, #1
 8008296:	d14a      	bne.n	800832e <_printf_i+0x1f2>
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	b004      	add	sp, #16
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f043 0320 	orr.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	4833      	ldr	r0, [pc, #204]	@ (8008378 <_printf_i+0x23c>)
 80082ac:	2778      	movs	r7, #120	@ 0x78
 80082ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	6831      	ldr	r1, [r6, #0]
 80082b6:	061f      	lsls	r7, r3, #24
 80082b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082bc:	d402      	bmi.n	80082c4 <_printf_i+0x188>
 80082be:	065f      	lsls	r7, r3, #25
 80082c0:	bf48      	it	mi
 80082c2:	b2ad      	uxthmi	r5, r5
 80082c4:	6031      	str	r1, [r6, #0]
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	bf44      	itt	mi
 80082ca:	f043 0320 	orrmi.w	r3, r3, #32
 80082ce:	6023      	strmi	r3, [r4, #0]
 80082d0:	b11d      	cbz	r5, 80082da <_printf_i+0x19e>
 80082d2:	2310      	movs	r3, #16
 80082d4:	e7ac      	b.n	8008230 <_printf_i+0xf4>
 80082d6:	4827      	ldr	r0, [pc, #156]	@ (8008374 <_printf_i+0x238>)
 80082d8:	e7e9      	b.n	80082ae <_printf_i+0x172>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f023 0320 	bic.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	e7f6      	b.n	80082d2 <_printf_i+0x196>
 80082e4:	4616      	mov	r6, r2
 80082e6:	e7bd      	b.n	8008264 <_printf_i+0x128>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	6961      	ldr	r1, [r4, #20]
 80082ee:	1d18      	adds	r0, r3, #4
 80082f0:	6030      	str	r0, [r6, #0]
 80082f2:	062e      	lsls	r6, r5, #24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0x1c0>
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0x1c6>
 80082fc:	0668      	lsls	r0, r5, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0x1bc>
 8008300:	8019      	strh	r1, [r3, #0]
 8008302:	2300      	movs	r3, #0
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	4616      	mov	r6, r2
 8008308:	e7bc      	b.n	8008284 <_printf_i+0x148>
 800830a:	6833      	ldr	r3, [r6, #0]
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	6032      	str	r2, [r6, #0]
 8008310:	681e      	ldr	r6, [r3, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	2100      	movs	r1, #0
 8008316:	4630      	mov	r0, r6
 8008318:	f7f7 ff6a 	bl	80001f0 <memchr>
 800831c:	b108      	cbz	r0, 8008322 <_printf_i+0x1e6>
 800831e:	1b80      	subs	r0, r0, r6
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832c:	e7aa      	b.n	8008284 <_printf_i+0x148>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d0ad      	beq.n	8008298 <_printf_i+0x15c>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	079b      	lsls	r3, r3, #30
 8008340:	d413      	bmi.n	800836a <_printf_i+0x22e>
 8008342:	68e0      	ldr	r0, [r4, #12]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	4298      	cmp	r0, r3
 8008348:	bfb8      	it	lt
 800834a:	4618      	movlt	r0, r3
 800834c:	e7a6      	b.n	800829c <_printf_i+0x160>
 800834e:	2301      	movs	r3, #1
 8008350:	4632      	mov	r2, r6
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	47d0      	blx	sl
 8008358:	3001      	adds	r0, #1
 800835a:	d09d      	beq.n	8008298 <_printf_i+0x15c>
 800835c:	3501      	adds	r5, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	9903      	ldr	r1, [sp, #12]
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	42ab      	cmp	r3, r5
 8008366:	dcf2      	bgt.n	800834e <_printf_i+0x212>
 8008368:	e7eb      	b.n	8008342 <_printf_i+0x206>
 800836a:	2500      	movs	r5, #0
 800836c:	f104 0619 	add.w	r6, r4, #25
 8008370:	e7f5      	b.n	800835e <_printf_i+0x222>
 8008372:	bf00      	nop
 8008374:	0800c352 	.word	0x0800c352
 8008378:	0800c363 	.word	0x0800c363

0800837c <_scanf_float>:
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	b087      	sub	sp, #28
 8008382:	4617      	mov	r7, r2
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	688b      	ldr	r3, [r1, #8]
 8008388:	1e5a      	subs	r2, r3, #1
 800838a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800838e:	bf81      	itttt	hi
 8008390:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008394:	eb03 0b05 	addhi.w	fp, r3, r5
 8008398:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800839c:	608b      	strhi	r3, [r1, #8]
 800839e:	680b      	ldr	r3, [r1, #0]
 80083a0:	460a      	mov	r2, r1
 80083a2:	f04f 0500 	mov.w	r5, #0
 80083a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80083aa:	f842 3b1c 	str.w	r3, [r2], #28
 80083ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083b2:	4680      	mov	r8, r0
 80083b4:	460c      	mov	r4, r1
 80083b6:	bf98      	it	ls
 80083b8:	f04f 0b00 	movls.w	fp, #0
 80083bc:	9201      	str	r2, [sp, #4]
 80083be:	4616      	mov	r6, r2
 80083c0:	46aa      	mov	sl, r5
 80083c2:	46a9      	mov	r9, r5
 80083c4:	9502      	str	r5, [sp, #8]
 80083c6:	68a2      	ldr	r2, [r4, #8]
 80083c8:	b152      	cbz	r2, 80083e0 <_scanf_float+0x64>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80083d0:	d864      	bhi.n	800849c <_scanf_float+0x120>
 80083d2:	2b40      	cmp	r3, #64	@ 0x40
 80083d4:	d83c      	bhi.n	8008450 <_scanf_float+0xd4>
 80083d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80083da:	b2c8      	uxtb	r0, r1
 80083dc:	280e      	cmp	r0, #14
 80083de:	d93a      	bls.n	8008456 <_scanf_float+0xda>
 80083e0:	f1b9 0f00 	cmp.w	r9, #0
 80083e4:	d003      	beq.n	80083ee <_scanf_float+0x72>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083f2:	f1ba 0f01 	cmp.w	sl, #1
 80083f6:	f200 8117 	bhi.w	8008628 <_scanf_float+0x2ac>
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	429e      	cmp	r6, r3
 80083fe:	f200 8108 	bhi.w	8008612 <_scanf_float+0x296>
 8008402:	2001      	movs	r0, #1
 8008404:	b007      	add	sp, #28
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800840e:	2a0d      	cmp	r2, #13
 8008410:	d8e6      	bhi.n	80083e0 <_scanf_float+0x64>
 8008412:	a101      	add	r1, pc, #4	@ (adr r1, 8008418 <_scanf_float+0x9c>)
 8008414:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008418:	0800855f 	.word	0x0800855f
 800841c:	080083e1 	.word	0x080083e1
 8008420:	080083e1 	.word	0x080083e1
 8008424:	080083e1 	.word	0x080083e1
 8008428:	080085bf 	.word	0x080085bf
 800842c:	08008597 	.word	0x08008597
 8008430:	080083e1 	.word	0x080083e1
 8008434:	080083e1 	.word	0x080083e1
 8008438:	0800856d 	.word	0x0800856d
 800843c:	080083e1 	.word	0x080083e1
 8008440:	080083e1 	.word	0x080083e1
 8008444:	080083e1 	.word	0x080083e1
 8008448:	080083e1 	.word	0x080083e1
 800844c:	08008525 	.word	0x08008525
 8008450:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008454:	e7db      	b.n	800840e <_scanf_float+0x92>
 8008456:	290e      	cmp	r1, #14
 8008458:	d8c2      	bhi.n	80083e0 <_scanf_float+0x64>
 800845a:	a001      	add	r0, pc, #4	@ (adr r0, 8008460 <_scanf_float+0xe4>)
 800845c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008460:	08008515 	.word	0x08008515
 8008464:	080083e1 	.word	0x080083e1
 8008468:	08008515 	.word	0x08008515
 800846c:	080085ab 	.word	0x080085ab
 8008470:	080083e1 	.word	0x080083e1
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084fb 	.word	0x080084fb
 800847c:	080084fb 	.word	0x080084fb
 8008480:	080084fb 	.word	0x080084fb
 8008484:	080084fb 	.word	0x080084fb
 8008488:	080084fb 	.word	0x080084fb
 800848c:	080084fb 	.word	0x080084fb
 8008490:	080084fb 	.word	0x080084fb
 8008494:	080084fb 	.word	0x080084fb
 8008498:	080084fb 	.word	0x080084fb
 800849c:	2b6e      	cmp	r3, #110	@ 0x6e
 800849e:	d809      	bhi.n	80084b4 <_scanf_float+0x138>
 80084a0:	2b60      	cmp	r3, #96	@ 0x60
 80084a2:	d8b2      	bhi.n	800840a <_scanf_float+0x8e>
 80084a4:	2b54      	cmp	r3, #84	@ 0x54
 80084a6:	d07b      	beq.n	80085a0 <_scanf_float+0x224>
 80084a8:	2b59      	cmp	r3, #89	@ 0x59
 80084aa:	d199      	bne.n	80083e0 <_scanf_float+0x64>
 80084ac:	2d07      	cmp	r5, #7
 80084ae:	d197      	bne.n	80083e0 <_scanf_float+0x64>
 80084b0:	2508      	movs	r5, #8
 80084b2:	e02c      	b.n	800850e <_scanf_float+0x192>
 80084b4:	2b74      	cmp	r3, #116	@ 0x74
 80084b6:	d073      	beq.n	80085a0 <_scanf_float+0x224>
 80084b8:	2b79      	cmp	r3, #121	@ 0x79
 80084ba:	e7f6      	b.n	80084aa <_scanf_float+0x12e>
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	05c8      	lsls	r0, r1, #23
 80084c0:	d51b      	bpl.n	80084fa <_scanf_float+0x17e>
 80084c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80084c6:	6021      	str	r1, [r4, #0]
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	f1bb 0f00 	cmp.w	fp, #0
 80084d0:	d003      	beq.n	80084da <_scanf_float+0x15e>
 80084d2:	3201      	adds	r2, #1
 80084d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084d8:	60a2      	str	r2, [r4, #8]
 80084da:	68a3      	ldr	r3, [r4, #8]
 80084dc:	3b01      	subs	r3, #1
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	3301      	adds	r3, #1
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	f340 8087 	ble.w	8008600 <_scanf_float+0x284>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	e765      	b.n	80083c6 <_scanf_float+0x4a>
 80084fa:	eb1a 0105 	adds.w	r1, sl, r5
 80084fe:	f47f af6f 	bne.w	80083e0 <_scanf_float+0x64>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	460d      	mov	r5, r1
 800850c:	468a      	mov	sl, r1
 800850e:	f806 3b01 	strb.w	r3, [r6], #1
 8008512:	e7e2      	b.n	80084da <_scanf_float+0x15e>
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	0610      	lsls	r0, r2, #24
 8008518:	f57f af62 	bpl.w	80083e0 <_scanf_float+0x64>
 800851c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	e7f4      	b.n	800850e <_scanf_float+0x192>
 8008524:	f1ba 0f00 	cmp.w	sl, #0
 8008528:	d10e      	bne.n	8008548 <_scanf_float+0x1cc>
 800852a:	f1b9 0f00 	cmp.w	r9, #0
 800852e:	d10e      	bne.n	800854e <_scanf_float+0x1d2>
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008536:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800853a:	d108      	bne.n	800854e <_scanf_float+0x1d2>
 800853c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	f04f 0a01 	mov.w	sl, #1
 8008546:	e7e2      	b.n	800850e <_scanf_float+0x192>
 8008548:	f1ba 0f02 	cmp.w	sl, #2
 800854c:	d055      	beq.n	80085fa <_scanf_float+0x27e>
 800854e:	2d01      	cmp	r5, #1
 8008550:	d002      	beq.n	8008558 <_scanf_float+0x1dc>
 8008552:	2d04      	cmp	r5, #4
 8008554:	f47f af44 	bne.w	80083e0 <_scanf_float+0x64>
 8008558:	3501      	adds	r5, #1
 800855a:	b2ed      	uxtb	r5, r5
 800855c:	e7d7      	b.n	800850e <_scanf_float+0x192>
 800855e:	f1ba 0f01 	cmp.w	sl, #1
 8008562:	f47f af3d 	bne.w	80083e0 <_scanf_float+0x64>
 8008566:	f04f 0a02 	mov.w	sl, #2
 800856a:	e7d0      	b.n	800850e <_scanf_float+0x192>
 800856c:	b97d      	cbnz	r5, 800858e <_scanf_float+0x212>
 800856e:	f1b9 0f00 	cmp.w	r9, #0
 8008572:	f47f af38 	bne.w	80083e6 <_scanf_float+0x6a>
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800857c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008580:	f040 8108 	bne.w	8008794 <_scanf_float+0x418>
 8008584:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008588:	6022      	str	r2, [r4, #0]
 800858a:	2501      	movs	r5, #1
 800858c:	e7bf      	b.n	800850e <_scanf_float+0x192>
 800858e:	2d03      	cmp	r5, #3
 8008590:	d0e2      	beq.n	8008558 <_scanf_float+0x1dc>
 8008592:	2d05      	cmp	r5, #5
 8008594:	e7de      	b.n	8008554 <_scanf_float+0x1d8>
 8008596:	2d02      	cmp	r5, #2
 8008598:	f47f af22 	bne.w	80083e0 <_scanf_float+0x64>
 800859c:	2503      	movs	r5, #3
 800859e:	e7b6      	b.n	800850e <_scanf_float+0x192>
 80085a0:	2d06      	cmp	r5, #6
 80085a2:	f47f af1d 	bne.w	80083e0 <_scanf_float+0x64>
 80085a6:	2507      	movs	r5, #7
 80085a8:	e7b1      	b.n	800850e <_scanf_float+0x192>
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	0591      	lsls	r1, r2, #22
 80085ae:	f57f af17 	bpl.w	80083e0 <_scanf_float+0x64>
 80085b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80085b6:	6022      	str	r2, [r4, #0]
 80085b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80085bc:	e7a7      	b.n	800850e <_scanf_float+0x192>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80085c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80085c8:	d006      	beq.n	80085d8 <_scanf_float+0x25c>
 80085ca:	0550      	lsls	r0, r2, #21
 80085cc:	f57f af08 	bpl.w	80083e0 <_scanf_float+0x64>
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	f000 80de 	beq.w	8008794 <_scanf_float+0x418>
 80085d8:	0591      	lsls	r1, r2, #22
 80085da:	bf58      	it	pl
 80085dc:	9902      	ldrpl	r1, [sp, #8]
 80085de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085e2:	bf58      	it	pl
 80085e4:	eba9 0101 	subpl.w	r1, r9, r1
 80085e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80085ec:	bf58      	it	pl
 80085ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085f2:	6022      	str	r2, [r4, #0]
 80085f4:	f04f 0900 	mov.w	r9, #0
 80085f8:	e789      	b.n	800850e <_scanf_float+0x192>
 80085fa:	f04f 0a03 	mov.w	sl, #3
 80085fe:	e786      	b.n	800850e <_scanf_float+0x192>
 8008600:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008604:	4639      	mov	r1, r7
 8008606:	4640      	mov	r0, r8
 8008608:	4798      	blx	r3
 800860a:	2800      	cmp	r0, #0
 800860c:	f43f aedb 	beq.w	80083c6 <_scanf_float+0x4a>
 8008610:	e6e6      	b.n	80083e0 <_scanf_float+0x64>
 8008612:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800861a:	463a      	mov	r2, r7
 800861c:	4640      	mov	r0, r8
 800861e:	4798      	blx	r3
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	3b01      	subs	r3, #1
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	e6e8      	b.n	80083fa <_scanf_float+0x7e>
 8008628:	1e6b      	subs	r3, r5, #1
 800862a:	2b06      	cmp	r3, #6
 800862c:	d824      	bhi.n	8008678 <_scanf_float+0x2fc>
 800862e:	2d02      	cmp	r5, #2
 8008630:	d836      	bhi.n	80086a0 <_scanf_float+0x324>
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	429e      	cmp	r6, r3
 8008636:	f67f aee4 	bls.w	8008402 <_scanf_float+0x86>
 800863a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800863e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008642:	463a      	mov	r2, r7
 8008644:	4640      	mov	r0, r8
 8008646:	4798      	blx	r3
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	3b01      	subs	r3, #1
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	e7f0      	b.n	8008632 <_scanf_float+0x2b6>
 8008650:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008654:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008658:	463a      	mov	r2, r7
 800865a:	4640      	mov	r0, r8
 800865c:	4798      	blx	r3
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	3b01      	subs	r3, #1
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008668:	fa5f fa8a 	uxtb.w	sl, sl
 800866c:	f1ba 0f02 	cmp.w	sl, #2
 8008670:	d1ee      	bne.n	8008650 <_scanf_float+0x2d4>
 8008672:	3d03      	subs	r5, #3
 8008674:	b2ed      	uxtb	r5, r5
 8008676:	1b76      	subs	r6, r6, r5
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	05da      	lsls	r2, r3, #23
 800867c:	d530      	bpl.n	80086e0 <_scanf_float+0x364>
 800867e:	055b      	lsls	r3, r3, #21
 8008680:	d511      	bpl.n	80086a6 <_scanf_float+0x32a>
 8008682:	9b01      	ldr	r3, [sp, #4]
 8008684:	429e      	cmp	r6, r3
 8008686:	f67f aebc 	bls.w	8008402 <_scanf_float+0x86>
 800868a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800868e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008692:	463a      	mov	r2, r7
 8008694:	4640      	mov	r0, r8
 8008696:	4798      	blx	r3
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	3b01      	subs	r3, #1
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	e7f0      	b.n	8008682 <_scanf_float+0x306>
 80086a0:	46aa      	mov	sl, r5
 80086a2:	46b3      	mov	fp, r6
 80086a4:	e7de      	b.n	8008664 <_scanf_float+0x2e8>
 80086a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	2965      	cmp	r1, #101	@ 0x65
 80086ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80086b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	d00c      	beq.n	80086d4 <_scanf_float+0x358>
 80086ba:	2945      	cmp	r1, #69	@ 0x45
 80086bc:	d00a      	beq.n	80086d4 <_scanf_float+0x358>
 80086be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086c2:	463a      	mov	r2, r7
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	1eb5      	subs	r5, r6, #2
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086d8:	463a      	mov	r2, r7
 80086da:	4640      	mov	r0, r8
 80086dc:	4798      	blx	r3
 80086de:	462e      	mov	r6, r5
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	f012 0210 	ands.w	r2, r2, #16
 80086e6:	d001      	beq.n	80086ec <_scanf_float+0x370>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e68b      	b.n	8008404 <_scanf_float+0x88>
 80086ec:	7032      	strb	r2, [r6, #0]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086f8:	d11c      	bne.n	8008734 <_scanf_float+0x3b8>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	454b      	cmp	r3, r9
 80086fe:	eba3 0209 	sub.w	r2, r3, r9
 8008702:	d123      	bne.n	800874c <_scanf_float+0x3d0>
 8008704:	9901      	ldr	r1, [sp, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	4640      	mov	r0, r8
 800870a:	f002 fc09 	bl	800af20 <_strtod_r>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	6821      	ldr	r1, [r4, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f011 0f02 	tst.w	r1, #2
 8008718:	ec57 6b10 	vmov	r6, r7, d0
 800871c:	f103 0204 	add.w	r2, r3, #4
 8008720:	d01f      	beq.n	8008762 <_scanf_float+0x3e6>
 8008722:	9903      	ldr	r1, [sp, #12]
 8008724:	600a      	str	r2, [r1, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	e9c3 6700 	strd	r6, r7, [r3]
 800872c:	68e3      	ldr	r3, [r4, #12]
 800872e:	3301      	adds	r3, #1
 8008730:	60e3      	str	r3, [r4, #12]
 8008732:	e7d9      	b.n	80086e8 <_scanf_float+0x36c>
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0e4      	beq.n	8008704 <_scanf_float+0x388>
 800873a:	9905      	ldr	r1, [sp, #20]
 800873c:	230a      	movs	r3, #10
 800873e:	3101      	adds	r1, #1
 8008740:	4640      	mov	r0, r8
 8008742:	f002 fc6d 	bl	800b020 <_strtol_r>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	9e05      	ldr	r6, [sp, #20]
 800874a:	1ac2      	subs	r2, r0, r3
 800874c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008750:	429e      	cmp	r6, r3
 8008752:	bf28      	it	cs
 8008754:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008758:	4910      	ldr	r1, [pc, #64]	@ (800879c <_scanf_float+0x420>)
 800875a:	4630      	mov	r0, r6
 800875c:	f000 f8e4 	bl	8008928 <siprintf>
 8008760:	e7d0      	b.n	8008704 <_scanf_float+0x388>
 8008762:	f011 0f04 	tst.w	r1, #4
 8008766:	9903      	ldr	r1, [sp, #12]
 8008768:	600a      	str	r2, [r1, #0]
 800876a:	d1dc      	bne.n	8008726 <_scanf_float+0x3aa>
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	4632      	mov	r2, r6
 8008770:	463b      	mov	r3, r7
 8008772:	4630      	mov	r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	f7f8 f9e9 	bl	8000b4c <__aeabi_dcmpun>
 800877a:	b128      	cbz	r0, 8008788 <_scanf_float+0x40c>
 800877c:	4808      	ldr	r0, [pc, #32]	@ (80087a0 <_scanf_float+0x424>)
 800877e:	f000 f9c9 	bl	8008b14 <nanf>
 8008782:	ed85 0a00 	vstr	s0, [r5]
 8008786:	e7d1      	b.n	800872c <_scanf_float+0x3b0>
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 fa3c 	bl	8000c08 <__aeabi_d2f>
 8008790:	6028      	str	r0, [r5, #0]
 8008792:	e7cb      	b.n	800872c <_scanf_float+0x3b0>
 8008794:	f04f 0900 	mov.w	r9, #0
 8008798:	e629      	b.n	80083ee <_scanf_float+0x72>
 800879a:	bf00      	nop
 800879c:	0800c374 	.word	0x0800c374
 80087a0:	0800c70d 	.word	0x0800c70d

080087a4 <std>:
 80087a4:	2300      	movs	r3, #0
 80087a6:	b510      	push	{r4, lr}
 80087a8:	4604      	mov	r4, r0
 80087aa:	e9c0 3300 	strd	r3, r3, [r0]
 80087ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087b2:	6083      	str	r3, [r0, #8]
 80087b4:	8181      	strh	r1, [r0, #12]
 80087b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087b8:	81c2      	strh	r2, [r0, #14]
 80087ba:	6183      	str	r3, [r0, #24]
 80087bc:	4619      	mov	r1, r3
 80087be:	2208      	movs	r2, #8
 80087c0:	305c      	adds	r0, #92	@ 0x5c
 80087c2:	f000 f914 	bl	80089ee <memset>
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <std+0x58>)
 80087c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <std+0x5c>)
 80087cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <std+0x60>)
 80087d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008808 <std+0x64>)
 80087d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80087d6:	4b0d      	ldr	r3, [pc, #52]	@ (800880c <std+0x68>)
 80087d8:	6224      	str	r4, [r4, #32]
 80087da:	429c      	cmp	r4, r3
 80087dc:	d006      	beq.n	80087ec <std+0x48>
 80087de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087e2:	4294      	cmp	r4, r2
 80087e4:	d002      	beq.n	80087ec <std+0x48>
 80087e6:	33d0      	adds	r3, #208	@ 0xd0
 80087e8:	429c      	cmp	r4, r3
 80087ea:	d105      	bne.n	80087f8 <std+0x54>
 80087ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f4:	f000 b98a 	b.w	8008b0c <__retarget_lock_init_recursive>
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	08008969 	.word	0x08008969
 8008800:	0800898b 	.word	0x0800898b
 8008804:	080089c3 	.word	0x080089c3
 8008808:	080089e7 	.word	0x080089e7
 800880c:	2000046c 	.word	0x2000046c

08008810 <stdio_exit_handler>:
 8008810:	4a02      	ldr	r2, [pc, #8]	@ (800881c <stdio_exit_handler+0xc>)
 8008812:	4903      	ldr	r1, [pc, #12]	@ (8008820 <stdio_exit_handler+0x10>)
 8008814:	4803      	ldr	r0, [pc, #12]	@ (8008824 <stdio_exit_handler+0x14>)
 8008816:	f000 b869 	b.w	80088ec <_fwalk_sglue>
 800881a:	bf00      	nop
 800881c:	2000001c 	.word	0x2000001c
 8008820:	0800b3dd 	.word	0x0800b3dd
 8008824:	2000002c 	.word	0x2000002c

08008828 <cleanup_stdio>:
 8008828:	6841      	ldr	r1, [r0, #4]
 800882a:	4b0c      	ldr	r3, [pc, #48]	@ (800885c <cleanup_stdio+0x34>)
 800882c:	4299      	cmp	r1, r3
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	d001      	beq.n	8008838 <cleanup_stdio+0x10>
 8008834:	f002 fdd2 	bl	800b3dc <_fflush_r>
 8008838:	68a1      	ldr	r1, [r4, #8]
 800883a:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <cleanup_stdio+0x38>)
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <cleanup_stdio+0x1e>
 8008840:	4620      	mov	r0, r4
 8008842:	f002 fdcb 	bl	800b3dc <_fflush_r>
 8008846:	68e1      	ldr	r1, [r4, #12]
 8008848:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <cleanup_stdio+0x3c>)
 800884a:	4299      	cmp	r1, r3
 800884c:	d004      	beq.n	8008858 <cleanup_stdio+0x30>
 800884e:	4620      	mov	r0, r4
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	f002 bdc2 	b.w	800b3dc <_fflush_r>
 8008858:	bd10      	pop	{r4, pc}
 800885a:	bf00      	nop
 800885c:	2000046c 	.word	0x2000046c
 8008860:	200004d4 	.word	0x200004d4
 8008864:	2000053c 	.word	0x2000053c

08008868 <global_stdio_init.part.0>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4b0b      	ldr	r3, [pc, #44]	@ (8008898 <global_stdio_init.part.0+0x30>)
 800886c:	4c0b      	ldr	r4, [pc, #44]	@ (800889c <global_stdio_init.part.0+0x34>)
 800886e:	4a0c      	ldr	r2, [pc, #48]	@ (80088a0 <global_stdio_init.part.0+0x38>)
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	4620      	mov	r0, r4
 8008874:	2200      	movs	r2, #0
 8008876:	2104      	movs	r1, #4
 8008878:	f7ff ff94 	bl	80087a4 <std>
 800887c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008880:	2201      	movs	r2, #1
 8008882:	2109      	movs	r1, #9
 8008884:	f7ff ff8e 	bl	80087a4 <std>
 8008888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800888c:	2202      	movs	r2, #2
 800888e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008892:	2112      	movs	r1, #18
 8008894:	f7ff bf86 	b.w	80087a4 <std>
 8008898:	200005a4 	.word	0x200005a4
 800889c:	2000046c 	.word	0x2000046c
 80088a0:	08008811 	.word	0x08008811

080088a4 <__sfp_lock_acquire>:
 80088a4:	4801      	ldr	r0, [pc, #4]	@ (80088ac <__sfp_lock_acquire+0x8>)
 80088a6:	f000 b932 	b.w	8008b0e <__retarget_lock_acquire_recursive>
 80088aa:	bf00      	nop
 80088ac:	200005ad 	.word	0x200005ad

080088b0 <__sfp_lock_release>:
 80088b0:	4801      	ldr	r0, [pc, #4]	@ (80088b8 <__sfp_lock_release+0x8>)
 80088b2:	f000 b92d 	b.w	8008b10 <__retarget_lock_release_recursive>
 80088b6:	bf00      	nop
 80088b8:	200005ad 	.word	0x200005ad

080088bc <__sinit>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4604      	mov	r4, r0
 80088c0:	f7ff fff0 	bl	80088a4 <__sfp_lock_acquire>
 80088c4:	6a23      	ldr	r3, [r4, #32]
 80088c6:	b11b      	cbz	r3, 80088d0 <__sinit+0x14>
 80088c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088cc:	f7ff bff0 	b.w	80088b0 <__sfp_lock_release>
 80088d0:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <__sinit+0x28>)
 80088d2:	6223      	str	r3, [r4, #32]
 80088d4:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <__sinit+0x2c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f5      	bne.n	80088c8 <__sinit+0xc>
 80088dc:	f7ff ffc4 	bl	8008868 <global_stdio_init.part.0>
 80088e0:	e7f2      	b.n	80088c8 <__sinit+0xc>
 80088e2:	bf00      	nop
 80088e4:	08008829 	.word	0x08008829
 80088e8:	200005a4 	.word	0x200005a4

080088ec <_fwalk_sglue>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4607      	mov	r7, r0
 80088f2:	4688      	mov	r8, r1
 80088f4:	4614      	mov	r4, r2
 80088f6:	2600      	movs	r6, #0
 80088f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008900:	d505      	bpl.n	800890e <_fwalk_sglue+0x22>
 8008902:	6824      	ldr	r4, [r4, #0]
 8008904:	2c00      	cmp	r4, #0
 8008906:	d1f7      	bne.n	80088f8 <_fwalk_sglue+0xc>
 8008908:	4630      	mov	r0, r6
 800890a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d907      	bls.n	8008924 <_fwalk_sglue+0x38>
 8008914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008918:	3301      	adds	r3, #1
 800891a:	d003      	beq.n	8008924 <_fwalk_sglue+0x38>
 800891c:	4629      	mov	r1, r5
 800891e:	4638      	mov	r0, r7
 8008920:	47c0      	blx	r8
 8008922:	4306      	orrs	r6, r0
 8008924:	3568      	adds	r5, #104	@ 0x68
 8008926:	e7e9      	b.n	80088fc <_fwalk_sglue+0x10>

08008928 <siprintf>:
 8008928:	b40e      	push	{r1, r2, r3}
 800892a:	b500      	push	{lr}
 800892c:	b09c      	sub	sp, #112	@ 0x70
 800892e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9006      	str	r0, [sp, #24]
 8008934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008938:	4809      	ldr	r0, [pc, #36]	@ (8008960 <siprintf+0x38>)
 800893a:	9107      	str	r1, [sp, #28]
 800893c:	9104      	str	r1, [sp, #16]
 800893e:	4909      	ldr	r1, [pc, #36]	@ (8008964 <siprintf+0x3c>)
 8008940:	f853 2b04 	ldr.w	r2, [r3], #4
 8008944:	9105      	str	r1, [sp, #20]
 8008946:	6800      	ldr	r0, [r0, #0]
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	a902      	add	r1, sp, #8
 800894c:	f002 fbc6 	bl	800b0dc <_svfiprintf_r>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	b01c      	add	sp, #112	@ 0x70
 8008958:	f85d eb04 	ldr.w	lr, [sp], #4
 800895c:	b003      	add	sp, #12
 800895e:	4770      	bx	lr
 8008960:	20000028 	.word	0x20000028
 8008964:	ffff0208 	.word	0xffff0208

08008968 <__sread>:
 8008968:	b510      	push	{r4, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	f000 f87e 	bl	8008a70 <_read_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	bfab      	itete	ge
 8008978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800897a:	89a3      	ldrhlt	r3, [r4, #12]
 800897c:	181b      	addge	r3, r3, r0
 800897e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008982:	bfac      	ite	ge
 8008984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008986:	81a3      	strhlt	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__swrite>:
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	461f      	mov	r7, r3
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	05db      	lsls	r3, r3, #23
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4616      	mov	r6, r2
 800899a:	d505      	bpl.n	80089a8 <__swrite+0x1e>
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	2302      	movs	r3, #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	f000 f852 	bl	8008a4c <_lseek_r>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	f000 b869 	b.w	8008a94 <_write_r>

080089c2 <__sseek>:
 80089c2:	b510      	push	{r4, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ca:	f000 f83f 	bl	8008a4c <_lseek_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	bf15      	itete	ne
 80089d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089de:	81a3      	strheq	r3, [r4, #12]
 80089e0:	bf18      	it	ne
 80089e2:	81a3      	strhne	r3, [r4, #12]
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__sclose>:
 80089e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ea:	f000 b81f 	b.w	8008a2c <_close_r>

080089ee <memset>:
 80089ee:	4402      	add	r2, r0
 80089f0:	4603      	mov	r3, r0
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d100      	bne.n	80089f8 <memset+0xa>
 80089f6:	4770      	bx	lr
 80089f8:	f803 1b01 	strb.w	r1, [r3], #1
 80089fc:	e7f9      	b.n	80089f2 <memset+0x4>

080089fe <strncpy>:
 80089fe:	b510      	push	{r4, lr}
 8008a00:	3901      	subs	r1, #1
 8008a02:	4603      	mov	r3, r0
 8008a04:	b132      	cbz	r2, 8008a14 <strncpy+0x16>
 8008a06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a0a:	f803 4b01 	strb.w	r4, [r3], #1
 8008a0e:	3a01      	subs	r2, #1
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	d1f7      	bne.n	8008a04 <strncpy+0x6>
 8008a14:	441a      	add	r2, r3
 8008a16:	2100      	movs	r1, #0
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d100      	bne.n	8008a1e <strncpy+0x20>
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a22:	e7f9      	b.n	8008a18 <strncpy+0x1a>

08008a24 <_localeconv_r>:
 8008a24:	4800      	ldr	r0, [pc, #0]	@ (8008a28 <_localeconv_r+0x4>)
 8008a26:	4770      	bx	lr
 8008a28:	20000168 	.word	0x20000168

08008a2c <_close_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	@ (8008a48 <_close_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f9 fb58 	bl	80020ec <_close>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_close_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_close_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	200005a8 	.word	0x200005a8

08008a4c <_lseek_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d07      	ldr	r5, [pc, #28]	@ (8008a6c <_lseek_r+0x20>)
 8008a50:	4604      	mov	r4, r0
 8008a52:	4608      	mov	r0, r1
 8008a54:	4611      	mov	r1, r2
 8008a56:	2200      	movs	r2, #0
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f7f9 fb6d 	bl	800213a <_lseek>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_lseek_r+0x1e>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_lseek_r+0x1e>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	200005a8 	.word	0x200005a8

08008a70 <_read_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d07      	ldr	r5, [pc, #28]	@ (8008a90 <_read_r+0x20>)
 8008a74:	4604      	mov	r4, r0
 8008a76:	4608      	mov	r0, r1
 8008a78:	4611      	mov	r1, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	602a      	str	r2, [r5, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f7f9 fafb 	bl	800207a <_read>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_read_r+0x1e>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_read_r+0x1e>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	200005a8 	.word	0x200005a8

08008a94 <_write_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d07      	ldr	r5, [pc, #28]	@ (8008ab4 <_write_r+0x20>)
 8008a98:	4604      	mov	r4, r0
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	602a      	str	r2, [r5, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f7f9 fb06 	bl	80020b4 <_write>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_write_r+0x1e>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_write_r+0x1e>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200005a8 	.word	0x200005a8

08008ab8 <__errno>:
 8008ab8:	4b01      	ldr	r3, [pc, #4]	@ (8008ac0 <__errno+0x8>)
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000028 	.word	0x20000028

08008ac4 <__libc_init_array>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8008afc <__libc_init_array+0x38>)
 8008ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8008b00 <__libc_init_array+0x3c>)
 8008aca:	1b64      	subs	r4, r4, r5
 8008acc:	10a4      	asrs	r4, r4, #2
 8008ace:	2600      	movs	r6, #0
 8008ad0:	42a6      	cmp	r6, r4
 8008ad2:	d109      	bne.n	8008ae8 <__libc_init_array+0x24>
 8008ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8008b04 <__libc_init_array+0x40>)
 8008ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8008b08 <__libc_init_array+0x44>)
 8008ad8:	f003 fb70 	bl	800c1bc <_init>
 8008adc:	1b64      	subs	r4, r4, r5
 8008ade:	10a4      	asrs	r4, r4, #2
 8008ae0:	2600      	movs	r6, #0
 8008ae2:	42a6      	cmp	r6, r4
 8008ae4:	d105      	bne.n	8008af2 <__libc_init_array+0x2e>
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aec:	4798      	blx	r3
 8008aee:	3601      	adds	r6, #1
 8008af0:	e7ee      	b.n	8008ad0 <__libc_init_array+0xc>
 8008af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af6:	4798      	blx	r3
 8008af8:	3601      	adds	r6, #1
 8008afa:	e7f2      	b.n	8008ae2 <__libc_init_array+0x1e>
 8008afc:	0800c778 	.word	0x0800c778
 8008b00:	0800c778 	.word	0x0800c778
 8008b04:	0800c778 	.word	0x0800c778
 8008b08:	0800c77c 	.word	0x0800c77c

08008b0c <__retarget_lock_init_recursive>:
 8008b0c:	4770      	bx	lr

08008b0e <__retarget_lock_acquire_recursive>:
 8008b0e:	4770      	bx	lr

08008b10 <__retarget_lock_release_recursive>:
 8008b10:	4770      	bx	lr
	...

08008b14 <nanf>:
 8008b14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008b1c <nanf+0x8>
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	7fc00000 	.word	0x7fc00000

08008b20 <quorem>:
 8008b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	6903      	ldr	r3, [r0, #16]
 8008b26:	690c      	ldr	r4, [r1, #16]
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	db7e      	blt.n	8008c2c <quorem+0x10c>
 8008b2e:	3c01      	subs	r4, #1
 8008b30:	f101 0814 	add.w	r8, r1, #20
 8008b34:	00a3      	lsls	r3, r4, #2
 8008b36:	f100 0514 	add.w	r5, r0, #20
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b52:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b56:	d32e      	bcc.n	8008bb6 <quorem+0x96>
 8008b58:	f04f 0a00 	mov.w	sl, #0
 8008b5c:	46c4      	mov	ip, r8
 8008b5e:	46ae      	mov	lr, r5
 8008b60:	46d3      	mov	fp, sl
 8008b62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b66:	b298      	uxth	r0, r3
 8008b68:	fb06 a000 	mla	r0, r6, r0, sl
 8008b6c:	0c02      	lsrs	r2, r0, #16
 8008b6e:	0c1b      	lsrs	r3, r3, #16
 8008b70:	fb06 2303 	mla	r3, r6, r3, r2
 8008b74:	f8de 2000 	ldr.w	r2, [lr]
 8008b78:	b280      	uxth	r0, r0
 8008b7a:	b292      	uxth	r2, r2
 8008b7c:	1a12      	subs	r2, r2, r0
 8008b7e:	445a      	add	r2, fp
 8008b80:	f8de 0000 	ldr.w	r0, [lr]
 8008b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b92:	b292      	uxth	r2, r2
 8008b94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b98:	45e1      	cmp	r9, ip
 8008b9a:	f84e 2b04 	str.w	r2, [lr], #4
 8008b9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ba2:	d2de      	bcs.n	8008b62 <quorem+0x42>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	58eb      	ldr	r3, [r5, r3]
 8008ba8:	b92b      	cbnz	r3, 8008bb6 <quorem+0x96>
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	d32f      	bcc.n	8008c14 <quorem+0xf4>
 8008bb4:	613c      	str	r4, [r7, #16]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f001 f9c2 	bl	8009f40 <__mcmp>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	db25      	blt.n	8008c0c <quorem+0xec>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bc8:	f8d1 c000 	ldr.w	ip, [r1]
 8008bcc:	fa1f fe82 	uxth.w	lr, r2
 8008bd0:	fa1f f38c 	uxth.w	r3, ip
 8008bd4:	eba3 030e 	sub.w	r3, r3, lr
 8008bd8:	4403      	add	r3, r0
 8008bda:	0c12      	lsrs	r2, r2, #16
 8008bdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008be0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bea:	45c1      	cmp	r9, r8
 8008bec:	f841 3b04 	str.w	r3, [r1], #4
 8008bf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bf4:	d2e6      	bcs.n	8008bc4 <quorem+0xa4>
 8008bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bfe:	b922      	cbnz	r2, 8008c0a <quorem+0xea>
 8008c00:	3b04      	subs	r3, #4
 8008c02:	429d      	cmp	r5, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	d30b      	bcc.n	8008c20 <quorem+0x100>
 8008c08:	613c      	str	r4, [r7, #16]
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	b003      	add	sp, #12
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	3b04      	subs	r3, #4
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d1cb      	bne.n	8008bb4 <quorem+0x94>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	e7c6      	b.n	8008bae <quorem+0x8e>
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	3b04      	subs	r3, #4
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	d1ef      	bne.n	8008c08 <quorem+0xe8>
 8008c28:	3c01      	subs	r4, #1
 8008c2a:	e7ea      	b.n	8008c02 <quorem+0xe2>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	e7ee      	b.n	8008c0e <quorem+0xee>

08008c30 <_dtoa_r>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	69c7      	ldr	r7, [r0, #28]
 8008c36:	b099      	sub	sp, #100	@ 0x64
 8008c38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c3c:	ec55 4b10 	vmov	r4, r5, d0
 8008c40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c44:	4683      	mov	fp, r0
 8008c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c4a:	b97f      	cbnz	r7, 8008c6c <_dtoa_r+0x3c>
 8008c4c:	2010      	movs	r0, #16
 8008c4e:	f000 fdfd 	bl	800984c <malloc>
 8008c52:	4602      	mov	r2, r0
 8008c54:	f8cb 001c 	str.w	r0, [fp, #28]
 8008c58:	b920      	cbnz	r0, 8008c64 <_dtoa_r+0x34>
 8008c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8008ef8 <_dtoa_r+0x2c8>)
 8008c5c:	21ef      	movs	r1, #239	@ 0xef
 8008c5e:	48a7      	ldr	r0, [pc, #668]	@ (8008efc <_dtoa_r+0x2cc>)
 8008c60:	f002 fc36 	bl	800b4d0 <__assert_func>
 8008c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c68:	6007      	str	r7, [r0, #0]
 8008c6a:	60c7      	str	r7, [r0, #12]
 8008c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	b159      	cbz	r1, 8008c8c <_dtoa_r+0x5c>
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	604a      	str	r2, [r1, #4]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4093      	lsls	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
 8008c7e:	4658      	mov	r0, fp
 8008c80:	f000 feda 	bl	8009a38 <_Bfree>
 8008c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	1e2b      	subs	r3, r5, #0
 8008c8e:	bfb9      	ittee	lt
 8008c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c94:	9303      	strlt	r3, [sp, #12]
 8008c96:	2300      	movge	r3, #0
 8008c98:	6033      	strge	r3, [r6, #0]
 8008c9a:	9f03      	ldr	r7, [sp, #12]
 8008c9c:	4b98      	ldr	r3, [pc, #608]	@ (8008f00 <_dtoa_r+0x2d0>)
 8008c9e:	bfbc      	itt	lt
 8008ca0:	2201      	movlt	r2, #1
 8008ca2:	6032      	strlt	r2, [r6, #0]
 8008ca4:	43bb      	bics	r3, r7
 8008ca6:	d112      	bne.n	8008cce <_dtoa_r+0x9e>
 8008ca8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cb4:	4323      	orrs	r3, r4
 8008cb6:	f000 854d 	beq.w	8009754 <_dtoa_r+0xb24>
 8008cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f14 <_dtoa_r+0x2e4>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 854f 	beq.w	8009764 <_dtoa_r+0xb34>
 8008cc6:	f10a 0303 	add.w	r3, sl, #3
 8008cca:	f000 bd49 	b.w	8009760 <_dtoa_r+0xb30>
 8008cce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	ec51 0b17 	vmov	r0, r1, d7
 8008cd8:	2300      	movs	r3, #0
 8008cda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008cde:	f7f7 ff03 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	b158      	cbz	r0, 8008cfe <_dtoa_r+0xce>
 8008ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ce8:	2301      	movs	r3, #1
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cee:	b113      	cbz	r3, 8008cf6 <_dtoa_r+0xc6>
 8008cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cf2:	4b84      	ldr	r3, [pc, #528]	@ (8008f04 <_dtoa_r+0x2d4>)
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008f18 <_dtoa_r+0x2e8>
 8008cfa:	f000 bd33 	b.w	8009764 <_dtoa_r+0xb34>
 8008cfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d02:	aa16      	add	r2, sp, #88	@ 0x58
 8008d04:	a917      	add	r1, sp, #92	@ 0x5c
 8008d06:	4658      	mov	r0, fp
 8008d08:	f001 fa3a 	bl	800a180 <__d2b>
 8008d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d10:	4681      	mov	r9, r0
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d077      	beq.n	8008e06 <_dtoa_r+0x1d6>
 8008d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d30:	4619      	mov	r1, r3
 8008d32:	2200      	movs	r2, #0
 8008d34:	4b74      	ldr	r3, [pc, #464]	@ (8008f08 <_dtoa_r+0x2d8>)
 8008d36:	f7f7 fab7 	bl	80002a8 <__aeabi_dsub>
 8008d3a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ee0 <_dtoa_r+0x2b0>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 fc6a 	bl	8000618 <__aeabi_dmul>
 8008d44:	a368      	add	r3, pc, #416	@ (adr r3, 8008ee8 <_dtoa_r+0x2b8>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 faaf 	bl	80002ac <__adddf3>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	460d      	mov	r5, r1
 8008d54:	f7f7 fbf6 	bl	8000544 <__aeabi_i2d>
 8008d58:	a365      	add	r3, pc, #404	@ (adr r3, 8008ef0 <_dtoa_r+0x2c0>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fc5b 	bl	8000618 <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fa9f 	bl	80002ac <__adddf3>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	f7f7 ff01 	bl	8000b78 <__aeabi_d2iz>
 8008d76:	2200      	movs	r2, #0
 8008d78:	4607      	mov	r7, r0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 febc 	bl	8000afc <__aeabi_dcmplt>
 8008d84:	b140      	cbz	r0, 8008d98 <_dtoa_r+0x168>
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7f7 fbdc 	bl	8000544 <__aeabi_i2d>
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f7f7 feaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d94:	b900      	cbnz	r0, 8008d98 <_dtoa_r+0x168>
 8008d96:	3f01      	subs	r7, #1
 8008d98:	2f16      	cmp	r7, #22
 8008d9a:	d851      	bhi.n	8008e40 <_dtoa_r+0x210>
 8008d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8008f0c <_dtoa_r+0x2dc>)
 8008d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008daa:	f7f7 fea7 	bl	8000afc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d048      	beq.n	8008e44 <_dtoa_r+0x214>
 8008db2:	3f01      	subs	r7, #1
 8008db4:	2300      	movs	r3, #0
 8008db6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008db8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008dba:	1b9b      	subs	r3, r3, r6
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	bf44      	itt	mi
 8008dc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008dc4:	2300      	movmi	r3, #0
 8008dc6:	9208      	str	r2, [sp, #32]
 8008dc8:	bf54      	ite	pl
 8008dca:	f04f 0800 	movpl.w	r8, #0
 8008dce:	9308      	strmi	r3, [sp, #32]
 8008dd0:	2f00      	cmp	r7, #0
 8008dd2:	db39      	blt.n	8008e48 <_dtoa_r+0x218>
 8008dd4:	9b08      	ldr	r3, [sp, #32]
 8008dd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008dd8:	443b      	add	r3, r7
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de2:	2b09      	cmp	r3, #9
 8008de4:	d864      	bhi.n	8008eb0 <_dtoa_r+0x280>
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	bfc4      	itt	gt
 8008dea:	3b04      	subgt	r3, #4
 8008dec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df0:	f1a3 0302 	sub.w	r3, r3, #2
 8008df4:	bfcc      	ite	gt
 8008df6:	2400      	movgt	r4, #0
 8008df8:	2401      	movle	r4, #1
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d863      	bhi.n	8008ec6 <_dtoa_r+0x296>
 8008dfe:	e8df f003 	tbb	[pc, r3]
 8008e02:	372a      	.short	0x372a
 8008e04:	5535      	.short	0x5535
 8008e06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e0a:	441e      	add	r6, r3
 8008e0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e10:	2b20      	cmp	r3, #32
 8008e12:	bfc1      	itttt	gt
 8008e14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e18:	409f      	lslgt	r7, r3
 8008e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e22:	bfd6      	itet	le
 8008e24:	f1c3 0320 	rsble	r3, r3, #32
 8008e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8008e30:	f7f7 fb78 	bl	8000524 <__aeabi_ui2d>
 8008e34:	2201      	movs	r2, #1
 8008e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e3a:	3e01      	subs	r6, #1
 8008e3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e3e:	e777      	b.n	8008d30 <_dtoa_r+0x100>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7b8      	b.n	8008db6 <_dtoa_r+0x186>
 8008e44:	9012      	str	r0, [sp, #72]	@ 0x48
 8008e46:	e7b7      	b.n	8008db8 <_dtoa_r+0x188>
 8008e48:	427b      	negs	r3, r7
 8008e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	eba8 0807 	sub.w	r8, r8, r7
 8008e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e54:	e7c4      	b.n	8008de0 <_dtoa_r+0x1b0>
 8008e56:	2300      	movs	r3, #0
 8008e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dc35      	bgt.n	8008ecc <_dtoa_r+0x29c>
 8008e60:	2301      	movs	r3, #1
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	9307      	str	r3, [sp, #28]
 8008e66:	461a      	mov	r2, r3
 8008e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e6a:	e00b      	b.n	8008e84 <_dtoa_r+0x254>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e7f3      	b.n	8008e58 <_dtoa_r+0x228>
 8008e70:	2300      	movs	r3, #0
 8008e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	bfb8      	it	lt
 8008e82:	2301      	movlt	r3, #1
 8008e84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2204      	movs	r2, #4
 8008e8c:	f102 0514 	add.w	r5, r2, #20
 8008e90:	429d      	cmp	r5, r3
 8008e92:	d91f      	bls.n	8008ed4 <_dtoa_r+0x2a4>
 8008e94:	6041      	str	r1, [r0, #4]
 8008e96:	4658      	mov	r0, fp
 8008e98:	f000 fd8e 	bl	80099b8 <_Balloc>
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d13c      	bne.n	8008f1c <_dtoa_r+0x2ec>
 8008ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f10 <_dtoa_r+0x2e0>)
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008eaa:	e6d8      	b.n	8008c5e <_dtoa_r+0x2e>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e7e0      	b.n	8008e72 <_dtoa_r+0x242>
 8008eb0:	2401      	movs	r4, #1
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	9307      	str	r3, [sp, #28]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2312      	movs	r3, #18
 8008ec4:	e7d0      	b.n	8008e68 <_dtoa_r+0x238>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eca:	e7f5      	b.n	8008eb8 <_dtoa_r+0x288>
 8008ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	9307      	str	r3, [sp, #28]
 8008ed2:	e7d7      	b.n	8008e84 <_dtoa_r+0x254>
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	0052      	lsls	r2, r2, #1
 8008ed8:	e7d8      	b.n	8008e8c <_dtoa_r+0x25c>
 8008eda:	bf00      	nop
 8008edc:	f3af 8000 	nop.w
 8008ee0:	636f4361 	.word	0x636f4361
 8008ee4:	3fd287a7 	.word	0x3fd287a7
 8008ee8:	8b60c8b3 	.word	0x8b60c8b3
 8008eec:	3fc68a28 	.word	0x3fc68a28
 8008ef0:	509f79fb 	.word	0x509f79fb
 8008ef4:	3fd34413 	.word	0x3fd34413
 8008ef8:	0800c386 	.word	0x0800c386
 8008efc:	0800c39d 	.word	0x0800c39d
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	0800c351 	.word	0x0800c351
 8008f08:	3ff80000 	.word	0x3ff80000
 8008f0c:	0800c498 	.word	0x0800c498
 8008f10:	0800c3f5 	.word	0x0800c3f5
 8008f14:	0800c382 	.word	0x0800c382
 8008f18:	0800c350 	.word	0x0800c350
 8008f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f20:	6018      	str	r0, [r3, #0]
 8008f22:	9b07      	ldr	r3, [sp, #28]
 8008f24:	2b0e      	cmp	r3, #14
 8008f26:	f200 80a4 	bhi.w	8009072 <_dtoa_r+0x442>
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	f000 80a1 	beq.w	8009072 <_dtoa_r+0x442>
 8008f30:	2f00      	cmp	r7, #0
 8008f32:	dd33      	ble.n	8008f9c <_dtoa_r+0x36c>
 8008f34:	4bad      	ldr	r3, [pc, #692]	@ (80091ec <_dtoa_r+0x5bc>)
 8008f36:	f007 020f 	and.w	r2, r7, #15
 8008f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3e:	ed93 7b00 	vldr	d7, [r3]
 8008f42:	05f8      	lsls	r0, r7, #23
 8008f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f4c:	d516      	bpl.n	8008f7c <_dtoa_r+0x34c>
 8008f4e:	4ba8      	ldr	r3, [pc, #672]	@ (80091f0 <_dtoa_r+0x5c0>)
 8008f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f58:	f7f7 fc88 	bl	800086c <__aeabi_ddiv>
 8008f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f60:	f004 040f 	and.w	r4, r4, #15
 8008f64:	2603      	movs	r6, #3
 8008f66:	4da2      	ldr	r5, [pc, #648]	@ (80091f0 <_dtoa_r+0x5c0>)
 8008f68:	b954      	cbnz	r4, 8008f80 <_dtoa_r+0x350>
 8008f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f72:	f7f7 fc7b 	bl	800086c <__aeabi_ddiv>
 8008f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f7a:	e028      	b.n	8008fce <_dtoa_r+0x39e>
 8008f7c:	2602      	movs	r6, #2
 8008f7e:	e7f2      	b.n	8008f66 <_dtoa_r+0x336>
 8008f80:	07e1      	lsls	r1, r4, #31
 8008f82:	d508      	bpl.n	8008f96 <_dtoa_r+0x366>
 8008f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f8c:	f7f7 fb44 	bl	8000618 <__aeabi_dmul>
 8008f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f94:	3601      	adds	r6, #1
 8008f96:	1064      	asrs	r4, r4, #1
 8008f98:	3508      	adds	r5, #8
 8008f9a:	e7e5      	b.n	8008f68 <_dtoa_r+0x338>
 8008f9c:	f000 80d2 	beq.w	8009144 <_dtoa_r+0x514>
 8008fa0:	427c      	negs	r4, r7
 8008fa2:	4b92      	ldr	r3, [pc, #584]	@ (80091ec <_dtoa_r+0x5bc>)
 8008fa4:	4d92      	ldr	r5, [pc, #584]	@ (80091f0 <_dtoa_r+0x5c0>)
 8008fa6:	f004 020f 	and.w	r2, r4, #15
 8008faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fb6:	f7f7 fb2f 	bl	8000618 <__aeabi_dmul>
 8008fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fbe:	1124      	asrs	r4, r4, #4
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2602      	movs	r6, #2
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	f040 80b2 	bne.w	800912e <_dtoa_r+0x4fe>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1d3      	bne.n	8008f76 <_dtoa_r+0x346>
 8008fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80b7 	beq.w	8009148 <_dtoa_r+0x518>
 8008fda:	4b86      	ldr	r3, [pc, #536]	@ (80091f4 <_dtoa_r+0x5c4>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	f7f7 fd8b 	bl	8000afc <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f000 80ae 	beq.w	8009148 <_dtoa_r+0x518>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 80aa 	beq.w	8009148 <_dtoa_r+0x518>
 8008ff4:	9b00      	ldr	r3, [sp, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dd37      	ble.n	800906a <_dtoa_r+0x43a>
 8008ffa:	1e7b      	subs	r3, r7, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	4620      	mov	r0, r4
 8009000:	4b7d      	ldr	r3, [pc, #500]	@ (80091f8 <_dtoa_r+0x5c8>)
 8009002:	2200      	movs	r2, #0
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 fb07 	bl	8000618 <__aeabi_dmul>
 800900a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800900e:	9c00      	ldr	r4, [sp, #0]
 8009010:	3601      	adds	r6, #1
 8009012:	4630      	mov	r0, r6
 8009014:	f7f7 fa96 	bl	8000544 <__aeabi_i2d>
 8009018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901c:	f7f7 fafc 	bl	8000618 <__aeabi_dmul>
 8009020:	4b76      	ldr	r3, [pc, #472]	@ (80091fc <_dtoa_r+0x5cc>)
 8009022:	2200      	movs	r2, #0
 8009024:	f7f7 f942 	bl	80002ac <__adddf3>
 8009028:	4605      	mov	r5, r0
 800902a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800902e:	2c00      	cmp	r4, #0
 8009030:	f040 808d 	bne.w	800914e <_dtoa_r+0x51e>
 8009034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009038:	4b71      	ldr	r3, [pc, #452]	@ (8009200 <_dtoa_r+0x5d0>)
 800903a:	2200      	movs	r2, #0
 800903c:	f7f7 f934 	bl	80002a8 <__aeabi_dsub>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009048:	462a      	mov	r2, r5
 800904a:	4633      	mov	r3, r6
 800904c:	f7f7 fd74 	bl	8000b38 <__aeabi_dcmpgt>
 8009050:	2800      	cmp	r0, #0
 8009052:	f040 828b 	bne.w	800956c <_dtoa_r+0x93c>
 8009056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800905a:	462a      	mov	r2, r5
 800905c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009060:	f7f7 fd4c 	bl	8000afc <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 8128 	bne.w	80092ba <_dtoa_r+0x68a>
 800906a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800906e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009074:	2b00      	cmp	r3, #0
 8009076:	f2c0 815a 	blt.w	800932e <_dtoa_r+0x6fe>
 800907a:	2f0e      	cmp	r7, #14
 800907c:	f300 8157 	bgt.w	800932e <_dtoa_r+0x6fe>
 8009080:	4b5a      	ldr	r3, [pc, #360]	@ (80091ec <_dtoa_r+0x5bc>)
 8009082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009086:	ed93 7b00 	vldr	d7, [r3]
 800908a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	ed8d 7b00 	vstr	d7, [sp]
 8009092:	da03      	bge.n	800909c <_dtoa_r+0x46c>
 8009094:	9b07      	ldr	r3, [sp, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f340 8101 	ble.w	800929e <_dtoa_r+0x66e>
 800909c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090a0:	4656      	mov	r6, sl
 80090a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 fbdf 	bl	800086c <__aeabi_ddiv>
 80090ae:	f7f7 fd63 	bl	8000b78 <__aeabi_d2iz>
 80090b2:	4680      	mov	r8, r0
 80090b4:	f7f7 fa46 	bl	8000544 <__aeabi_i2d>
 80090b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090bc:	f7f7 faac 	bl	8000618 <__aeabi_dmul>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090cc:	f7f7 f8ec 	bl	80002a8 <__aeabi_dsub>
 80090d0:	f806 4b01 	strb.w	r4, [r6], #1
 80090d4:	9d07      	ldr	r5, [sp, #28]
 80090d6:	eba6 040a 	sub.w	r4, r6, sl
 80090da:	42a5      	cmp	r5, r4
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	f040 8117 	bne.w	8009312 <_dtoa_r+0x6e2>
 80090e4:	f7f7 f8e2 	bl	80002ac <__adddf3>
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	f7f7 fd22 	bl	8000b38 <__aeabi_dcmpgt>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f040 80f9 	bne.w	80092ec <_dtoa_r+0x6bc>
 80090fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090fe:	4620      	mov	r0, r4
 8009100:	4629      	mov	r1, r5
 8009102:	f7f7 fcf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009106:	b118      	cbz	r0, 8009110 <_dtoa_r+0x4e0>
 8009108:	f018 0f01 	tst.w	r8, #1
 800910c:	f040 80ee 	bne.w	80092ec <_dtoa_r+0x6bc>
 8009110:	4649      	mov	r1, r9
 8009112:	4658      	mov	r0, fp
 8009114:	f000 fc90 	bl	8009a38 <_Bfree>
 8009118:	2300      	movs	r3, #0
 800911a:	7033      	strb	r3, [r6, #0]
 800911c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800911e:	3701      	adds	r7, #1
 8009120:	601f      	str	r7, [r3, #0]
 8009122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 831d 	beq.w	8009764 <_dtoa_r+0xb34>
 800912a:	601e      	str	r6, [r3, #0]
 800912c:	e31a      	b.n	8009764 <_dtoa_r+0xb34>
 800912e:	07e2      	lsls	r2, r4, #31
 8009130:	d505      	bpl.n	800913e <_dtoa_r+0x50e>
 8009132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009136:	f7f7 fa6f 	bl	8000618 <__aeabi_dmul>
 800913a:	3601      	adds	r6, #1
 800913c:	2301      	movs	r3, #1
 800913e:	1064      	asrs	r4, r4, #1
 8009140:	3508      	adds	r5, #8
 8009142:	e73f      	b.n	8008fc4 <_dtoa_r+0x394>
 8009144:	2602      	movs	r6, #2
 8009146:	e742      	b.n	8008fce <_dtoa_r+0x39e>
 8009148:	9c07      	ldr	r4, [sp, #28]
 800914a:	9704      	str	r7, [sp, #16]
 800914c:	e761      	b.n	8009012 <_dtoa_r+0x3e2>
 800914e:	4b27      	ldr	r3, [pc, #156]	@ (80091ec <_dtoa_r+0x5bc>)
 8009150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009156:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800915a:	4454      	add	r4, sl
 800915c:	2900      	cmp	r1, #0
 800915e:	d053      	beq.n	8009208 <_dtoa_r+0x5d8>
 8009160:	4928      	ldr	r1, [pc, #160]	@ (8009204 <_dtoa_r+0x5d4>)
 8009162:	2000      	movs	r0, #0
 8009164:	f7f7 fb82 	bl	800086c <__aeabi_ddiv>
 8009168:	4633      	mov	r3, r6
 800916a:	462a      	mov	r2, r5
 800916c:	f7f7 f89c 	bl	80002a8 <__aeabi_dsub>
 8009170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009174:	4656      	mov	r6, sl
 8009176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800917a:	f7f7 fcfd 	bl	8000b78 <__aeabi_d2iz>
 800917e:	4605      	mov	r5, r0
 8009180:	f7f7 f9e0 	bl	8000544 <__aeabi_i2d>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800918c:	f7f7 f88c 	bl	80002a8 <__aeabi_dsub>
 8009190:	3530      	adds	r5, #48	@ 0x30
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800919a:	f806 5b01 	strb.w	r5, [r6], #1
 800919e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091a2:	f7f7 fcab 	bl	8000afc <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d171      	bne.n	800928e <_dtoa_r+0x65e>
 80091aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ae:	4911      	ldr	r1, [pc, #68]	@ (80091f4 <_dtoa_r+0x5c4>)
 80091b0:	2000      	movs	r0, #0
 80091b2:	f7f7 f879 	bl	80002a8 <__aeabi_dsub>
 80091b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091ba:	f7f7 fc9f 	bl	8000afc <__aeabi_dcmplt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	f040 8095 	bne.w	80092ee <_dtoa_r+0x6be>
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	f43f af50 	beq.w	800906a <_dtoa_r+0x43a>
 80091ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091ce:	4b0a      	ldr	r3, [pc, #40]	@ (80091f8 <_dtoa_r+0x5c8>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	f7f7 fa21 	bl	8000618 <__aeabi_dmul>
 80091d6:	4b08      	ldr	r3, [pc, #32]	@ (80091f8 <_dtoa_r+0x5c8>)
 80091d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091dc:	2200      	movs	r2, #0
 80091de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e2:	f7f7 fa19 	bl	8000618 <__aeabi_dmul>
 80091e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ea:	e7c4      	b.n	8009176 <_dtoa_r+0x546>
 80091ec:	0800c498 	.word	0x0800c498
 80091f0:	0800c470 	.word	0x0800c470
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	40240000 	.word	0x40240000
 80091fc:	401c0000 	.word	0x401c0000
 8009200:	40140000 	.word	0x40140000
 8009204:	3fe00000 	.word	0x3fe00000
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	f7f7 fa04 	bl	8000618 <__aeabi_dmul>
 8009210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009214:	9415      	str	r4, [sp, #84]	@ 0x54
 8009216:	4656      	mov	r6, sl
 8009218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800921c:	f7f7 fcac 	bl	8000b78 <__aeabi_d2iz>
 8009220:	4605      	mov	r5, r0
 8009222:	f7f7 f98f 	bl	8000544 <__aeabi_i2d>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800922e:	f7f7 f83b 	bl	80002a8 <__aeabi_dsub>
 8009232:	3530      	adds	r5, #48	@ 0x30
 8009234:	f806 5b01 	strb.w	r5, [r6], #1
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	42a6      	cmp	r6, r4
 800923e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	d124      	bne.n	8009292 <_dtoa_r+0x662>
 8009248:	4bac      	ldr	r3, [pc, #688]	@ (80094fc <_dtoa_r+0x8cc>)
 800924a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800924e:	f7f7 f82d 	bl	80002ac <__adddf3>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	f7f7 fc6d 	bl	8000b38 <__aeabi_dcmpgt>
 800925e:	2800      	cmp	r0, #0
 8009260:	d145      	bne.n	80092ee <_dtoa_r+0x6be>
 8009262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009266:	49a5      	ldr	r1, [pc, #660]	@ (80094fc <_dtoa_r+0x8cc>)
 8009268:	2000      	movs	r0, #0
 800926a:	f7f7 f81d 	bl	80002a8 <__aeabi_dsub>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009276:	f7f7 fc41 	bl	8000afc <__aeabi_dcmplt>
 800927a:	2800      	cmp	r0, #0
 800927c:	f43f aef5 	beq.w	800906a <_dtoa_r+0x43a>
 8009280:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009282:	1e73      	subs	r3, r6, #1
 8009284:	9315      	str	r3, [sp, #84]	@ 0x54
 8009286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800928a:	2b30      	cmp	r3, #48	@ 0x30
 800928c:	d0f8      	beq.n	8009280 <_dtoa_r+0x650>
 800928e:	9f04      	ldr	r7, [sp, #16]
 8009290:	e73e      	b.n	8009110 <_dtoa_r+0x4e0>
 8009292:	4b9b      	ldr	r3, [pc, #620]	@ (8009500 <_dtoa_r+0x8d0>)
 8009294:	f7f7 f9c0 	bl	8000618 <__aeabi_dmul>
 8009298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929c:	e7bc      	b.n	8009218 <_dtoa_r+0x5e8>
 800929e:	d10c      	bne.n	80092ba <_dtoa_r+0x68a>
 80092a0:	4b98      	ldr	r3, [pc, #608]	@ (8009504 <_dtoa_r+0x8d4>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092a8:	f7f7 f9b6 	bl	8000618 <__aeabi_dmul>
 80092ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092b0:	f7f7 fc38 	bl	8000b24 <__aeabi_dcmpge>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f000 8157 	beq.w	8009568 <_dtoa_r+0x938>
 80092ba:	2400      	movs	r4, #0
 80092bc:	4625      	mov	r5, r4
 80092be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c0:	43db      	mvns	r3, r3
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	4656      	mov	r6, sl
 80092c6:	2700      	movs	r7, #0
 80092c8:	4621      	mov	r1, r4
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fbb4 	bl	8009a38 <_Bfree>
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	d0dc      	beq.n	800928e <_dtoa_r+0x65e>
 80092d4:	b12f      	cbz	r7, 80092e2 <_dtoa_r+0x6b2>
 80092d6:	42af      	cmp	r7, r5
 80092d8:	d003      	beq.n	80092e2 <_dtoa_r+0x6b2>
 80092da:	4639      	mov	r1, r7
 80092dc:	4658      	mov	r0, fp
 80092de:	f000 fbab 	bl	8009a38 <_Bfree>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4658      	mov	r0, fp
 80092e6:	f000 fba7 	bl	8009a38 <_Bfree>
 80092ea:	e7d0      	b.n	800928e <_dtoa_r+0x65e>
 80092ec:	9704      	str	r7, [sp, #16]
 80092ee:	4633      	mov	r3, r6
 80092f0:	461e      	mov	r6, r3
 80092f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f6:	2a39      	cmp	r2, #57	@ 0x39
 80092f8:	d107      	bne.n	800930a <_dtoa_r+0x6da>
 80092fa:	459a      	cmp	sl, r3
 80092fc:	d1f8      	bne.n	80092f0 <_dtoa_r+0x6c0>
 80092fe:	9a04      	ldr	r2, [sp, #16]
 8009300:	3201      	adds	r2, #1
 8009302:	9204      	str	r2, [sp, #16]
 8009304:	2230      	movs	r2, #48	@ 0x30
 8009306:	f88a 2000 	strb.w	r2, [sl]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	3201      	adds	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
 8009310:	e7bd      	b.n	800928e <_dtoa_r+0x65e>
 8009312:	4b7b      	ldr	r3, [pc, #492]	@ (8009500 <_dtoa_r+0x8d0>)
 8009314:	2200      	movs	r2, #0
 8009316:	f7f7 f97f 	bl	8000618 <__aeabi_dmul>
 800931a:	2200      	movs	r2, #0
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	f7f7 fbe1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009326:	2800      	cmp	r0, #0
 8009328:	f43f aebb 	beq.w	80090a2 <_dtoa_r+0x472>
 800932c:	e6f0      	b.n	8009110 <_dtoa_r+0x4e0>
 800932e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009330:	2a00      	cmp	r2, #0
 8009332:	f000 80db 	beq.w	80094ec <_dtoa_r+0x8bc>
 8009336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009338:	2a01      	cmp	r2, #1
 800933a:	f300 80bf 	bgt.w	80094bc <_dtoa_r+0x88c>
 800933e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009340:	2a00      	cmp	r2, #0
 8009342:	f000 80b7 	beq.w	80094b4 <_dtoa_r+0x884>
 8009346:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800934a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800934c:	4646      	mov	r6, r8
 800934e:	9a08      	ldr	r2, [sp, #32]
 8009350:	2101      	movs	r1, #1
 8009352:	441a      	add	r2, r3
 8009354:	4658      	mov	r0, fp
 8009356:	4498      	add	r8, r3
 8009358:	9208      	str	r2, [sp, #32]
 800935a:	f000 fc6b 	bl	8009c34 <__i2b>
 800935e:	4605      	mov	r5, r0
 8009360:	b15e      	cbz	r6, 800937a <_dtoa_r+0x74a>
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd08      	ble.n	800937a <_dtoa_r+0x74a>
 8009368:	42b3      	cmp	r3, r6
 800936a:	9a08      	ldr	r2, [sp, #32]
 800936c:	bfa8      	it	ge
 800936e:	4633      	movge	r3, r6
 8009370:	eba8 0803 	sub.w	r8, r8, r3
 8009374:	1af6      	subs	r6, r6, r3
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	9308      	str	r3, [sp, #32]
 800937a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800937c:	b1f3      	cbz	r3, 80093bc <_dtoa_r+0x78c>
 800937e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80b7 	beq.w	80094f4 <_dtoa_r+0x8c4>
 8009386:	b18c      	cbz	r4, 80093ac <_dtoa_r+0x77c>
 8009388:	4629      	mov	r1, r5
 800938a:	4622      	mov	r2, r4
 800938c:	4658      	mov	r0, fp
 800938e:	f000 fd11 	bl	8009db4 <__pow5mult>
 8009392:	464a      	mov	r2, r9
 8009394:	4601      	mov	r1, r0
 8009396:	4605      	mov	r5, r0
 8009398:	4658      	mov	r0, fp
 800939a:	f000 fc61 	bl	8009c60 <__multiply>
 800939e:	4649      	mov	r1, r9
 80093a0:	9004      	str	r0, [sp, #16]
 80093a2:	4658      	mov	r0, fp
 80093a4:	f000 fb48 	bl	8009a38 <_Bfree>
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	4699      	mov	r9, r3
 80093ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ae:	1b1a      	subs	r2, r3, r4
 80093b0:	d004      	beq.n	80093bc <_dtoa_r+0x78c>
 80093b2:	4649      	mov	r1, r9
 80093b4:	4658      	mov	r0, fp
 80093b6:	f000 fcfd 	bl	8009db4 <__pow5mult>
 80093ba:	4681      	mov	r9, r0
 80093bc:	2101      	movs	r1, #1
 80093be:	4658      	mov	r0, fp
 80093c0:	f000 fc38 	bl	8009c34 <__i2b>
 80093c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c6:	4604      	mov	r4, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 81cf 	beq.w	800976c <_dtoa_r+0xb3c>
 80093ce:	461a      	mov	r2, r3
 80093d0:	4601      	mov	r1, r0
 80093d2:	4658      	mov	r0, fp
 80093d4:	f000 fcee 	bl	8009db4 <__pow5mult>
 80093d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093da:	2b01      	cmp	r3, #1
 80093dc:	4604      	mov	r4, r0
 80093de:	f300 8095 	bgt.w	800950c <_dtoa_r+0x8dc>
 80093e2:	9b02      	ldr	r3, [sp, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 8087 	bne.w	80094f8 <_dtoa_r+0x8c8>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 8089 	bne.w	8009508 <_dtoa_r+0x8d8>
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093fc:	0d1b      	lsrs	r3, r3, #20
 80093fe:	051b      	lsls	r3, r3, #20
 8009400:	b12b      	cbz	r3, 800940e <_dtoa_r+0x7de>
 8009402:	9b08      	ldr	r3, [sp, #32]
 8009404:	3301      	adds	r3, #1
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	f108 0801 	add.w	r8, r8, #1
 800940c:	2301      	movs	r3, #1
 800940e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 81b0 	beq.w	8009778 <_dtoa_r+0xb48>
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800941e:	6918      	ldr	r0, [r3, #16]
 8009420:	f000 fbbc 	bl	8009b9c <__hi0bits>
 8009424:	f1c0 0020 	rsb	r0, r0, #32
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	4418      	add	r0, r3
 800942c:	f010 001f 	ands.w	r0, r0, #31
 8009430:	d077      	beq.n	8009522 <_dtoa_r+0x8f2>
 8009432:	f1c0 0320 	rsb	r3, r0, #32
 8009436:	2b04      	cmp	r3, #4
 8009438:	dd6b      	ble.n	8009512 <_dtoa_r+0x8e2>
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	f1c0 001c 	rsb	r0, r0, #28
 8009440:	4403      	add	r3, r0
 8009442:	4480      	add	r8, r0
 8009444:	4406      	add	r6, r0
 8009446:	9308      	str	r3, [sp, #32]
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	dd05      	ble.n	800945a <_dtoa_r+0x82a>
 800944e:	4649      	mov	r1, r9
 8009450:	4642      	mov	r2, r8
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fd08 	bl	8009e68 <__lshift>
 8009458:	4681      	mov	r9, r0
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	2b00      	cmp	r3, #0
 800945e:	dd05      	ble.n	800946c <_dtoa_r+0x83c>
 8009460:	4621      	mov	r1, r4
 8009462:	461a      	mov	r2, r3
 8009464:	4658      	mov	r0, fp
 8009466:	f000 fcff 	bl	8009e68 <__lshift>
 800946a:	4604      	mov	r4, r0
 800946c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800946e:	2b00      	cmp	r3, #0
 8009470:	d059      	beq.n	8009526 <_dtoa_r+0x8f6>
 8009472:	4621      	mov	r1, r4
 8009474:	4648      	mov	r0, r9
 8009476:	f000 fd63 	bl	8009f40 <__mcmp>
 800947a:	2800      	cmp	r0, #0
 800947c:	da53      	bge.n	8009526 <_dtoa_r+0x8f6>
 800947e:	1e7b      	subs	r3, r7, #1
 8009480:	9304      	str	r3, [sp, #16]
 8009482:	4649      	mov	r1, r9
 8009484:	2300      	movs	r3, #0
 8009486:	220a      	movs	r2, #10
 8009488:	4658      	mov	r0, fp
 800948a:	f000 faf7 	bl	8009a7c <__multadd>
 800948e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009490:	4681      	mov	r9, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8172 	beq.w	800977c <_dtoa_r+0xb4c>
 8009498:	2300      	movs	r3, #0
 800949a:	4629      	mov	r1, r5
 800949c:	220a      	movs	r2, #10
 800949e:	4658      	mov	r0, fp
 80094a0:	f000 faec 	bl	8009a7c <__multadd>
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	4605      	mov	r5, r0
 80094aa:	dc67      	bgt.n	800957c <_dtoa_r+0x94c>
 80094ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	dc41      	bgt.n	8009536 <_dtoa_r+0x906>
 80094b2:	e063      	b.n	800957c <_dtoa_r+0x94c>
 80094b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80094ba:	e746      	b.n	800934a <_dtoa_r+0x71a>
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	1e5c      	subs	r4, r3, #1
 80094c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	bfbf      	itttt	lt
 80094c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80094c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80094ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80094cc:	1ae3      	sublt	r3, r4, r3
 80094ce:	bfb4      	ite	lt
 80094d0:	18d2      	addlt	r2, r2, r3
 80094d2:	1b1c      	subge	r4, r3, r4
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	bfbc      	itt	lt
 80094d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80094da:	2400      	movlt	r4, #0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfb5      	itete	lt
 80094e0:	eba8 0603 	sublt.w	r6, r8, r3
 80094e4:	9b07      	ldrge	r3, [sp, #28]
 80094e6:	2300      	movlt	r3, #0
 80094e8:	4646      	movge	r6, r8
 80094ea:	e730      	b.n	800934e <_dtoa_r+0x71e>
 80094ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80094f0:	4646      	mov	r6, r8
 80094f2:	e735      	b.n	8009360 <_dtoa_r+0x730>
 80094f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094f6:	e75c      	b.n	80093b2 <_dtoa_r+0x782>
 80094f8:	2300      	movs	r3, #0
 80094fa:	e788      	b.n	800940e <_dtoa_r+0x7de>
 80094fc:	3fe00000 	.word	0x3fe00000
 8009500:	40240000 	.word	0x40240000
 8009504:	40140000 	.word	0x40140000
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	e780      	b.n	800940e <_dtoa_r+0x7de>
 800950c:	2300      	movs	r3, #0
 800950e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009510:	e782      	b.n	8009418 <_dtoa_r+0x7e8>
 8009512:	d099      	beq.n	8009448 <_dtoa_r+0x818>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	331c      	adds	r3, #28
 8009518:	441a      	add	r2, r3
 800951a:	4498      	add	r8, r3
 800951c:	441e      	add	r6, r3
 800951e:	9208      	str	r2, [sp, #32]
 8009520:	e792      	b.n	8009448 <_dtoa_r+0x818>
 8009522:	4603      	mov	r3, r0
 8009524:	e7f6      	b.n	8009514 <_dtoa_r+0x8e4>
 8009526:	9b07      	ldr	r3, [sp, #28]
 8009528:	9704      	str	r7, [sp, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	dc20      	bgt.n	8009570 <_dtoa_r+0x940>
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009532:	2b02      	cmp	r3, #2
 8009534:	dd1e      	ble.n	8009574 <_dtoa_r+0x944>
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f47f aec0 	bne.w	80092be <_dtoa_r+0x68e>
 800953e:	4621      	mov	r1, r4
 8009540:	2205      	movs	r2, #5
 8009542:	4658      	mov	r0, fp
 8009544:	f000 fa9a 	bl	8009a7c <__multadd>
 8009548:	4601      	mov	r1, r0
 800954a:	4604      	mov	r4, r0
 800954c:	4648      	mov	r0, r9
 800954e:	f000 fcf7 	bl	8009f40 <__mcmp>
 8009552:	2800      	cmp	r0, #0
 8009554:	f77f aeb3 	ble.w	80092be <_dtoa_r+0x68e>
 8009558:	4656      	mov	r6, sl
 800955a:	2331      	movs	r3, #49	@ 0x31
 800955c:	f806 3b01 	strb.w	r3, [r6], #1
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	e6ae      	b.n	80092c6 <_dtoa_r+0x696>
 8009568:	9c07      	ldr	r4, [sp, #28]
 800956a:	9704      	str	r7, [sp, #16]
 800956c:	4625      	mov	r5, r4
 800956e:	e7f3      	b.n	8009558 <_dtoa_r+0x928>
 8009570:	9b07      	ldr	r3, [sp, #28]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8104 	beq.w	8009784 <_dtoa_r+0xb54>
 800957c:	2e00      	cmp	r6, #0
 800957e:	dd05      	ble.n	800958c <_dtoa_r+0x95c>
 8009580:	4629      	mov	r1, r5
 8009582:	4632      	mov	r2, r6
 8009584:	4658      	mov	r0, fp
 8009586:	f000 fc6f 	bl	8009e68 <__lshift>
 800958a:	4605      	mov	r5, r0
 800958c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800958e:	2b00      	cmp	r3, #0
 8009590:	d05a      	beq.n	8009648 <_dtoa_r+0xa18>
 8009592:	6869      	ldr	r1, [r5, #4]
 8009594:	4658      	mov	r0, fp
 8009596:	f000 fa0f 	bl	80099b8 <_Balloc>
 800959a:	4606      	mov	r6, r0
 800959c:	b928      	cbnz	r0, 80095aa <_dtoa_r+0x97a>
 800959e:	4b84      	ldr	r3, [pc, #528]	@ (80097b0 <_dtoa_r+0xb80>)
 80095a0:	4602      	mov	r2, r0
 80095a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095a6:	f7ff bb5a 	b.w	8008c5e <_dtoa_r+0x2e>
 80095aa:	692a      	ldr	r2, [r5, #16]
 80095ac:	3202      	adds	r2, #2
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	f105 010c 	add.w	r1, r5, #12
 80095b4:	300c      	adds	r0, #12
 80095b6:	f001 ff75 	bl	800b4a4 <memcpy>
 80095ba:	2201      	movs	r2, #1
 80095bc:	4631      	mov	r1, r6
 80095be:	4658      	mov	r0, fp
 80095c0:	f000 fc52 	bl	8009e68 <__lshift>
 80095c4:	f10a 0301 	add.w	r3, sl, #1
 80095c8:	9307      	str	r3, [sp, #28]
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	4453      	add	r3, sl
 80095ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	462f      	mov	r7, r5
 80095d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095da:	4605      	mov	r5, r0
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	4621      	mov	r1, r4
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4648      	mov	r0, r9
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	f7ff fa9b 	bl	8008b20 <quorem>
 80095ea:	4639      	mov	r1, r7
 80095ec:	9002      	str	r0, [sp, #8]
 80095ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095f2:	4648      	mov	r0, r9
 80095f4:	f000 fca4 	bl	8009f40 <__mcmp>
 80095f8:	462a      	mov	r2, r5
 80095fa:	9008      	str	r0, [sp, #32]
 80095fc:	4621      	mov	r1, r4
 80095fe:	4658      	mov	r0, fp
 8009600:	f000 fcba 	bl	8009f78 <__mdiff>
 8009604:	68c2      	ldr	r2, [r0, #12]
 8009606:	4606      	mov	r6, r0
 8009608:	bb02      	cbnz	r2, 800964c <_dtoa_r+0xa1c>
 800960a:	4601      	mov	r1, r0
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fc97 	bl	8009f40 <__mcmp>
 8009612:	4602      	mov	r2, r0
 8009614:	4631      	mov	r1, r6
 8009616:	4658      	mov	r0, fp
 8009618:	920e      	str	r2, [sp, #56]	@ 0x38
 800961a:	f000 fa0d 	bl	8009a38 <_Bfree>
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009622:	9e07      	ldr	r6, [sp, #28]
 8009624:	ea43 0102 	orr.w	r1, r3, r2
 8009628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800962a:	4319      	orrs	r1, r3
 800962c:	d110      	bne.n	8009650 <_dtoa_r+0xa20>
 800962e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009632:	d029      	beq.n	8009688 <_dtoa_r+0xa58>
 8009634:	9b08      	ldr	r3, [sp, #32]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd02      	ble.n	8009640 <_dtoa_r+0xa10>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	f883 8000 	strb.w	r8, [r3]
 8009646:	e63f      	b.n	80092c8 <_dtoa_r+0x698>
 8009648:	4628      	mov	r0, r5
 800964a:	e7bb      	b.n	80095c4 <_dtoa_r+0x994>
 800964c:	2201      	movs	r2, #1
 800964e:	e7e1      	b.n	8009614 <_dtoa_r+0x9e4>
 8009650:	9b08      	ldr	r3, [sp, #32]
 8009652:	2b00      	cmp	r3, #0
 8009654:	db04      	blt.n	8009660 <_dtoa_r+0xa30>
 8009656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009658:	430b      	orrs	r3, r1
 800965a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800965c:	430b      	orrs	r3, r1
 800965e:	d120      	bne.n	80096a2 <_dtoa_r+0xa72>
 8009660:	2a00      	cmp	r2, #0
 8009662:	dded      	ble.n	8009640 <_dtoa_r+0xa10>
 8009664:	4649      	mov	r1, r9
 8009666:	2201      	movs	r2, #1
 8009668:	4658      	mov	r0, fp
 800966a:	f000 fbfd 	bl	8009e68 <__lshift>
 800966e:	4621      	mov	r1, r4
 8009670:	4681      	mov	r9, r0
 8009672:	f000 fc65 	bl	8009f40 <__mcmp>
 8009676:	2800      	cmp	r0, #0
 8009678:	dc03      	bgt.n	8009682 <_dtoa_r+0xa52>
 800967a:	d1e1      	bne.n	8009640 <_dtoa_r+0xa10>
 800967c:	f018 0f01 	tst.w	r8, #1
 8009680:	d0de      	beq.n	8009640 <_dtoa_r+0xa10>
 8009682:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009686:	d1d8      	bne.n	800963a <_dtoa_r+0xa0a>
 8009688:	9a00      	ldr	r2, [sp, #0]
 800968a:	2339      	movs	r3, #57	@ 0x39
 800968c:	7013      	strb	r3, [r2, #0]
 800968e:	4633      	mov	r3, r6
 8009690:	461e      	mov	r6, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009698:	2a39      	cmp	r2, #57	@ 0x39
 800969a:	d052      	beq.n	8009742 <_dtoa_r+0xb12>
 800969c:	3201      	adds	r2, #1
 800969e:	701a      	strb	r2, [r3, #0]
 80096a0:	e612      	b.n	80092c8 <_dtoa_r+0x698>
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	dd07      	ble.n	80096b6 <_dtoa_r+0xa86>
 80096a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096aa:	d0ed      	beq.n	8009688 <_dtoa_r+0xa58>
 80096ac:	9a00      	ldr	r2, [sp, #0]
 80096ae:	f108 0301 	add.w	r3, r8, #1
 80096b2:	7013      	strb	r3, [r2, #0]
 80096b4:	e608      	b.n	80092c8 <_dtoa_r+0x698>
 80096b6:	9b07      	ldr	r3, [sp, #28]
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80096be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d028      	beq.n	8009716 <_dtoa_r+0xae6>
 80096c4:	4649      	mov	r1, r9
 80096c6:	2300      	movs	r3, #0
 80096c8:	220a      	movs	r2, #10
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 f9d6 	bl	8009a7c <__multadd>
 80096d0:	42af      	cmp	r7, r5
 80096d2:	4681      	mov	r9, r0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	f04f 020a 	mov.w	r2, #10
 80096dc:	4639      	mov	r1, r7
 80096de:	4658      	mov	r0, fp
 80096e0:	d107      	bne.n	80096f2 <_dtoa_r+0xac2>
 80096e2:	f000 f9cb 	bl	8009a7c <__multadd>
 80096e6:	4607      	mov	r7, r0
 80096e8:	4605      	mov	r5, r0
 80096ea:	9b07      	ldr	r3, [sp, #28]
 80096ec:	3301      	adds	r3, #1
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	e774      	b.n	80095dc <_dtoa_r+0x9ac>
 80096f2:	f000 f9c3 	bl	8009a7c <__multadd>
 80096f6:	4629      	mov	r1, r5
 80096f8:	4607      	mov	r7, r0
 80096fa:	2300      	movs	r3, #0
 80096fc:	220a      	movs	r2, #10
 80096fe:	4658      	mov	r0, fp
 8009700:	f000 f9bc 	bl	8009a7c <__multadd>
 8009704:	4605      	mov	r5, r0
 8009706:	e7f0      	b.n	80096ea <_dtoa_r+0xaba>
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfcc      	ite	gt
 800970e:	461e      	movgt	r6, r3
 8009710:	2601      	movle	r6, #1
 8009712:	4456      	add	r6, sl
 8009714:	2700      	movs	r7, #0
 8009716:	4649      	mov	r1, r9
 8009718:	2201      	movs	r2, #1
 800971a:	4658      	mov	r0, fp
 800971c:	f000 fba4 	bl	8009e68 <__lshift>
 8009720:	4621      	mov	r1, r4
 8009722:	4681      	mov	r9, r0
 8009724:	f000 fc0c 	bl	8009f40 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	dcb0      	bgt.n	800968e <_dtoa_r+0xa5e>
 800972c:	d102      	bne.n	8009734 <_dtoa_r+0xb04>
 800972e:	f018 0f01 	tst.w	r8, #1
 8009732:	d1ac      	bne.n	800968e <_dtoa_r+0xa5e>
 8009734:	4633      	mov	r3, r6
 8009736:	461e      	mov	r6, r3
 8009738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800973c:	2a30      	cmp	r2, #48	@ 0x30
 800973e:	d0fa      	beq.n	8009736 <_dtoa_r+0xb06>
 8009740:	e5c2      	b.n	80092c8 <_dtoa_r+0x698>
 8009742:	459a      	cmp	sl, r3
 8009744:	d1a4      	bne.n	8009690 <_dtoa_r+0xa60>
 8009746:	9b04      	ldr	r3, [sp, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	2331      	movs	r3, #49	@ 0x31
 800974e:	f88a 3000 	strb.w	r3, [sl]
 8009752:	e5b9      	b.n	80092c8 <_dtoa_r+0x698>
 8009754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009756:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80097b4 <_dtoa_r+0xb84>
 800975a:	b11b      	cbz	r3, 8009764 <_dtoa_r+0xb34>
 800975c:	f10a 0308 	add.w	r3, sl, #8
 8009760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	4650      	mov	r0, sl
 8009766:	b019      	add	sp, #100	@ 0x64
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976e:	2b01      	cmp	r3, #1
 8009770:	f77f ae37 	ble.w	80093e2 <_dtoa_r+0x7b2>
 8009774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009776:	930a      	str	r3, [sp, #40]	@ 0x28
 8009778:	2001      	movs	r0, #1
 800977a:	e655      	b.n	8009428 <_dtoa_r+0x7f8>
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f77f aed6 	ble.w	8009530 <_dtoa_r+0x900>
 8009784:	4656      	mov	r6, sl
 8009786:	4621      	mov	r1, r4
 8009788:	4648      	mov	r0, r9
 800978a:	f7ff f9c9 	bl	8008b20 <quorem>
 800978e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009792:	f806 8b01 	strb.w	r8, [r6], #1
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	eba6 020a 	sub.w	r2, r6, sl
 800979c:	4293      	cmp	r3, r2
 800979e:	ddb3      	ble.n	8009708 <_dtoa_r+0xad8>
 80097a0:	4649      	mov	r1, r9
 80097a2:	2300      	movs	r3, #0
 80097a4:	220a      	movs	r2, #10
 80097a6:	4658      	mov	r0, fp
 80097a8:	f000 f968 	bl	8009a7c <__multadd>
 80097ac:	4681      	mov	r9, r0
 80097ae:	e7ea      	b.n	8009786 <_dtoa_r+0xb56>
 80097b0:	0800c3f5 	.word	0x0800c3f5
 80097b4:	0800c379 	.word	0x0800c379

080097b8 <_free_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4605      	mov	r5, r0
 80097bc:	2900      	cmp	r1, #0
 80097be:	d041      	beq.n	8009844 <_free_r+0x8c>
 80097c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c4:	1f0c      	subs	r4, r1, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bfb8      	it	lt
 80097ca:	18e4      	addlt	r4, r4, r3
 80097cc:	f000 f8e8 	bl	80099a0 <__malloc_lock>
 80097d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009848 <_free_r+0x90>)
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	b933      	cbnz	r3, 80097e4 <_free_r+0x2c>
 80097d6:	6063      	str	r3, [r4, #4]
 80097d8:	6014      	str	r4, [r2, #0]
 80097da:	4628      	mov	r0, r5
 80097dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097e0:	f000 b8e4 	b.w	80099ac <__malloc_unlock>
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d908      	bls.n	80097fa <_free_r+0x42>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	1821      	adds	r1, r4, r0
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf01      	itttt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	1809      	addeq	r1, r1, r0
 80097f6:	6021      	streq	r1, [r4, #0]
 80097f8:	e7ed      	b.n	80097d6 <_free_r+0x1e>
 80097fa:	461a      	mov	r2, r3
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	b10b      	cbz	r3, 8009804 <_free_r+0x4c>
 8009800:	42a3      	cmp	r3, r4
 8009802:	d9fa      	bls.n	80097fa <_free_r+0x42>
 8009804:	6811      	ldr	r1, [r2, #0]
 8009806:	1850      	adds	r0, r2, r1
 8009808:	42a0      	cmp	r0, r4
 800980a:	d10b      	bne.n	8009824 <_free_r+0x6c>
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	4401      	add	r1, r0
 8009810:	1850      	adds	r0, r2, r1
 8009812:	4283      	cmp	r3, r0
 8009814:	6011      	str	r1, [r2, #0]
 8009816:	d1e0      	bne.n	80097da <_free_r+0x22>
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	6053      	str	r3, [r2, #4]
 800981e:	4408      	add	r0, r1
 8009820:	6010      	str	r0, [r2, #0]
 8009822:	e7da      	b.n	80097da <_free_r+0x22>
 8009824:	d902      	bls.n	800982c <_free_r+0x74>
 8009826:	230c      	movs	r3, #12
 8009828:	602b      	str	r3, [r5, #0]
 800982a:	e7d6      	b.n	80097da <_free_r+0x22>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	1821      	adds	r1, r4, r0
 8009830:	428b      	cmp	r3, r1
 8009832:	bf04      	itt	eq
 8009834:	6819      	ldreq	r1, [r3, #0]
 8009836:	685b      	ldreq	r3, [r3, #4]
 8009838:	6063      	str	r3, [r4, #4]
 800983a:	bf04      	itt	eq
 800983c:	1809      	addeq	r1, r1, r0
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	6054      	str	r4, [r2, #4]
 8009842:	e7ca      	b.n	80097da <_free_r+0x22>
 8009844:	bd38      	pop	{r3, r4, r5, pc}
 8009846:	bf00      	nop
 8009848:	200005b4 	.word	0x200005b4

0800984c <malloc>:
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <malloc+0xc>)
 800984e:	4601      	mov	r1, r0
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	f000 b825 	b.w	80098a0 <_malloc_r>
 8009856:	bf00      	nop
 8009858:	20000028 	.word	0x20000028

0800985c <sbrk_aligned>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4e0f      	ldr	r6, [pc, #60]	@ (800989c <sbrk_aligned+0x40>)
 8009860:	460c      	mov	r4, r1
 8009862:	6831      	ldr	r1, [r6, #0]
 8009864:	4605      	mov	r5, r0
 8009866:	b911      	cbnz	r1, 800986e <sbrk_aligned+0x12>
 8009868:	f001 fe0c 	bl	800b484 <_sbrk_r>
 800986c:	6030      	str	r0, [r6, #0]
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f001 fe07 	bl	800b484 <_sbrk_r>
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	d103      	bne.n	8009882 <sbrk_aligned+0x26>
 800987a:	f04f 34ff 	mov.w	r4, #4294967295
 800987e:	4620      	mov	r0, r4
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	1cc4      	adds	r4, r0, #3
 8009884:	f024 0403 	bic.w	r4, r4, #3
 8009888:	42a0      	cmp	r0, r4
 800988a:	d0f8      	beq.n	800987e <sbrk_aligned+0x22>
 800988c:	1a21      	subs	r1, r4, r0
 800988e:	4628      	mov	r0, r5
 8009890:	f001 fdf8 	bl	800b484 <_sbrk_r>
 8009894:	3001      	adds	r0, #1
 8009896:	d1f2      	bne.n	800987e <sbrk_aligned+0x22>
 8009898:	e7ef      	b.n	800987a <sbrk_aligned+0x1e>
 800989a:	bf00      	nop
 800989c:	200005b0 	.word	0x200005b0

080098a0 <_malloc_r>:
 80098a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a4:	1ccd      	adds	r5, r1, #3
 80098a6:	f025 0503 	bic.w	r5, r5, #3
 80098aa:	3508      	adds	r5, #8
 80098ac:	2d0c      	cmp	r5, #12
 80098ae:	bf38      	it	cc
 80098b0:	250c      	movcc	r5, #12
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	4606      	mov	r6, r0
 80098b6:	db01      	blt.n	80098bc <_malloc_r+0x1c>
 80098b8:	42a9      	cmp	r1, r5
 80098ba:	d904      	bls.n	80098c6 <_malloc_r+0x26>
 80098bc:	230c      	movs	r3, #12
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	2000      	movs	r0, #0
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800999c <_malloc_r+0xfc>
 80098ca:	f000 f869 	bl	80099a0 <__malloc_lock>
 80098ce:	f8d8 3000 	ldr.w	r3, [r8]
 80098d2:	461c      	mov	r4, r3
 80098d4:	bb44      	cbnz	r4, 8009928 <_malloc_r+0x88>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff ffbf 	bl	800985c <sbrk_aligned>
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	4604      	mov	r4, r0
 80098e2:	d158      	bne.n	8009996 <_malloc_r+0xf6>
 80098e4:	f8d8 4000 	ldr.w	r4, [r8]
 80098e8:	4627      	mov	r7, r4
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	d143      	bne.n	8009976 <_malloc_r+0xd6>
 80098ee:	2c00      	cmp	r4, #0
 80098f0:	d04b      	beq.n	800998a <_malloc_r+0xea>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	4639      	mov	r1, r7
 80098f6:	4630      	mov	r0, r6
 80098f8:	eb04 0903 	add.w	r9, r4, r3
 80098fc:	f001 fdc2 	bl	800b484 <_sbrk_r>
 8009900:	4581      	cmp	r9, r0
 8009902:	d142      	bne.n	800998a <_malloc_r+0xea>
 8009904:	6821      	ldr	r1, [r4, #0]
 8009906:	1a6d      	subs	r5, r5, r1
 8009908:	4629      	mov	r1, r5
 800990a:	4630      	mov	r0, r6
 800990c:	f7ff ffa6 	bl	800985c <sbrk_aligned>
 8009910:	3001      	adds	r0, #1
 8009912:	d03a      	beq.n	800998a <_malloc_r+0xea>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	442b      	add	r3, r5
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	f8d8 3000 	ldr.w	r3, [r8]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	bb62      	cbnz	r2, 800997c <_malloc_r+0xdc>
 8009922:	f8c8 7000 	str.w	r7, [r8]
 8009926:	e00f      	b.n	8009948 <_malloc_r+0xa8>
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	1b52      	subs	r2, r2, r5
 800992c:	d420      	bmi.n	8009970 <_malloc_r+0xd0>
 800992e:	2a0b      	cmp	r2, #11
 8009930:	d917      	bls.n	8009962 <_malloc_r+0xc2>
 8009932:	1961      	adds	r1, r4, r5
 8009934:	42a3      	cmp	r3, r4
 8009936:	6025      	str	r5, [r4, #0]
 8009938:	bf18      	it	ne
 800993a:	6059      	strne	r1, [r3, #4]
 800993c:	6863      	ldr	r3, [r4, #4]
 800993e:	bf08      	it	eq
 8009940:	f8c8 1000 	streq.w	r1, [r8]
 8009944:	5162      	str	r2, [r4, r5]
 8009946:	604b      	str	r3, [r1, #4]
 8009948:	4630      	mov	r0, r6
 800994a:	f000 f82f 	bl	80099ac <__malloc_unlock>
 800994e:	f104 000b 	add.w	r0, r4, #11
 8009952:	1d23      	adds	r3, r4, #4
 8009954:	f020 0007 	bic.w	r0, r0, #7
 8009958:	1ac2      	subs	r2, r0, r3
 800995a:	bf1c      	itt	ne
 800995c:	1a1b      	subne	r3, r3, r0
 800995e:	50a3      	strne	r3, [r4, r2]
 8009960:	e7af      	b.n	80098c2 <_malloc_r+0x22>
 8009962:	6862      	ldr	r2, [r4, #4]
 8009964:	42a3      	cmp	r3, r4
 8009966:	bf0c      	ite	eq
 8009968:	f8c8 2000 	streq.w	r2, [r8]
 800996c:	605a      	strne	r2, [r3, #4]
 800996e:	e7eb      	b.n	8009948 <_malloc_r+0xa8>
 8009970:	4623      	mov	r3, r4
 8009972:	6864      	ldr	r4, [r4, #4]
 8009974:	e7ae      	b.n	80098d4 <_malloc_r+0x34>
 8009976:	463c      	mov	r4, r7
 8009978:	687f      	ldr	r7, [r7, #4]
 800997a:	e7b6      	b.n	80098ea <_malloc_r+0x4a>
 800997c:	461a      	mov	r2, r3
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	42a3      	cmp	r3, r4
 8009982:	d1fb      	bne.n	800997c <_malloc_r+0xdc>
 8009984:	2300      	movs	r3, #0
 8009986:	6053      	str	r3, [r2, #4]
 8009988:	e7de      	b.n	8009948 <_malloc_r+0xa8>
 800998a:	230c      	movs	r3, #12
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	4630      	mov	r0, r6
 8009990:	f000 f80c 	bl	80099ac <__malloc_unlock>
 8009994:	e794      	b.n	80098c0 <_malloc_r+0x20>
 8009996:	6005      	str	r5, [r0, #0]
 8009998:	e7d6      	b.n	8009948 <_malloc_r+0xa8>
 800999a:	bf00      	nop
 800999c:	200005b4 	.word	0x200005b4

080099a0 <__malloc_lock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	@ (80099a8 <__malloc_lock+0x8>)
 80099a2:	f7ff b8b4 	b.w	8008b0e <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	200005ac 	.word	0x200005ac

080099ac <__malloc_unlock>:
 80099ac:	4801      	ldr	r0, [pc, #4]	@ (80099b4 <__malloc_unlock+0x8>)
 80099ae:	f7ff b8af 	b.w	8008b10 <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	200005ac 	.word	0x200005ac

080099b8 <_Balloc>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	69c6      	ldr	r6, [r0, #28]
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	b976      	cbnz	r6, 80099e0 <_Balloc+0x28>
 80099c2:	2010      	movs	r0, #16
 80099c4:	f7ff ff42 	bl	800984c <malloc>
 80099c8:	4602      	mov	r2, r0
 80099ca:	61e0      	str	r0, [r4, #28]
 80099cc:	b920      	cbnz	r0, 80099d8 <_Balloc+0x20>
 80099ce:	4b18      	ldr	r3, [pc, #96]	@ (8009a30 <_Balloc+0x78>)
 80099d0:	4818      	ldr	r0, [pc, #96]	@ (8009a34 <_Balloc+0x7c>)
 80099d2:	216b      	movs	r1, #107	@ 0x6b
 80099d4:	f001 fd7c 	bl	800b4d0 <__assert_func>
 80099d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099dc:	6006      	str	r6, [r0, #0]
 80099de:	60c6      	str	r6, [r0, #12]
 80099e0:	69e6      	ldr	r6, [r4, #28]
 80099e2:	68f3      	ldr	r3, [r6, #12]
 80099e4:	b183      	cbz	r3, 8009a08 <_Balloc+0x50>
 80099e6:	69e3      	ldr	r3, [r4, #28]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ee:	b9b8      	cbnz	r0, 8009a20 <_Balloc+0x68>
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f605 	lsl.w	r6, r1, r5
 80099f6:	1d72      	adds	r2, r6, #5
 80099f8:	0092      	lsls	r2, r2, #2
 80099fa:	4620      	mov	r0, r4
 80099fc:	f001 fd86 	bl	800b50c <_calloc_r>
 8009a00:	b160      	cbz	r0, 8009a1c <_Balloc+0x64>
 8009a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a06:	e00e      	b.n	8009a26 <_Balloc+0x6e>
 8009a08:	2221      	movs	r2, #33	@ 0x21
 8009a0a:	2104      	movs	r1, #4
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f001 fd7d 	bl	800b50c <_calloc_r>
 8009a12:	69e3      	ldr	r3, [r4, #28]
 8009a14:	60f0      	str	r0, [r6, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e4      	bne.n	80099e6 <_Balloc+0x2e>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	6802      	ldr	r2, [r0, #0]
 8009a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a26:	2300      	movs	r3, #0
 8009a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a2c:	e7f7      	b.n	8009a1e <_Balloc+0x66>
 8009a2e:	bf00      	nop
 8009a30:	0800c386 	.word	0x0800c386
 8009a34:	0800c406 	.word	0x0800c406

08009a38 <_Bfree>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	69c6      	ldr	r6, [r0, #28]
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b976      	cbnz	r6, 8009a60 <_Bfree+0x28>
 8009a42:	2010      	movs	r0, #16
 8009a44:	f7ff ff02 	bl	800984c <malloc>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	61e8      	str	r0, [r5, #28]
 8009a4c:	b920      	cbnz	r0, 8009a58 <_Bfree+0x20>
 8009a4e:	4b09      	ldr	r3, [pc, #36]	@ (8009a74 <_Bfree+0x3c>)
 8009a50:	4809      	ldr	r0, [pc, #36]	@ (8009a78 <_Bfree+0x40>)
 8009a52:	218f      	movs	r1, #143	@ 0x8f
 8009a54:	f001 fd3c 	bl	800b4d0 <__assert_func>
 8009a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a5c:	6006      	str	r6, [r0, #0]
 8009a5e:	60c6      	str	r6, [r0, #12]
 8009a60:	b13c      	cbz	r4, 8009a72 <_Bfree+0x3a>
 8009a62:	69eb      	ldr	r3, [r5, #28]
 8009a64:	6862      	ldr	r2, [r4, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a6c:	6021      	str	r1, [r4, #0]
 8009a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	0800c386 	.word	0x0800c386
 8009a78:	0800c406 	.word	0x0800c406

08009a7c <__multadd>:
 8009a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	690d      	ldr	r5, [r1, #16]
 8009a82:	4607      	mov	r7, r0
 8009a84:	460c      	mov	r4, r1
 8009a86:	461e      	mov	r6, r3
 8009a88:	f101 0c14 	add.w	ip, r1, #20
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a92:	b299      	uxth	r1, r3
 8009a94:	fb02 6101 	mla	r1, r2, r1, r6
 8009a98:	0c1e      	lsrs	r6, r3, #16
 8009a9a:	0c0b      	lsrs	r3, r1, #16
 8009a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aa8:	4285      	cmp	r5, r0
 8009aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8009aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab2:	dcec      	bgt.n	8009a8e <__multadd+0x12>
 8009ab4:	b30e      	cbz	r6, 8009afa <__multadd+0x7e>
 8009ab6:	68a3      	ldr	r3, [r4, #8]
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc19      	bgt.n	8009af0 <__multadd+0x74>
 8009abc:	6861      	ldr	r1, [r4, #4]
 8009abe:	4638      	mov	r0, r7
 8009ac0:	3101      	adds	r1, #1
 8009ac2:	f7ff ff79 	bl	80099b8 <_Balloc>
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <__multadd+0x5a>
 8009aca:	4602      	mov	r2, r0
 8009acc:	4b0c      	ldr	r3, [pc, #48]	@ (8009b00 <__multadd+0x84>)
 8009ace:	480d      	ldr	r0, [pc, #52]	@ (8009b04 <__multadd+0x88>)
 8009ad0:	21ba      	movs	r1, #186	@ 0xba
 8009ad2:	f001 fcfd 	bl	800b4d0 <__assert_func>
 8009ad6:	6922      	ldr	r2, [r4, #16]
 8009ad8:	3202      	adds	r2, #2
 8009ada:	f104 010c 	add.w	r1, r4, #12
 8009ade:	0092      	lsls	r2, r2, #2
 8009ae0:	300c      	adds	r0, #12
 8009ae2:	f001 fcdf 	bl	800b4a4 <memcpy>
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7ff ffa5 	bl	8009a38 <_Bfree>
 8009aee:	4644      	mov	r4, r8
 8009af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af4:	3501      	adds	r5, #1
 8009af6:	615e      	str	r6, [r3, #20]
 8009af8:	6125      	str	r5, [r4, #16]
 8009afa:	4620      	mov	r0, r4
 8009afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b00:	0800c3f5 	.word	0x0800c3f5
 8009b04:	0800c406 	.word	0x0800c406

08009b08 <__s2b>:
 8009b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	4615      	mov	r5, r2
 8009b10:	461f      	mov	r7, r3
 8009b12:	2209      	movs	r2, #9
 8009b14:	3308      	adds	r3, #8
 8009b16:	4606      	mov	r6, r0
 8009b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2201      	movs	r2, #1
 8009b20:	429a      	cmp	r2, r3
 8009b22:	db09      	blt.n	8009b38 <__s2b+0x30>
 8009b24:	4630      	mov	r0, r6
 8009b26:	f7ff ff47 	bl	80099b8 <_Balloc>
 8009b2a:	b940      	cbnz	r0, 8009b3e <__s2b+0x36>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	4b19      	ldr	r3, [pc, #100]	@ (8009b94 <__s2b+0x8c>)
 8009b30:	4819      	ldr	r0, [pc, #100]	@ (8009b98 <__s2b+0x90>)
 8009b32:	21d3      	movs	r1, #211	@ 0xd3
 8009b34:	f001 fccc 	bl	800b4d0 <__assert_func>
 8009b38:	0052      	lsls	r2, r2, #1
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	e7f0      	b.n	8009b20 <__s2b+0x18>
 8009b3e:	9b08      	ldr	r3, [sp, #32]
 8009b40:	6143      	str	r3, [r0, #20]
 8009b42:	2d09      	cmp	r5, #9
 8009b44:	f04f 0301 	mov.w	r3, #1
 8009b48:	6103      	str	r3, [r0, #16]
 8009b4a:	dd16      	ble.n	8009b7a <__s2b+0x72>
 8009b4c:	f104 0909 	add.w	r9, r4, #9
 8009b50:	46c8      	mov	r8, r9
 8009b52:	442c      	add	r4, r5
 8009b54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b58:	4601      	mov	r1, r0
 8009b5a:	3b30      	subs	r3, #48	@ 0x30
 8009b5c:	220a      	movs	r2, #10
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ff8c 	bl	8009a7c <__multadd>
 8009b64:	45a0      	cmp	r8, r4
 8009b66:	d1f5      	bne.n	8009b54 <__s2b+0x4c>
 8009b68:	f1a5 0408 	sub.w	r4, r5, #8
 8009b6c:	444c      	add	r4, r9
 8009b6e:	1b2d      	subs	r5, r5, r4
 8009b70:	1963      	adds	r3, r4, r5
 8009b72:	42bb      	cmp	r3, r7
 8009b74:	db04      	blt.n	8009b80 <__s2b+0x78>
 8009b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7a:	340a      	adds	r4, #10
 8009b7c:	2509      	movs	r5, #9
 8009b7e:	e7f6      	b.n	8009b6e <__s2b+0x66>
 8009b80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b84:	4601      	mov	r1, r0
 8009b86:	3b30      	subs	r3, #48	@ 0x30
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff ff76 	bl	8009a7c <__multadd>
 8009b90:	e7ee      	b.n	8009b70 <__s2b+0x68>
 8009b92:	bf00      	nop
 8009b94:	0800c3f5 	.word	0x0800c3f5
 8009b98:	0800c406 	.word	0x0800c406

08009b9c <__hi0bits>:
 8009b9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	bf36      	itet	cc
 8009ba4:	0403      	lslcc	r3, r0, #16
 8009ba6:	2000      	movcs	r0, #0
 8009ba8:	2010      	movcc	r0, #16
 8009baa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bae:	bf3c      	itt	cc
 8009bb0:	021b      	lslcc	r3, r3, #8
 8009bb2:	3008      	addcc	r0, #8
 8009bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bb8:	bf3c      	itt	cc
 8009bba:	011b      	lslcc	r3, r3, #4
 8009bbc:	3004      	addcc	r0, #4
 8009bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc2:	bf3c      	itt	cc
 8009bc4:	009b      	lslcc	r3, r3, #2
 8009bc6:	3002      	addcc	r0, #2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	db05      	blt.n	8009bd8 <__hi0bits+0x3c>
 8009bcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bd0:	f100 0001 	add.w	r0, r0, #1
 8009bd4:	bf08      	it	eq
 8009bd6:	2020      	moveq	r0, #32
 8009bd8:	4770      	bx	lr

08009bda <__lo0bits>:
 8009bda:	6803      	ldr	r3, [r0, #0]
 8009bdc:	4602      	mov	r2, r0
 8009bde:	f013 0007 	ands.w	r0, r3, #7
 8009be2:	d00b      	beq.n	8009bfc <__lo0bits+0x22>
 8009be4:	07d9      	lsls	r1, r3, #31
 8009be6:	d421      	bmi.n	8009c2c <__lo0bits+0x52>
 8009be8:	0798      	lsls	r0, r3, #30
 8009bea:	bf49      	itett	mi
 8009bec:	085b      	lsrmi	r3, r3, #1
 8009bee:	089b      	lsrpl	r3, r3, #2
 8009bf0:	2001      	movmi	r0, #1
 8009bf2:	6013      	strmi	r3, [r2, #0]
 8009bf4:	bf5c      	itt	pl
 8009bf6:	6013      	strpl	r3, [r2, #0]
 8009bf8:	2002      	movpl	r0, #2
 8009bfa:	4770      	bx	lr
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	b909      	cbnz	r1, 8009c04 <__lo0bits+0x2a>
 8009c00:	0c1b      	lsrs	r3, r3, #16
 8009c02:	2010      	movs	r0, #16
 8009c04:	b2d9      	uxtb	r1, r3
 8009c06:	b909      	cbnz	r1, 8009c0c <__lo0bits+0x32>
 8009c08:	3008      	adds	r0, #8
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	0719      	lsls	r1, r3, #28
 8009c0e:	bf04      	itt	eq
 8009c10:	091b      	lsreq	r3, r3, #4
 8009c12:	3004      	addeq	r0, #4
 8009c14:	0799      	lsls	r1, r3, #30
 8009c16:	bf04      	itt	eq
 8009c18:	089b      	lsreq	r3, r3, #2
 8009c1a:	3002      	addeq	r0, #2
 8009c1c:	07d9      	lsls	r1, r3, #31
 8009c1e:	d403      	bmi.n	8009c28 <__lo0bits+0x4e>
 8009c20:	085b      	lsrs	r3, r3, #1
 8009c22:	f100 0001 	add.w	r0, r0, #1
 8009c26:	d003      	beq.n	8009c30 <__lo0bits+0x56>
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	4770      	bx	lr
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	4770      	bx	lr
 8009c30:	2020      	movs	r0, #32
 8009c32:	4770      	bx	lr

08009c34 <__i2b>:
 8009c34:	b510      	push	{r4, lr}
 8009c36:	460c      	mov	r4, r1
 8009c38:	2101      	movs	r1, #1
 8009c3a:	f7ff febd 	bl	80099b8 <_Balloc>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	b928      	cbnz	r0, 8009c4e <__i2b+0x1a>
 8009c42:	4b05      	ldr	r3, [pc, #20]	@ (8009c58 <__i2b+0x24>)
 8009c44:	4805      	ldr	r0, [pc, #20]	@ (8009c5c <__i2b+0x28>)
 8009c46:	f240 1145 	movw	r1, #325	@ 0x145
 8009c4a:	f001 fc41 	bl	800b4d0 <__assert_func>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	6144      	str	r4, [r0, #20]
 8009c52:	6103      	str	r3, [r0, #16]
 8009c54:	bd10      	pop	{r4, pc}
 8009c56:	bf00      	nop
 8009c58:	0800c3f5 	.word	0x0800c3f5
 8009c5c:	0800c406 	.word	0x0800c406

08009c60 <__multiply>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	4614      	mov	r4, r2
 8009c66:	690a      	ldr	r2, [r1, #16]
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	bfa8      	it	ge
 8009c6e:	4623      	movge	r3, r4
 8009c70:	460f      	mov	r7, r1
 8009c72:	bfa4      	itt	ge
 8009c74:	460c      	movge	r4, r1
 8009c76:	461f      	movge	r7, r3
 8009c78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c80:	68a3      	ldr	r3, [r4, #8]
 8009c82:	6861      	ldr	r1, [r4, #4]
 8009c84:	eb0a 0609 	add.w	r6, sl, r9
 8009c88:	42b3      	cmp	r3, r6
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	bfb8      	it	lt
 8009c8e:	3101      	addlt	r1, #1
 8009c90:	f7ff fe92 	bl	80099b8 <_Balloc>
 8009c94:	b930      	cbnz	r0, 8009ca4 <__multiply+0x44>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b44      	ldr	r3, [pc, #272]	@ (8009dac <__multiply+0x14c>)
 8009c9a:	4845      	ldr	r0, [pc, #276]	@ (8009db0 <__multiply+0x150>)
 8009c9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ca0:	f001 fc16 	bl	800b4d0 <__assert_func>
 8009ca4:	f100 0514 	add.w	r5, r0, #20
 8009ca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cac:	462b      	mov	r3, r5
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4543      	cmp	r3, r8
 8009cb2:	d321      	bcc.n	8009cf8 <__multiply+0x98>
 8009cb4:	f107 0114 	add.w	r1, r7, #20
 8009cb8:	f104 0214 	add.w	r2, r4, #20
 8009cbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009cc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	1b13      	subs	r3, r2, r4
 8009cc8:	3b15      	subs	r3, #21
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	3304      	adds	r3, #4
 8009cd0:	f104 0715 	add.w	r7, r4, #21
 8009cd4:	42ba      	cmp	r2, r7
 8009cd6:	bf38      	it	cc
 8009cd8:	2304      	movcc	r3, #4
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	9b02      	ldr	r3, [sp, #8]
 8009cde:	9103      	str	r1, [sp, #12]
 8009ce0:	428b      	cmp	r3, r1
 8009ce2:	d80c      	bhi.n	8009cfe <__multiply+0x9e>
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	dd03      	ble.n	8009cf0 <__multiply+0x90>
 8009ce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05b      	beq.n	8009da8 <__multiply+0x148>
 8009cf0:	6106      	str	r6, [r0, #16]
 8009cf2:	b005      	add	sp, #20
 8009cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	f843 2b04 	str.w	r2, [r3], #4
 8009cfc:	e7d8      	b.n	8009cb0 <__multiply+0x50>
 8009cfe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d02:	f1ba 0f00 	cmp.w	sl, #0
 8009d06:	d024      	beq.n	8009d52 <__multiply+0xf2>
 8009d08:	f104 0e14 	add.w	lr, r4, #20
 8009d0c:	46a9      	mov	r9, r5
 8009d0e:	f04f 0c00 	mov.w	ip, #0
 8009d12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d16:	f8d9 3000 	ldr.w	r3, [r9]
 8009d1a:	fa1f fb87 	uxth.w	fp, r7
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d28:	f8d9 7000 	ldr.w	r7, [r9]
 8009d2c:	4463      	add	r3, ip
 8009d2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d32:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d40:	4572      	cmp	r2, lr
 8009d42:	f849 3b04 	str.w	r3, [r9], #4
 8009d46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d4a:	d8e2      	bhi.n	8009d12 <__multiply+0xb2>
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	f845 c003 	str.w	ip, [r5, r3]
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d58:	3104      	adds	r1, #4
 8009d5a:	f1b9 0f00 	cmp.w	r9, #0
 8009d5e:	d021      	beq.n	8009da4 <__multiply+0x144>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	f104 0c14 	add.w	ip, r4, #20
 8009d66:	46ae      	mov	lr, r5
 8009d68:	f04f 0a00 	mov.w	sl, #0
 8009d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d74:	fb09 770b 	mla	r7, r9, fp, r7
 8009d78:	4457      	add	r7, sl
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d80:	f84e 3b04 	str.w	r3, [lr], #4
 8009d84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d8c:	f8be 3000 	ldrh.w	r3, [lr]
 8009d90:	fb09 330a 	mla	r3, r9, sl, r3
 8009d94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d98:	4562      	cmp	r2, ip
 8009d9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d9e:	d8e5      	bhi.n	8009d6c <__multiply+0x10c>
 8009da0:	9f01      	ldr	r7, [sp, #4]
 8009da2:	51eb      	str	r3, [r5, r7]
 8009da4:	3504      	adds	r5, #4
 8009da6:	e799      	b.n	8009cdc <__multiply+0x7c>
 8009da8:	3e01      	subs	r6, #1
 8009daa:	e79b      	b.n	8009ce4 <__multiply+0x84>
 8009dac:	0800c3f5 	.word	0x0800c3f5
 8009db0:	0800c406 	.word	0x0800c406

08009db4 <__pow5mult>:
 8009db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db8:	4615      	mov	r5, r2
 8009dba:	f012 0203 	ands.w	r2, r2, #3
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	460e      	mov	r6, r1
 8009dc2:	d007      	beq.n	8009dd4 <__pow5mult+0x20>
 8009dc4:	4c25      	ldr	r4, [pc, #148]	@ (8009e5c <__pow5mult+0xa8>)
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dce:	f7ff fe55 	bl	8009a7c <__multadd>
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	10ad      	asrs	r5, r5, #2
 8009dd6:	d03d      	beq.n	8009e54 <__pow5mult+0xa0>
 8009dd8:	69fc      	ldr	r4, [r7, #28]
 8009dda:	b97c      	cbnz	r4, 8009dfc <__pow5mult+0x48>
 8009ddc:	2010      	movs	r0, #16
 8009dde:	f7ff fd35 	bl	800984c <malloc>
 8009de2:	4602      	mov	r2, r0
 8009de4:	61f8      	str	r0, [r7, #28]
 8009de6:	b928      	cbnz	r0, 8009df4 <__pow5mult+0x40>
 8009de8:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <__pow5mult+0xac>)
 8009dea:	481e      	ldr	r0, [pc, #120]	@ (8009e64 <__pow5mult+0xb0>)
 8009dec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009df0:	f001 fb6e 	bl	800b4d0 <__assert_func>
 8009df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009df8:	6004      	str	r4, [r0, #0]
 8009dfa:	60c4      	str	r4, [r0, #12]
 8009dfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e04:	b94c      	cbnz	r4, 8009e1a <__pow5mult+0x66>
 8009e06:	f240 2171 	movw	r1, #625	@ 0x271
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f7ff ff12 	bl	8009c34 <__i2b>
 8009e10:	2300      	movs	r3, #0
 8009e12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e16:	4604      	mov	r4, r0
 8009e18:	6003      	str	r3, [r0, #0]
 8009e1a:	f04f 0900 	mov.w	r9, #0
 8009e1e:	07eb      	lsls	r3, r5, #31
 8009e20:	d50a      	bpl.n	8009e38 <__pow5mult+0x84>
 8009e22:	4631      	mov	r1, r6
 8009e24:	4622      	mov	r2, r4
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7ff ff1a 	bl	8009c60 <__multiply>
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4680      	mov	r8, r0
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff fe01 	bl	8009a38 <_Bfree>
 8009e36:	4646      	mov	r6, r8
 8009e38:	106d      	asrs	r5, r5, #1
 8009e3a:	d00b      	beq.n	8009e54 <__pow5mult+0xa0>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	b938      	cbnz	r0, 8009e50 <__pow5mult+0x9c>
 8009e40:	4622      	mov	r2, r4
 8009e42:	4621      	mov	r1, r4
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff ff0b 	bl	8009c60 <__multiply>
 8009e4a:	6020      	str	r0, [r4, #0]
 8009e4c:	f8c0 9000 	str.w	r9, [r0]
 8009e50:	4604      	mov	r4, r0
 8009e52:	e7e4      	b.n	8009e1e <__pow5mult+0x6a>
 8009e54:	4630      	mov	r0, r6
 8009e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800c460 	.word	0x0800c460
 8009e60:	0800c386 	.word	0x0800c386
 8009e64:	0800c406 	.word	0x0800c406

08009e68 <__lshift>:
 8009e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	6849      	ldr	r1, [r1, #4]
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	4607      	mov	r7, r0
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e80:	f108 0601 	add.w	r6, r8, #1
 8009e84:	42b3      	cmp	r3, r6
 8009e86:	db0b      	blt.n	8009ea0 <__lshift+0x38>
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff fd95 	bl	80099b8 <_Balloc>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	b948      	cbnz	r0, 8009ea6 <__lshift+0x3e>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4b28      	ldr	r3, [pc, #160]	@ (8009f38 <__lshift+0xd0>)
 8009e96:	4829      	ldr	r0, [pc, #164]	@ (8009f3c <__lshift+0xd4>)
 8009e98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e9c:	f001 fb18 	bl	800b4d0 <__assert_func>
 8009ea0:	3101      	adds	r1, #1
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	e7ee      	b.n	8009e84 <__lshift+0x1c>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f100 0114 	add.w	r1, r0, #20
 8009eac:	f100 0210 	add.w	r2, r0, #16
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	4553      	cmp	r3, sl
 8009eb4:	db33      	blt.n	8009f1e <__lshift+0xb6>
 8009eb6:	6920      	ldr	r0, [r4, #16]
 8009eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ebc:	f104 0314 	add.w	r3, r4, #20
 8009ec0:	f019 091f 	ands.w	r9, r9, #31
 8009ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ecc:	d02b      	beq.n	8009f26 <__lshift+0xbe>
 8009ece:	f1c9 0e20 	rsb	lr, r9, #32
 8009ed2:	468a      	mov	sl, r1
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	fa00 f009 	lsl.w	r0, r0, r9
 8009edc:	4310      	orrs	r0, r2
 8009ede:	f84a 0b04 	str.w	r0, [sl], #4
 8009ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee6:	459c      	cmp	ip, r3
 8009ee8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009eec:	d8f3      	bhi.n	8009ed6 <__lshift+0x6e>
 8009eee:	ebac 0304 	sub.w	r3, ip, r4
 8009ef2:	3b15      	subs	r3, #21
 8009ef4:	f023 0303 	bic.w	r3, r3, #3
 8009ef8:	3304      	adds	r3, #4
 8009efa:	f104 0015 	add.w	r0, r4, #21
 8009efe:	4584      	cmp	ip, r0
 8009f00:	bf38      	it	cc
 8009f02:	2304      	movcc	r3, #4
 8009f04:	50ca      	str	r2, [r1, r3]
 8009f06:	b10a      	cbz	r2, 8009f0c <__lshift+0xa4>
 8009f08:	f108 0602 	add.w	r6, r8, #2
 8009f0c:	3e01      	subs	r6, #1
 8009f0e:	4638      	mov	r0, r7
 8009f10:	612e      	str	r6, [r5, #16]
 8009f12:	4621      	mov	r1, r4
 8009f14:	f7ff fd90 	bl	8009a38 <_Bfree>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f22:	3301      	adds	r3, #1
 8009f24:	e7c5      	b.n	8009eb2 <__lshift+0x4a>
 8009f26:	3904      	subs	r1, #4
 8009f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f30:	459c      	cmp	ip, r3
 8009f32:	d8f9      	bhi.n	8009f28 <__lshift+0xc0>
 8009f34:	e7ea      	b.n	8009f0c <__lshift+0xa4>
 8009f36:	bf00      	nop
 8009f38:	0800c3f5 	.word	0x0800c3f5
 8009f3c:	0800c406 	.word	0x0800c406

08009f40 <__mcmp>:
 8009f40:	690a      	ldr	r2, [r1, #16]
 8009f42:	4603      	mov	r3, r0
 8009f44:	6900      	ldr	r0, [r0, #16]
 8009f46:	1a80      	subs	r0, r0, r2
 8009f48:	b530      	push	{r4, r5, lr}
 8009f4a:	d10e      	bne.n	8009f6a <__mcmp+0x2a>
 8009f4c:	3314      	adds	r3, #20
 8009f4e:	3114      	adds	r1, #20
 8009f50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f60:	4295      	cmp	r5, r2
 8009f62:	d003      	beq.n	8009f6c <__mcmp+0x2c>
 8009f64:	d205      	bcs.n	8009f72 <__mcmp+0x32>
 8009f66:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6a:	bd30      	pop	{r4, r5, pc}
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d3f3      	bcc.n	8009f58 <__mcmp+0x18>
 8009f70:	e7fb      	b.n	8009f6a <__mcmp+0x2a>
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7f9      	b.n	8009f6a <__mcmp+0x2a>
	...

08009f78 <__mdiff>:
 8009f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4689      	mov	r9, r1
 8009f7e:	4606      	mov	r6, r0
 8009f80:	4611      	mov	r1, r2
 8009f82:	4648      	mov	r0, r9
 8009f84:	4614      	mov	r4, r2
 8009f86:	f7ff ffdb 	bl	8009f40 <__mcmp>
 8009f8a:	1e05      	subs	r5, r0, #0
 8009f8c:	d112      	bne.n	8009fb4 <__mdiff+0x3c>
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff fd11 	bl	80099b8 <_Balloc>
 8009f96:	4602      	mov	r2, r0
 8009f98:	b928      	cbnz	r0, 8009fa6 <__mdiff+0x2e>
 8009f9a:	4b3f      	ldr	r3, [pc, #252]	@ (800a098 <__mdiff+0x120>)
 8009f9c:	f240 2137 	movw	r1, #567	@ 0x237
 8009fa0:	483e      	ldr	r0, [pc, #248]	@ (800a09c <__mdiff+0x124>)
 8009fa2:	f001 fa95 	bl	800b4d0 <__assert_func>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fac:	4610      	mov	r0, r2
 8009fae:	b003      	add	sp, #12
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	bfbc      	itt	lt
 8009fb6:	464b      	movlt	r3, r9
 8009fb8:	46a1      	movlt	r9, r4
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fc0:	bfba      	itte	lt
 8009fc2:	461c      	movlt	r4, r3
 8009fc4:	2501      	movlt	r5, #1
 8009fc6:	2500      	movge	r5, #0
 8009fc8:	f7ff fcf6 	bl	80099b8 <_Balloc>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	b918      	cbnz	r0, 8009fd8 <__mdiff+0x60>
 8009fd0:	4b31      	ldr	r3, [pc, #196]	@ (800a098 <__mdiff+0x120>)
 8009fd2:	f240 2145 	movw	r1, #581	@ 0x245
 8009fd6:	e7e3      	b.n	8009fa0 <__mdiff+0x28>
 8009fd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fdc:	6926      	ldr	r6, [r4, #16]
 8009fde:	60c5      	str	r5, [r0, #12]
 8009fe0:	f109 0310 	add.w	r3, r9, #16
 8009fe4:	f109 0514 	add.w	r5, r9, #20
 8009fe8:	f104 0e14 	add.w	lr, r4, #20
 8009fec:	f100 0b14 	add.w	fp, r0, #20
 8009ff0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ff4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	46d9      	mov	r9, fp
 8009ffc:	f04f 0c00 	mov.w	ip, #0
 800a000:	9b01      	ldr	r3, [sp, #4]
 800a002:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a006:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	fa1f f38a 	uxth.w	r3, sl
 800a010:	4619      	mov	r1, r3
 800a012:	b283      	uxth	r3, r0
 800a014:	1acb      	subs	r3, r1, r3
 800a016:	0c00      	lsrs	r0, r0, #16
 800a018:	4463      	add	r3, ip
 800a01a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a01e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a022:	b29b      	uxth	r3, r3
 800a024:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a028:	4576      	cmp	r6, lr
 800a02a:	f849 3b04 	str.w	r3, [r9], #4
 800a02e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a032:	d8e5      	bhi.n	800a000 <__mdiff+0x88>
 800a034:	1b33      	subs	r3, r6, r4
 800a036:	3b15      	subs	r3, #21
 800a038:	f023 0303 	bic.w	r3, r3, #3
 800a03c:	3415      	adds	r4, #21
 800a03e:	3304      	adds	r3, #4
 800a040:	42a6      	cmp	r6, r4
 800a042:	bf38      	it	cc
 800a044:	2304      	movcc	r3, #4
 800a046:	441d      	add	r5, r3
 800a048:	445b      	add	r3, fp
 800a04a:	461e      	mov	r6, r3
 800a04c:	462c      	mov	r4, r5
 800a04e:	4544      	cmp	r4, r8
 800a050:	d30e      	bcc.n	800a070 <__mdiff+0xf8>
 800a052:	f108 0103 	add.w	r1, r8, #3
 800a056:	1b49      	subs	r1, r1, r5
 800a058:	f021 0103 	bic.w	r1, r1, #3
 800a05c:	3d03      	subs	r5, #3
 800a05e:	45a8      	cmp	r8, r5
 800a060:	bf38      	it	cc
 800a062:	2100      	movcc	r1, #0
 800a064:	440b      	add	r3, r1
 800a066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a06a:	b191      	cbz	r1, 800a092 <__mdiff+0x11a>
 800a06c:	6117      	str	r7, [r2, #16]
 800a06e:	e79d      	b.n	8009fac <__mdiff+0x34>
 800a070:	f854 1b04 	ldr.w	r1, [r4], #4
 800a074:	46e6      	mov	lr, ip
 800a076:	0c08      	lsrs	r0, r1, #16
 800a078:	fa1c fc81 	uxtah	ip, ip, r1
 800a07c:	4471      	add	r1, lr
 800a07e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a082:	b289      	uxth	r1, r1
 800a084:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a088:	f846 1b04 	str.w	r1, [r6], #4
 800a08c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a090:	e7dd      	b.n	800a04e <__mdiff+0xd6>
 800a092:	3f01      	subs	r7, #1
 800a094:	e7e7      	b.n	800a066 <__mdiff+0xee>
 800a096:	bf00      	nop
 800a098:	0800c3f5 	.word	0x0800c3f5
 800a09c:	0800c406 	.word	0x0800c406

0800a0a0 <__ulp>:
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	ed8d 0b00 	vstr	d0, [sp]
 800a0a6:	9a01      	ldr	r2, [sp, #4]
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e8 <__ulp+0x48>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc08      	bgt.n	800a0c6 <__ulp+0x26>
 800a0b4:	425b      	negs	r3, r3
 800a0b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0be:	da04      	bge.n	800a0ca <__ulp+0x2a>
 800a0c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0c4:	4113      	asrs	r3, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	e008      	b.n	800a0dc <__ulp+0x3c>
 800a0ca:	f1a2 0314 	sub.w	r3, r2, #20
 800a0ce:	2b1e      	cmp	r3, #30
 800a0d0:	bfda      	itte	le
 800a0d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0d6:	40da      	lsrle	r2, r3
 800a0d8:	2201      	movgt	r2, #1
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	ec41 0b10 	vmov	d0, r0, r1
 800a0e4:	b002      	add	sp, #8
 800a0e6:	4770      	bx	lr
 800a0e8:	7ff00000 	.word	0x7ff00000

0800a0ec <__b2d>:
 800a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f0:	6906      	ldr	r6, [r0, #16]
 800a0f2:	f100 0814 	add.w	r8, r0, #20
 800a0f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a0fa:	1f37      	subs	r7, r6, #4
 800a0fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a100:	4610      	mov	r0, r2
 800a102:	f7ff fd4b 	bl	8009b9c <__hi0bits>
 800a106:	f1c0 0320 	rsb	r3, r0, #32
 800a10a:	280a      	cmp	r0, #10
 800a10c:	600b      	str	r3, [r1, #0]
 800a10e:	491b      	ldr	r1, [pc, #108]	@ (800a17c <__b2d+0x90>)
 800a110:	dc15      	bgt.n	800a13e <__b2d+0x52>
 800a112:	f1c0 0c0b 	rsb	ip, r0, #11
 800a116:	fa22 f30c 	lsr.w	r3, r2, ip
 800a11a:	45b8      	cmp	r8, r7
 800a11c:	ea43 0501 	orr.w	r5, r3, r1
 800a120:	bf34      	ite	cc
 800a122:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a126:	2300      	movcs	r3, #0
 800a128:	3015      	adds	r0, #21
 800a12a:	fa02 f000 	lsl.w	r0, r2, r0
 800a12e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a132:	4303      	orrs	r3, r0
 800a134:	461c      	mov	r4, r3
 800a136:	ec45 4b10 	vmov	d0, r4, r5
 800a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13e:	45b8      	cmp	r8, r7
 800a140:	bf3a      	itte	cc
 800a142:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a146:	f1a6 0708 	subcc.w	r7, r6, #8
 800a14a:	2300      	movcs	r3, #0
 800a14c:	380b      	subs	r0, #11
 800a14e:	d012      	beq.n	800a176 <__b2d+0x8a>
 800a150:	f1c0 0120 	rsb	r1, r0, #32
 800a154:	fa23 f401 	lsr.w	r4, r3, r1
 800a158:	4082      	lsls	r2, r0
 800a15a:	4322      	orrs	r2, r4
 800a15c:	4547      	cmp	r7, r8
 800a15e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a162:	bf8c      	ite	hi
 800a164:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a168:	2200      	movls	r2, #0
 800a16a:	4083      	lsls	r3, r0
 800a16c:	40ca      	lsrs	r2, r1
 800a16e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a172:	4313      	orrs	r3, r2
 800a174:	e7de      	b.n	800a134 <__b2d+0x48>
 800a176:	ea42 0501 	orr.w	r5, r2, r1
 800a17a:	e7db      	b.n	800a134 <__b2d+0x48>
 800a17c:	3ff00000 	.word	0x3ff00000

0800a180 <__d2b>:
 800a180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a184:	460f      	mov	r7, r1
 800a186:	2101      	movs	r1, #1
 800a188:	ec59 8b10 	vmov	r8, r9, d0
 800a18c:	4616      	mov	r6, r2
 800a18e:	f7ff fc13 	bl	80099b8 <_Balloc>
 800a192:	4604      	mov	r4, r0
 800a194:	b930      	cbnz	r0, 800a1a4 <__d2b+0x24>
 800a196:	4602      	mov	r2, r0
 800a198:	4b23      	ldr	r3, [pc, #140]	@ (800a228 <__d2b+0xa8>)
 800a19a:	4824      	ldr	r0, [pc, #144]	@ (800a22c <__d2b+0xac>)
 800a19c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1a0:	f001 f996 	bl	800b4d0 <__assert_func>
 800a1a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1ac:	b10d      	cbz	r5, 800a1b2 <__d2b+0x32>
 800a1ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	f1b8 0300 	subs.w	r3, r8, #0
 800a1b8:	d023      	beq.n	800a202 <__d2b+0x82>
 800a1ba:	4668      	mov	r0, sp
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	f7ff fd0c 	bl	8009bda <__lo0bits>
 800a1c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1c6:	b1d0      	cbz	r0, 800a1fe <__d2b+0x7e>
 800a1c8:	f1c0 0320 	rsb	r3, r0, #32
 800a1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	40c2      	lsrs	r2, r0
 800a1d4:	6163      	str	r3, [r4, #20]
 800a1d6:	9201      	str	r2, [sp, #4]
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	61a3      	str	r3, [r4, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf0c      	ite	eq
 800a1e0:	2201      	moveq	r2, #1
 800a1e2:	2202      	movne	r2, #2
 800a1e4:	6122      	str	r2, [r4, #16]
 800a1e6:	b1a5      	cbz	r5, 800a212 <__d2b+0x92>
 800a1e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1ec:	4405      	add	r5, r0
 800a1ee:	603d      	str	r5, [r7, #0]
 800a1f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1f4:	6030      	str	r0, [r6, #0]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	b003      	add	sp, #12
 800a1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1fe:	6161      	str	r1, [r4, #20]
 800a200:	e7ea      	b.n	800a1d8 <__d2b+0x58>
 800a202:	a801      	add	r0, sp, #4
 800a204:	f7ff fce9 	bl	8009bda <__lo0bits>
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	6163      	str	r3, [r4, #20]
 800a20c:	3020      	adds	r0, #32
 800a20e:	2201      	movs	r2, #1
 800a210:	e7e8      	b.n	800a1e4 <__d2b+0x64>
 800a212:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a216:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a21a:	6038      	str	r0, [r7, #0]
 800a21c:	6918      	ldr	r0, [r3, #16]
 800a21e:	f7ff fcbd 	bl	8009b9c <__hi0bits>
 800a222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a226:	e7e5      	b.n	800a1f4 <__d2b+0x74>
 800a228:	0800c3f5 	.word	0x0800c3f5
 800a22c:	0800c406 	.word	0x0800c406

0800a230 <__ratio>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	b085      	sub	sp, #20
 800a236:	e9cd 1000 	strd	r1, r0, [sp]
 800a23a:	a902      	add	r1, sp, #8
 800a23c:	f7ff ff56 	bl	800a0ec <__b2d>
 800a240:	9800      	ldr	r0, [sp, #0]
 800a242:	a903      	add	r1, sp, #12
 800a244:	ec55 4b10 	vmov	r4, r5, d0
 800a248:	f7ff ff50 	bl	800a0ec <__b2d>
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	6919      	ldr	r1, [r3, #16]
 800a250:	9b00      	ldr	r3, [sp, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	1ac9      	subs	r1, r1, r3
 800a256:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	ec5b ab10 	vmov	sl, fp, d0
 800a260:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a264:	2b00      	cmp	r3, #0
 800a266:	bfce      	itee	gt
 800a268:	462a      	movgt	r2, r5
 800a26a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a26e:	465a      	movle	r2, fp
 800a270:	462f      	mov	r7, r5
 800a272:	46d9      	mov	r9, fp
 800a274:	bfcc      	ite	gt
 800a276:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a27a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a27e:	464b      	mov	r3, r9
 800a280:	4652      	mov	r2, sl
 800a282:	4620      	mov	r0, r4
 800a284:	4639      	mov	r1, r7
 800a286:	f7f6 faf1 	bl	800086c <__aeabi_ddiv>
 800a28a:	ec41 0b10 	vmov	d0, r0, r1
 800a28e:	b005      	add	sp, #20
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a294 <__copybits>:
 800a294:	3901      	subs	r1, #1
 800a296:	b570      	push	{r4, r5, r6, lr}
 800a298:	1149      	asrs	r1, r1, #5
 800a29a:	6914      	ldr	r4, [r2, #16]
 800a29c:	3101      	adds	r1, #1
 800a29e:	f102 0314 	add.w	r3, r2, #20
 800a2a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2aa:	1f05      	subs	r5, r0, #4
 800a2ac:	42a3      	cmp	r3, r4
 800a2ae:	d30c      	bcc.n	800a2ca <__copybits+0x36>
 800a2b0:	1aa3      	subs	r3, r4, r2
 800a2b2:	3b11      	subs	r3, #17
 800a2b4:	f023 0303 	bic.w	r3, r3, #3
 800a2b8:	3211      	adds	r2, #17
 800a2ba:	42a2      	cmp	r2, r4
 800a2bc:	bf88      	it	hi
 800a2be:	2300      	movhi	r3, #0
 800a2c0:	4418      	add	r0, r3
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	4288      	cmp	r0, r1
 800a2c6:	d305      	bcc.n	800a2d4 <__copybits+0x40>
 800a2c8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2d2:	e7eb      	b.n	800a2ac <__copybits+0x18>
 800a2d4:	f840 3b04 	str.w	r3, [r0], #4
 800a2d8:	e7f4      	b.n	800a2c4 <__copybits+0x30>

0800a2da <__any_on>:
 800a2da:	f100 0214 	add.w	r2, r0, #20
 800a2de:	6900      	ldr	r0, [r0, #16]
 800a2e0:	114b      	asrs	r3, r1, #5
 800a2e2:	4298      	cmp	r0, r3
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	db11      	blt.n	800a30c <__any_on+0x32>
 800a2e8:	dd0a      	ble.n	800a300 <__any_on+0x26>
 800a2ea:	f011 011f 	ands.w	r1, r1, #31
 800a2ee:	d007      	beq.n	800a300 <__any_on+0x26>
 800a2f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2f4:	fa24 f001 	lsr.w	r0, r4, r1
 800a2f8:	fa00 f101 	lsl.w	r1, r0, r1
 800a2fc:	428c      	cmp	r4, r1
 800a2fe:	d10b      	bne.n	800a318 <__any_on+0x3e>
 800a300:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a304:	4293      	cmp	r3, r2
 800a306:	d803      	bhi.n	800a310 <__any_on+0x36>
 800a308:	2000      	movs	r0, #0
 800a30a:	bd10      	pop	{r4, pc}
 800a30c:	4603      	mov	r3, r0
 800a30e:	e7f7      	b.n	800a300 <__any_on+0x26>
 800a310:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a314:	2900      	cmp	r1, #0
 800a316:	d0f5      	beq.n	800a304 <__any_on+0x2a>
 800a318:	2001      	movs	r0, #1
 800a31a:	e7f6      	b.n	800a30a <__any_on+0x30>

0800a31c <sulp>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	ec45 4b10 	vmov	d0, r4, r5
 800a326:	4616      	mov	r6, r2
 800a328:	f7ff feba 	bl	800a0a0 <__ulp>
 800a32c:	ec51 0b10 	vmov	r0, r1, d0
 800a330:	b17e      	cbz	r6, 800a352 <sulp+0x36>
 800a332:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a336:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dd09      	ble.n	800a352 <sulp+0x36>
 800a33e:	051b      	lsls	r3, r3, #20
 800a340:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a344:	2400      	movs	r4, #0
 800a346:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a34a:	4622      	mov	r2, r4
 800a34c:	462b      	mov	r3, r5
 800a34e:	f7f6 f963 	bl	8000618 <__aeabi_dmul>
 800a352:	ec41 0b10 	vmov	d0, r0, r1
 800a356:	bd70      	pop	{r4, r5, r6, pc}

0800a358 <_strtod_l>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	b09f      	sub	sp, #124	@ 0x7c
 800a35e:	460c      	mov	r4, r1
 800a360:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a362:	2200      	movs	r2, #0
 800a364:	921a      	str	r2, [sp, #104]	@ 0x68
 800a366:	9005      	str	r0, [sp, #20]
 800a368:	f04f 0a00 	mov.w	sl, #0
 800a36c:	f04f 0b00 	mov.w	fp, #0
 800a370:	460a      	mov	r2, r1
 800a372:	9219      	str	r2, [sp, #100]	@ 0x64
 800a374:	7811      	ldrb	r1, [r2, #0]
 800a376:	292b      	cmp	r1, #43	@ 0x2b
 800a378:	d04a      	beq.n	800a410 <_strtod_l+0xb8>
 800a37a:	d838      	bhi.n	800a3ee <_strtod_l+0x96>
 800a37c:	290d      	cmp	r1, #13
 800a37e:	d832      	bhi.n	800a3e6 <_strtod_l+0x8e>
 800a380:	2908      	cmp	r1, #8
 800a382:	d832      	bhi.n	800a3ea <_strtod_l+0x92>
 800a384:	2900      	cmp	r1, #0
 800a386:	d03b      	beq.n	800a400 <_strtod_l+0xa8>
 800a388:	2200      	movs	r2, #0
 800a38a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a38c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a38e:	782a      	ldrb	r2, [r5, #0]
 800a390:	2a30      	cmp	r2, #48	@ 0x30
 800a392:	f040 80b3 	bne.w	800a4fc <_strtod_l+0x1a4>
 800a396:	786a      	ldrb	r2, [r5, #1]
 800a398:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a39c:	2a58      	cmp	r2, #88	@ 0x58
 800a39e:	d16e      	bne.n	800a47e <_strtod_l+0x126>
 800a3a0:	9302      	str	r3, [sp, #8]
 800a3a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	4a8e      	ldr	r2, [pc, #568]	@ (800a5e4 <_strtod_l+0x28c>)
 800a3ac:	9805      	ldr	r0, [sp, #20]
 800a3ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a3b0:	a919      	add	r1, sp, #100	@ 0x64
 800a3b2:	f001 f927 	bl	800b604 <__gethex>
 800a3b6:	f010 060f 	ands.w	r6, r0, #15
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	d005      	beq.n	800a3ca <_strtod_l+0x72>
 800a3be:	2e06      	cmp	r6, #6
 800a3c0:	d128      	bne.n	800a414 <_strtod_l+0xbc>
 800a3c2:	3501      	adds	r5, #1
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 858e 	bne.w	800aeee <_strtod_l+0xb96>
 800a3d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d4:	b1cb      	cbz	r3, 800a40a <_strtod_l+0xb2>
 800a3d6:	4652      	mov	r2, sl
 800a3d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a3dc:	ec43 2b10 	vmov	d0, r2, r3
 800a3e0:	b01f      	add	sp, #124	@ 0x7c
 800a3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e6:	2920      	cmp	r1, #32
 800a3e8:	d1ce      	bne.n	800a388 <_strtod_l+0x30>
 800a3ea:	3201      	adds	r2, #1
 800a3ec:	e7c1      	b.n	800a372 <_strtod_l+0x1a>
 800a3ee:	292d      	cmp	r1, #45	@ 0x2d
 800a3f0:	d1ca      	bne.n	800a388 <_strtod_l+0x30>
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3f6:	1c51      	adds	r1, r2, #1
 800a3f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3fa:	7852      	ldrb	r2, [r2, #1]
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	d1c5      	bne.n	800a38c <_strtod_l+0x34>
 800a400:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a402:	9419      	str	r4, [sp, #100]	@ 0x64
 800a404:	2b00      	cmp	r3, #0
 800a406:	f040 8570 	bne.w	800aeea <_strtod_l+0xb92>
 800a40a:	4652      	mov	r2, sl
 800a40c:	465b      	mov	r3, fp
 800a40e:	e7e5      	b.n	800a3dc <_strtod_l+0x84>
 800a410:	2100      	movs	r1, #0
 800a412:	e7ef      	b.n	800a3f4 <_strtod_l+0x9c>
 800a414:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a416:	b13a      	cbz	r2, 800a428 <_strtod_l+0xd0>
 800a418:	2135      	movs	r1, #53	@ 0x35
 800a41a:	a81c      	add	r0, sp, #112	@ 0x70
 800a41c:	f7ff ff3a 	bl	800a294 <__copybits>
 800a420:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a422:	9805      	ldr	r0, [sp, #20]
 800a424:	f7ff fb08 	bl	8009a38 <_Bfree>
 800a428:	3e01      	subs	r6, #1
 800a42a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a42c:	2e04      	cmp	r6, #4
 800a42e:	d806      	bhi.n	800a43e <_strtod_l+0xe6>
 800a430:	e8df f006 	tbb	[pc, r6]
 800a434:	201d0314 	.word	0x201d0314
 800a438:	14          	.byte	0x14
 800a439:	00          	.byte	0x00
 800a43a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a43e:	05e1      	lsls	r1, r4, #23
 800a440:	bf48      	it	mi
 800a442:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a44a:	0d1b      	lsrs	r3, r3, #20
 800a44c:	051b      	lsls	r3, r3, #20
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1bb      	bne.n	800a3ca <_strtod_l+0x72>
 800a452:	f7fe fb31 	bl	8008ab8 <__errno>
 800a456:	2322      	movs	r3, #34	@ 0x22
 800a458:	6003      	str	r3, [r0, #0]
 800a45a:	e7b6      	b.n	800a3ca <_strtod_l+0x72>
 800a45c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a460:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a464:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a468:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a46c:	e7e7      	b.n	800a43e <_strtod_l+0xe6>
 800a46e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a5ec <_strtod_l+0x294>
 800a472:	e7e4      	b.n	800a43e <_strtod_l+0xe6>
 800a474:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a478:	f04f 3aff 	mov.w	sl, #4294967295
 800a47c:	e7df      	b.n	800a43e <_strtod_l+0xe6>
 800a47e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	9219      	str	r2, [sp, #100]	@ 0x64
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	2b30      	cmp	r3, #48	@ 0x30
 800a488:	d0f9      	beq.n	800a47e <_strtod_l+0x126>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d09d      	beq.n	800a3ca <_strtod_l+0x72>
 800a48e:	2301      	movs	r3, #1
 800a490:	9309      	str	r3, [sp, #36]	@ 0x24
 800a492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a494:	930c      	str	r3, [sp, #48]	@ 0x30
 800a496:	2300      	movs	r3, #0
 800a498:	9308      	str	r3, [sp, #32]
 800a49a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a49c:	461f      	mov	r7, r3
 800a49e:	220a      	movs	r2, #10
 800a4a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a4a2:	7805      	ldrb	r5, [r0, #0]
 800a4a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a4a8:	b2d9      	uxtb	r1, r3
 800a4aa:	2909      	cmp	r1, #9
 800a4ac:	d928      	bls.n	800a500 <_strtod_l+0x1a8>
 800a4ae:	494e      	ldr	r1, [pc, #312]	@ (800a5e8 <_strtod_l+0x290>)
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f000 ffd5 	bl	800b460 <strncmp>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d032      	beq.n	800a520 <_strtod_l+0x1c8>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	462a      	mov	r2, r5
 800a4be:	4681      	mov	r9, r0
 800a4c0:	463d      	mov	r5, r7
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2a65      	cmp	r2, #101	@ 0x65
 800a4c6:	d001      	beq.n	800a4cc <_strtod_l+0x174>
 800a4c8:	2a45      	cmp	r2, #69	@ 0x45
 800a4ca:	d114      	bne.n	800a4f6 <_strtod_l+0x19e>
 800a4cc:	b91d      	cbnz	r5, 800a4d6 <_strtod_l+0x17e>
 800a4ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d0:	4302      	orrs	r2, r0
 800a4d2:	d095      	beq.n	800a400 <_strtod_l+0xa8>
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a4d8:	1c62      	adds	r2, r4, #1
 800a4da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4dc:	7862      	ldrb	r2, [r4, #1]
 800a4de:	2a2b      	cmp	r2, #43	@ 0x2b
 800a4e0:	d077      	beq.n	800a5d2 <_strtod_l+0x27a>
 800a4e2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a4e4:	d07b      	beq.n	800a5de <_strtod_l+0x286>
 800a4e6:	f04f 0c00 	mov.w	ip, #0
 800a4ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4ee:	2909      	cmp	r1, #9
 800a4f0:	f240 8082 	bls.w	800a5f8 <_strtod_l+0x2a0>
 800a4f4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	e0a2      	b.n	800a642 <_strtod_l+0x2ea>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e7c7      	b.n	800a490 <_strtod_l+0x138>
 800a500:	2f08      	cmp	r7, #8
 800a502:	bfd5      	itete	le
 800a504:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a506:	9908      	ldrgt	r1, [sp, #32]
 800a508:	fb02 3301 	mlale	r3, r2, r1, r3
 800a50c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a510:	f100 0001 	add.w	r0, r0, #1
 800a514:	bfd4      	ite	le
 800a516:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a518:	9308      	strgt	r3, [sp, #32]
 800a51a:	3701      	adds	r7, #1
 800a51c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a51e:	e7bf      	b.n	800a4a0 <_strtod_l+0x148>
 800a520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	9219      	str	r2, [sp, #100]	@ 0x64
 800a526:	785a      	ldrb	r2, [r3, #1]
 800a528:	b37f      	cbz	r7, 800a58a <_strtod_l+0x232>
 800a52a:	4681      	mov	r9, r0
 800a52c:	463d      	mov	r5, r7
 800a52e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a532:	2b09      	cmp	r3, #9
 800a534:	d912      	bls.n	800a55c <_strtod_l+0x204>
 800a536:	2301      	movs	r3, #1
 800a538:	e7c4      	b.n	800a4c4 <_strtod_l+0x16c>
 800a53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a540:	785a      	ldrb	r2, [r3, #1]
 800a542:	3001      	adds	r0, #1
 800a544:	2a30      	cmp	r2, #48	@ 0x30
 800a546:	d0f8      	beq.n	800a53a <_strtod_l+0x1e2>
 800a548:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	f200 84d3 	bhi.w	800aef8 <_strtod_l+0xba0>
 800a552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a554:	930c      	str	r3, [sp, #48]	@ 0x30
 800a556:	4681      	mov	r9, r0
 800a558:	2000      	movs	r0, #0
 800a55a:	4605      	mov	r5, r0
 800a55c:	3a30      	subs	r2, #48	@ 0x30
 800a55e:	f100 0301 	add.w	r3, r0, #1
 800a562:	d02a      	beq.n	800a5ba <_strtod_l+0x262>
 800a564:	4499      	add	r9, r3
 800a566:	eb00 0c05 	add.w	ip, r0, r5
 800a56a:	462b      	mov	r3, r5
 800a56c:	210a      	movs	r1, #10
 800a56e:	4563      	cmp	r3, ip
 800a570:	d10d      	bne.n	800a58e <_strtod_l+0x236>
 800a572:	1c69      	adds	r1, r5, #1
 800a574:	4401      	add	r1, r0
 800a576:	4428      	add	r0, r5
 800a578:	2808      	cmp	r0, #8
 800a57a:	dc16      	bgt.n	800a5aa <_strtod_l+0x252>
 800a57c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a57e:	230a      	movs	r3, #10
 800a580:	fb03 2300 	mla	r3, r3, r0, r2
 800a584:	930a      	str	r3, [sp, #40]	@ 0x28
 800a586:	2300      	movs	r3, #0
 800a588:	e018      	b.n	800a5bc <_strtod_l+0x264>
 800a58a:	4638      	mov	r0, r7
 800a58c:	e7da      	b.n	800a544 <_strtod_l+0x1ec>
 800a58e:	2b08      	cmp	r3, #8
 800a590:	f103 0301 	add.w	r3, r3, #1
 800a594:	dc03      	bgt.n	800a59e <_strtod_l+0x246>
 800a596:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a598:	434e      	muls	r6, r1
 800a59a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a59c:	e7e7      	b.n	800a56e <_strtod_l+0x216>
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	bfde      	ittt	le
 800a5a2:	9e08      	ldrle	r6, [sp, #32]
 800a5a4:	434e      	mulle	r6, r1
 800a5a6:	9608      	strle	r6, [sp, #32]
 800a5a8:	e7e1      	b.n	800a56e <_strtod_l+0x216>
 800a5aa:	280f      	cmp	r0, #15
 800a5ac:	dceb      	bgt.n	800a586 <_strtod_l+0x22e>
 800a5ae:	9808      	ldr	r0, [sp, #32]
 800a5b0:	230a      	movs	r3, #10
 800a5b2:	fb03 2300 	mla	r3, r3, r0, r2
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	e7e5      	b.n	800a586 <_strtod_l+0x22e>
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5be:	1c50      	adds	r0, r2, #1
 800a5c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5c2:	7852      	ldrb	r2, [r2, #1]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	e7b1      	b.n	800a52e <_strtod_l+0x1d6>
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e77d      	b.n	800a4ce <_strtod_l+0x176>
 800a5d2:	f04f 0c00 	mov.w	ip, #0
 800a5d6:	1ca2      	adds	r2, r4, #2
 800a5d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5da:	78a2      	ldrb	r2, [r4, #2]
 800a5dc:	e785      	b.n	800a4ea <_strtod_l+0x192>
 800a5de:	f04f 0c01 	mov.w	ip, #1
 800a5e2:	e7f8      	b.n	800a5d6 <_strtod_l+0x27e>
 800a5e4:	0800c578 	.word	0x0800c578
 800a5e8:	0800c560 	.word	0x0800c560
 800a5ec:	7ff00000 	.word	0x7ff00000
 800a5f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5f2:	1c51      	adds	r1, r2, #1
 800a5f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5f6:	7852      	ldrb	r2, [r2, #1]
 800a5f8:	2a30      	cmp	r2, #48	@ 0x30
 800a5fa:	d0f9      	beq.n	800a5f0 <_strtod_l+0x298>
 800a5fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a600:	2908      	cmp	r1, #8
 800a602:	f63f af78 	bhi.w	800a4f6 <_strtod_l+0x19e>
 800a606:	3a30      	subs	r2, #48	@ 0x30
 800a608:	920e      	str	r2, [sp, #56]	@ 0x38
 800a60a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a60c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a60e:	f04f 080a 	mov.w	r8, #10
 800a612:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a614:	1c56      	adds	r6, r2, #1
 800a616:	9619      	str	r6, [sp, #100]	@ 0x64
 800a618:	7852      	ldrb	r2, [r2, #1]
 800a61a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a61e:	f1be 0f09 	cmp.w	lr, #9
 800a622:	d939      	bls.n	800a698 <_strtod_l+0x340>
 800a624:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a626:	1a76      	subs	r6, r6, r1
 800a628:	2e08      	cmp	r6, #8
 800a62a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a62e:	dc03      	bgt.n	800a638 <_strtod_l+0x2e0>
 800a630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a632:	4588      	cmp	r8, r1
 800a634:	bfa8      	it	ge
 800a636:	4688      	movge	r8, r1
 800a638:	f1bc 0f00 	cmp.w	ip, #0
 800a63c:	d001      	beq.n	800a642 <_strtod_l+0x2ea>
 800a63e:	f1c8 0800 	rsb	r8, r8, #0
 800a642:	2d00      	cmp	r5, #0
 800a644:	d14e      	bne.n	800a6e4 <_strtod_l+0x38c>
 800a646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a648:	4308      	orrs	r0, r1
 800a64a:	f47f aebe 	bne.w	800a3ca <_strtod_l+0x72>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f47f aed6 	bne.w	800a400 <_strtod_l+0xa8>
 800a654:	2a69      	cmp	r2, #105	@ 0x69
 800a656:	d028      	beq.n	800a6aa <_strtod_l+0x352>
 800a658:	dc25      	bgt.n	800a6a6 <_strtod_l+0x34e>
 800a65a:	2a49      	cmp	r2, #73	@ 0x49
 800a65c:	d025      	beq.n	800a6aa <_strtod_l+0x352>
 800a65e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a660:	f47f aece 	bne.w	800a400 <_strtod_l+0xa8>
 800a664:	499b      	ldr	r1, [pc, #620]	@ (800a8d4 <_strtod_l+0x57c>)
 800a666:	a819      	add	r0, sp, #100	@ 0x64
 800a668:	f001 f9ee 	bl	800ba48 <__match>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f aec7 	beq.w	800a400 <_strtod_l+0xa8>
 800a672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b28      	cmp	r3, #40	@ 0x28
 800a678:	d12e      	bne.n	800a6d8 <_strtod_l+0x380>
 800a67a:	4997      	ldr	r1, [pc, #604]	@ (800a8d8 <_strtod_l+0x580>)
 800a67c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a67e:	a819      	add	r0, sp, #100	@ 0x64
 800a680:	f001 f9f6 	bl	800ba70 <__hexnan>
 800a684:	2805      	cmp	r0, #5
 800a686:	d127      	bne.n	800a6d8 <_strtod_l+0x380>
 800a688:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a68a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a68e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a692:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a696:	e698      	b.n	800a3ca <_strtod_l+0x72>
 800a698:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a69a:	fb08 2101 	mla	r1, r8, r1, r2
 800a69e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a6a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6a4:	e7b5      	b.n	800a612 <_strtod_l+0x2ba>
 800a6a6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a6a8:	e7da      	b.n	800a660 <_strtod_l+0x308>
 800a6aa:	498c      	ldr	r1, [pc, #560]	@ (800a8dc <_strtod_l+0x584>)
 800a6ac:	a819      	add	r0, sp, #100	@ 0x64
 800a6ae:	f001 f9cb 	bl	800ba48 <__match>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f aea4 	beq.w	800a400 <_strtod_l+0xa8>
 800a6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6ba:	4989      	ldr	r1, [pc, #548]	@ (800a8e0 <_strtod_l+0x588>)
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	a819      	add	r0, sp, #100	@ 0x64
 800a6c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6c2:	f001 f9c1 	bl	800ba48 <__match>
 800a6c6:	b910      	cbnz	r0, 800a6ce <_strtod_l+0x376>
 800a6c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a8f0 <_strtod_l+0x598>
 800a6d2:	f04f 0a00 	mov.w	sl, #0
 800a6d6:	e678      	b.n	800a3ca <_strtod_l+0x72>
 800a6d8:	4882      	ldr	r0, [pc, #520]	@ (800a8e4 <_strtod_l+0x58c>)
 800a6da:	f000 fef1 	bl	800b4c0 <nan>
 800a6de:	ec5b ab10 	vmov	sl, fp, d0
 800a6e2:	e672      	b.n	800a3ca <_strtod_l+0x72>
 800a6e4:	eba8 0309 	sub.w	r3, r8, r9
 800a6e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	bf08      	it	eq
 800a6f0:	462f      	moveq	r7, r5
 800a6f2:	2d10      	cmp	r5, #16
 800a6f4:	462c      	mov	r4, r5
 800a6f6:	bfa8      	it	ge
 800a6f8:	2410      	movge	r4, #16
 800a6fa:	f7f5 ff13 	bl	8000524 <__aeabi_ui2d>
 800a6fe:	2d09      	cmp	r5, #9
 800a700:	4682      	mov	sl, r0
 800a702:	468b      	mov	fp, r1
 800a704:	dc13      	bgt.n	800a72e <_strtod_l+0x3d6>
 800a706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f43f ae5e 	beq.w	800a3ca <_strtod_l+0x72>
 800a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a710:	dd78      	ble.n	800a804 <_strtod_l+0x4ac>
 800a712:	2b16      	cmp	r3, #22
 800a714:	dc5f      	bgt.n	800a7d6 <_strtod_l+0x47e>
 800a716:	4974      	ldr	r1, [pc, #464]	@ (800a8e8 <_strtod_l+0x590>)
 800a718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a720:	4652      	mov	r2, sl
 800a722:	465b      	mov	r3, fp
 800a724:	f7f5 ff78 	bl	8000618 <__aeabi_dmul>
 800a728:	4682      	mov	sl, r0
 800a72a:	468b      	mov	fp, r1
 800a72c:	e64d      	b.n	800a3ca <_strtod_l+0x72>
 800a72e:	4b6e      	ldr	r3, [pc, #440]	@ (800a8e8 <_strtod_l+0x590>)
 800a730:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a734:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a738:	f7f5 ff6e 	bl	8000618 <__aeabi_dmul>
 800a73c:	4682      	mov	sl, r0
 800a73e:	9808      	ldr	r0, [sp, #32]
 800a740:	468b      	mov	fp, r1
 800a742:	f7f5 feef 	bl	8000524 <__aeabi_ui2d>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4650      	mov	r0, sl
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7f5 fdad 	bl	80002ac <__adddf3>
 800a752:	2d0f      	cmp	r5, #15
 800a754:	4682      	mov	sl, r0
 800a756:	468b      	mov	fp, r1
 800a758:	ddd5      	ble.n	800a706 <_strtod_l+0x3ae>
 800a75a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a75c:	1b2c      	subs	r4, r5, r4
 800a75e:	441c      	add	r4, r3
 800a760:	2c00      	cmp	r4, #0
 800a762:	f340 8096 	ble.w	800a892 <_strtod_l+0x53a>
 800a766:	f014 030f 	ands.w	r3, r4, #15
 800a76a:	d00a      	beq.n	800a782 <_strtod_l+0x42a>
 800a76c:	495e      	ldr	r1, [pc, #376]	@ (800a8e8 <_strtod_l+0x590>)
 800a76e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a77a:	f7f5 ff4d 	bl	8000618 <__aeabi_dmul>
 800a77e:	4682      	mov	sl, r0
 800a780:	468b      	mov	fp, r1
 800a782:	f034 040f 	bics.w	r4, r4, #15
 800a786:	d073      	beq.n	800a870 <_strtod_l+0x518>
 800a788:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a78c:	dd48      	ble.n	800a820 <_strtod_l+0x4c8>
 800a78e:	2400      	movs	r4, #0
 800a790:	46a0      	mov	r8, r4
 800a792:	940a      	str	r4, [sp, #40]	@ 0x28
 800a794:	46a1      	mov	r9, r4
 800a796:	9a05      	ldr	r2, [sp, #20]
 800a798:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a8f0 <_strtod_l+0x598>
 800a79c:	2322      	movs	r3, #34	@ 0x22
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	f04f 0a00 	mov.w	sl, #0
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f43f ae0f 	beq.w	800a3ca <_strtod_l+0x72>
 800a7ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7ae:	9805      	ldr	r0, [sp, #20]
 800a7b0:	f7ff f942 	bl	8009a38 <_Bfree>
 800a7b4:	9805      	ldr	r0, [sp, #20]
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7ff f93e 	bl	8009a38 <_Bfree>
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	4641      	mov	r1, r8
 800a7c0:	f7ff f93a 	bl	8009a38 <_Bfree>
 800a7c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7c6:	9805      	ldr	r0, [sp, #20]
 800a7c8:	f7ff f936 	bl	8009a38 <_Bfree>
 800a7cc:	9805      	ldr	r0, [sp, #20]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	f7ff f932 	bl	8009a38 <_Bfree>
 800a7d4:	e5f9      	b.n	800a3ca <_strtod_l+0x72>
 800a7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	dbbc      	blt.n	800a75a <_strtod_l+0x402>
 800a7e0:	4c41      	ldr	r4, [pc, #260]	@ (800a8e8 <_strtod_l+0x590>)
 800a7e2:	f1c5 050f 	rsb	r5, r5, #15
 800a7e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a7ea:	4652      	mov	r2, sl
 800a7ec:	465b      	mov	r3, fp
 800a7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f2:	f7f5 ff11 	bl	8000618 <__aeabi_dmul>
 800a7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f8:	1b5d      	subs	r5, r3, r5
 800a7fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a7fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a802:	e78f      	b.n	800a724 <_strtod_l+0x3cc>
 800a804:	3316      	adds	r3, #22
 800a806:	dba8      	blt.n	800a75a <_strtod_l+0x402>
 800a808:	4b37      	ldr	r3, [pc, #220]	@ (800a8e8 <_strtod_l+0x590>)
 800a80a:	eba9 0808 	sub.w	r8, r9, r8
 800a80e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a812:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a816:	4650      	mov	r0, sl
 800a818:	4659      	mov	r1, fp
 800a81a:	f7f6 f827 	bl	800086c <__aeabi_ddiv>
 800a81e:	e783      	b.n	800a728 <_strtod_l+0x3d0>
 800a820:	4b32      	ldr	r3, [pc, #200]	@ (800a8ec <_strtod_l+0x594>)
 800a822:	9308      	str	r3, [sp, #32]
 800a824:	2300      	movs	r3, #0
 800a826:	1124      	asrs	r4, r4, #4
 800a828:	4650      	mov	r0, sl
 800a82a:	4659      	mov	r1, fp
 800a82c:	461e      	mov	r6, r3
 800a82e:	2c01      	cmp	r4, #1
 800a830:	dc21      	bgt.n	800a876 <_strtod_l+0x51e>
 800a832:	b10b      	cbz	r3, 800a838 <_strtod_l+0x4e0>
 800a834:	4682      	mov	sl, r0
 800a836:	468b      	mov	fp, r1
 800a838:	492c      	ldr	r1, [pc, #176]	@ (800a8ec <_strtod_l+0x594>)
 800a83a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a83e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a842:	4652      	mov	r2, sl
 800a844:	465b      	mov	r3, fp
 800a846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a84a:	f7f5 fee5 	bl	8000618 <__aeabi_dmul>
 800a84e:	4b28      	ldr	r3, [pc, #160]	@ (800a8f0 <_strtod_l+0x598>)
 800a850:	460a      	mov	r2, r1
 800a852:	400b      	ands	r3, r1
 800a854:	4927      	ldr	r1, [pc, #156]	@ (800a8f4 <_strtod_l+0x59c>)
 800a856:	428b      	cmp	r3, r1
 800a858:	4682      	mov	sl, r0
 800a85a:	d898      	bhi.n	800a78e <_strtod_l+0x436>
 800a85c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a860:	428b      	cmp	r3, r1
 800a862:	bf86      	itte	hi
 800a864:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a8f8 <_strtod_l+0x5a0>
 800a868:	f04f 3aff 	movhi.w	sl, #4294967295
 800a86c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a870:	2300      	movs	r3, #0
 800a872:	9308      	str	r3, [sp, #32]
 800a874:	e07a      	b.n	800a96c <_strtod_l+0x614>
 800a876:	07e2      	lsls	r2, r4, #31
 800a878:	d505      	bpl.n	800a886 <_strtod_l+0x52e>
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 feca 	bl	8000618 <__aeabi_dmul>
 800a884:	2301      	movs	r3, #1
 800a886:	9a08      	ldr	r2, [sp, #32]
 800a888:	3208      	adds	r2, #8
 800a88a:	3601      	adds	r6, #1
 800a88c:	1064      	asrs	r4, r4, #1
 800a88e:	9208      	str	r2, [sp, #32]
 800a890:	e7cd      	b.n	800a82e <_strtod_l+0x4d6>
 800a892:	d0ed      	beq.n	800a870 <_strtod_l+0x518>
 800a894:	4264      	negs	r4, r4
 800a896:	f014 020f 	ands.w	r2, r4, #15
 800a89a:	d00a      	beq.n	800a8b2 <_strtod_l+0x55a>
 800a89c:	4b12      	ldr	r3, [pc, #72]	@ (800a8e8 <_strtod_l+0x590>)
 800a89e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	f7f5 ffdf 	bl	800086c <__aeabi_ddiv>
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	468b      	mov	fp, r1
 800a8b2:	1124      	asrs	r4, r4, #4
 800a8b4:	d0dc      	beq.n	800a870 <_strtod_l+0x518>
 800a8b6:	2c1f      	cmp	r4, #31
 800a8b8:	dd20      	ble.n	800a8fc <_strtod_l+0x5a4>
 800a8ba:	2400      	movs	r4, #0
 800a8bc:	46a0      	mov	r8, r4
 800a8be:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8c0:	46a1      	mov	r9, r4
 800a8c2:	9a05      	ldr	r2, [sp, #20]
 800a8c4:	2322      	movs	r3, #34	@ 0x22
 800a8c6:	f04f 0a00 	mov.w	sl, #0
 800a8ca:	f04f 0b00 	mov.w	fp, #0
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	e768      	b.n	800a7a4 <_strtod_l+0x44c>
 800a8d2:	bf00      	nop
 800a8d4:	0800c34d 	.word	0x0800c34d
 800a8d8:	0800c564 	.word	0x0800c564
 800a8dc:	0800c345 	.word	0x0800c345
 800a8e0:	0800c37c 	.word	0x0800c37c
 800a8e4:	0800c70d 	.word	0x0800c70d
 800a8e8:	0800c498 	.word	0x0800c498
 800a8ec:	0800c470 	.word	0x0800c470
 800a8f0:	7ff00000 	.word	0x7ff00000
 800a8f4:	7ca00000 	.word	0x7ca00000
 800a8f8:	7fefffff 	.word	0x7fefffff
 800a8fc:	f014 0310 	ands.w	r3, r4, #16
 800a900:	bf18      	it	ne
 800a902:	236a      	movne	r3, #106	@ 0x6a
 800a904:	4ea9      	ldr	r6, [pc, #676]	@ (800abac <_strtod_l+0x854>)
 800a906:	9308      	str	r3, [sp, #32]
 800a908:	4650      	mov	r0, sl
 800a90a:	4659      	mov	r1, fp
 800a90c:	2300      	movs	r3, #0
 800a90e:	07e2      	lsls	r2, r4, #31
 800a910:	d504      	bpl.n	800a91c <_strtod_l+0x5c4>
 800a912:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a916:	f7f5 fe7f 	bl	8000618 <__aeabi_dmul>
 800a91a:	2301      	movs	r3, #1
 800a91c:	1064      	asrs	r4, r4, #1
 800a91e:	f106 0608 	add.w	r6, r6, #8
 800a922:	d1f4      	bne.n	800a90e <_strtod_l+0x5b6>
 800a924:	b10b      	cbz	r3, 800a92a <_strtod_l+0x5d2>
 800a926:	4682      	mov	sl, r0
 800a928:	468b      	mov	fp, r1
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	b1b3      	cbz	r3, 800a95c <_strtod_l+0x604>
 800a92e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a932:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a936:	2b00      	cmp	r3, #0
 800a938:	4659      	mov	r1, fp
 800a93a:	dd0f      	ble.n	800a95c <_strtod_l+0x604>
 800a93c:	2b1f      	cmp	r3, #31
 800a93e:	dd55      	ble.n	800a9ec <_strtod_l+0x694>
 800a940:	2b34      	cmp	r3, #52	@ 0x34
 800a942:	bfde      	ittt	le
 800a944:	f04f 33ff 	movle.w	r3, #4294967295
 800a948:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a94c:	4093      	lslle	r3, r2
 800a94e:	f04f 0a00 	mov.w	sl, #0
 800a952:	bfcc      	ite	gt
 800a954:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a958:	ea03 0b01 	andle.w	fp, r3, r1
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	4650      	mov	r0, sl
 800a962:	4659      	mov	r1, fp
 800a964:	f7f6 f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d1a6      	bne.n	800a8ba <_strtod_l+0x562>
 800a96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a972:	9805      	ldr	r0, [sp, #20]
 800a974:	462b      	mov	r3, r5
 800a976:	463a      	mov	r2, r7
 800a978:	f7ff f8c6 	bl	8009b08 <__s2b>
 800a97c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a97e:	2800      	cmp	r0, #0
 800a980:	f43f af05 	beq.w	800a78e <_strtod_l+0x436>
 800a984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a986:	2a00      	cmp	r2, #0
 800a988:	eba9 0308 	sub.w	r3, r9, r8
 800a98c:	bfa8      	it	ge
 800a98e:	2300      	movge	r3, #0
 800a990:	9312      	str	r3, [sp, #72]	@ 0x48
 800a992:	2400      	movs	r4, #0
 800a994:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a998:	9316      	str	r3, [sp, #88]	@ 0x58
 800a99a:	46a0      	mov	r8, r4
 800a99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99e:	9805      	ldr	r0, [sp, #20]
 800a9a0:	6859      	ldr	r1, [r3, #4]
 800a9a2:	f7ff f809 	bl	80099b8 <_Balloc>
 800a9a6:	4681      	mov	r9, r0
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f43f aef4 	beq.w	800a796 <_strtod_l+0x43e>
 800a9ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9b0:	691a      	ldr	r2, [r3, #16]
 800a9b2:	3202      	adds	r2, #2
 800a9b4:	f103 010c 	add.w	r1, r3, #12
 800a9b8:	0092      	lsls	r2, r2, #2
 800a9ba:	300c      	adds	r0, #12
 800a9bc:	f000 fd72 	bl	800b4a4 <memcpy>
 800a9c0:	ec4b ab10 	vmov	d0, sl, fp
 800a9c4:	9805      	ldr	r0, [sp, #20]
 800a9c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a9ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a9ce:	f7ff fbd7 	bl	800a180 <__d2b>
 800a9d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f43f aede 	beq.w	800a796 <_strtod_l+0x43e>
 800a9da:	9805      	ldr	r0, [sp, #20]
 800a9dc:	2101      	movs	r1, #1
 800a9de:	f7ff f929 	bl	8009c34 <__i2b>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	b948      	cbnz	r0, 800a9fa <_strtod_l+0x6a2>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	e6d4      	b.n	800a796 <_strtod_l+0x43e>
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a9f8:	e7b0      	b.n	800a95c <_strtod_l+0x604>
 800a9fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a9fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	bfab      	itete	ge
 800aa02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aa04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aa06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aa08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aa0a:	bfac      	ite	ge
 800aa0c:	18ef      	addge	r7, r5, r3
 800aa0e:	1b5e      	sublt	r6, r3, r5
 800aa10:	9b08      	ldr	r3, [sp, #32]
 800aa12:	1aed      	subs	r5, r5, r3
 800aa14:	4415      	add	r5, r2
 800aa16:	4b66      	ldr	r3, [pc, #408]	@ (800abb0 <_strtod_l+0x858>)
 800aa18:	3d01      	subs	r5, #1
 800aa1a:	429d      	cmp	r5, r3
 800aa1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aa20:	da50      	bge.n	800aac4 <_strtod_l+0x76c>
 800aa22:	1b5b      	subs	r3, r3, r5
 800aa24:	2b1f      	cmp	r3, #31
 800aa26:	eba2 0203 	sub.w	r2, r2, r3
 800aa2a:	f04f 0101 	mov.w	r1, #1
 800aa2e:	dc3d      	bgt.n	800aaac <_strtod_l+0x754>
 800aa30:	fa01 f303 	lsl.w	r3, r1, r3
 800aa34:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa36:	2300      	movs	r3, #0
 800aa38:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa3a:	18bd      	adds	r5, r7, r2
 800aa3c:	9b08      	ldr	r3, [sp, #32]
 800aa3e:	42af      	cmp	r7, r5
 800aa40:	4416      	add	r6, r2
 800aa42:	441e      	add	r6, r3
 800aa44:	463b      	mov	r3, r7
 800aa46:	bfa8      	it	ge
 800aa48:	462b      	movge	r3, r5
 800aa4a:	42b3      	cmp	r3, r6
 800aa4c:	bfa8      	it	ge
 800aa4e:	4633      	movge	r3, r6
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfc2      	ittt	gt
 800aa54:	1aed      	subgt	r5, r5, r3
 800aa56:	1af6      	subgt	r6, r6, r3
 800aa58:	1aff      	subgt	r7, r7, r3
 800aa5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd16      	ble.n	800aa8e <_strtod_l+0x736>
 800aa60:	4641      	mov	r1, r8
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	461a      	mov	r2, r3
 800aa66:	f7ff f9a5 	bl	8009db4 <__pow5mult>
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0ba      	beq.n	800a9e6 <_strtod_l+0x68e>
 800aa70:	4601      	mov	r1, r0
 800aa72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa74:	9805      	ldr	r0, [sp, #20]
 800aa76:	f7ff f8f3 	bl	8009c60 <__multiply>
 800aa7a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f43f ae8a 	beq.w	800a796 <_strtod_l+0x43e>
 800aa82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa84:	9805      	ldr	r0, [sp, #20]
 800aa86:	f7fe ffd7 	bl	8009a38 <_Bfree>
 800aa8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	dc1d      	bgt.n	800aace <_strtod_l+0x776>
 800aa92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dd23      	ble.n	800aae0 <_strtod_l+0x788>
 800aa98:	4649      	mov	r1, r9
 800aa9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa9c:	9805      	ldr	r0, [sp, #20]
 800aa9e:	f7ff f989 	bl	8009db4 <__pow5mult>
 800aaa2:	4681      	mov	r9, r0
 800aaa4:	b9e0      	cbnz	r0, 800aae0 <_strtod_l+0x788>
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	e674      	b.n	800a796 <_strtod_l+0x43e>
 800aaac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aab0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aab4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aab8:	35e2      	adds	r5, #226	@ 0xe2
 800aaba:	fa01 f305 	lsl.w	r3, r1, r5
 800aabe:	9310      	str	r3, [sp, #64]	@ 0x40
 800aac0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aac2:	e7ba      	b.n	800aa3a <_strtod_l+0x6e2>
 800aac4:	2300      	movs	r3, #0
 800aac6:	9310      	str	r3, [sp, #64]	@ 0x40
 800aac8:	2301      	movs	r3, #1
 800aaca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aacc:	e7b5      	b.n	800aa3a <_strtod_l+0x6e2>
 800aace:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aad0:	9805      	ldr	r0, [sp, #20]
 800aad2:	462a      	mov	r2, r5
 800aad4:	f7ff f9c8 	bl	8009e68 <__lshift>
 800aad8:	901a      	str	r0, [sp, #104]	@ 0x68
 800aada:	2800      	cmp	r0, #0
 800aadc:	d1d9      	bne.n	800aa92 <_strtod_l+0x73a>
 800aade:	e65a      	b.n	800a796 <_strtod_l+0x43e>
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	dd07      	ble.n	800aaf4 <_strtod_l+0x79c>
 800aae4:	4649      	mov	r1, r9
 800aae6:	9805      	ldr	r0, [sp, #20]
 800aae8:	4632      	mov	r2, r6
 800aaea:	f7ff f9bd 	bl	8009e68 <__lshift>
 800aaee:	4681      	mov	r9, r0
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0d8      	beq.n	800aaa6 <_strtod_l+0x74e>
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	dd08      	ble.n	800ab0a <_strtod_l+0x7b2>
 800aaf8:	4641      	mov	r1, r8
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	463a      	mov	r2, r7
 800aafe:	f7ff f9b3 	bl	8009e68 <__lshift>
 800ab02:	4680      	mov	r8, r0
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f ae46 	beq.w	800a796 <_strtod_l+0x43e>
 800ab0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	464a      	mov	r2, r9
 800ab10:	f7ff fa32 	bl	8009f78 <__mdiff>
 800ab14:	4604      	mov	r4, r0
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f43f ae3d 	beq.w	800a796 <_strtod_l+0x43e>
 800ab1c:	68c3      	ldr	r3, [r0, #12]
 800ab1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab20:	2300      	movs	r3, #0
 800ab22:	60c3      	str	r3, [r0, #12]
 800ab24:	4641      	mov	r1, r8
 800ab26:	f7ff fa0b 	bl	8009f40 <__mcmp>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	da46      	bge.n	800abbc <_strtod_l+0x864>
 800ab2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab30:	ea53 030a 	orrs.w	r3, r3, sl
 800ab34:	d16c      	bne.n	800ac10 <_strtod_l+0x8b8>
 800ab36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d168      	bne.n	800ac10 <_strtod_l+0x8b8>
 800ab3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab42:	0d1b      	lsrs	r3, r3, #20
 800ab44:	051b      	lsls	r3, r3, #20
 800ab46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab4a:	d961      	bls.n	800ac10 <_strtod_l+0x8b8>
 800ab4c:	6963      	ldr	r3, [r4, #20]
 800ab4e:	b913      	cbnz	r3, 800ab56 <_strtod_l+0x7fe>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	dd5c      	ble.n	800ac10 <_strtod_l+0x8b8>
 800ab56:	4621      	mov	r1, r4
 800ab58:	2201      	movs	r2, #1
 800ab5a:	9805      	ldr	r0, [sp, #20]
 800ab5c:	f7ff f984 	bl	8009e68 <__lshift>
 800ab60:	4641      	mov	r1, r8
 800ab62:	4604      	mov	r4, r0
 800ab64:	f7ff f9ec 	bl	8009f40 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dd51      	ble.n	800ac10 <_strtod_l+0x8b8>
 800ab6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab70:	9a08      	ldr	r2, [sp, #32]
 800ab72:	0d1b      	lsrs	r3, r3, #20
 800ab74:	051b      	lsls	r3, r3, #20
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	d06b      	beq.n	800ac52 <_strtod_l+0x8fa>
 800ab7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab7e:	d868      	bhi.n	800ac52 <_strtod_l+0x8fa>
 800ab80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab84:	f67f ae9d 	bls.w	800a8c2 <_strtod_l+0x56a>
 800ab88:	4b0a      	ldr	r3, [pc, #40]	@ (800abb4 <_strtod_l+0x85c>)
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f7f5 fd42 	bl	8000618 <__aeabi_dmul>
 800ab94:	4b08      	ldr	r3, [pc, #32]	@ (800abb8 <_strtod_l+0x860>)
 800ab96:	400b      	ands	r3, r1
 800ab98:	4682      	mov	sl, r0
 800ab9a:	468b      	mov	fp, r1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f47f ae05 	bne.w	800a7ac <_strtod_l+0x454>
 800aba2:	9a05      	ldr	r2, [sp, #20]
 800aba4:	2322      	movs	r3, #34	@ 0x22
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	e600      	b.n	800a7ac <_strtod_l+0x454>
 800abaa:	bf00      	nop
 800abac:	0800c590 	.word	0x0800c590
 800abb0:	fffffc02 	.word	0xfffffc02
 800abb4:	39500000 	.word	0x39500000
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abc0:	d165      	bne.n	800ac8e <_strtod_l+0x936>
 800abc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abc8:	b35a      	cbz	r2, 800ac22 <_strtod_l+0x8ca>
 800abca:	4a9f      	ldr	r2, [pc, #636]	@ (800ae48 <_strtod_l+0xaf0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d12b      	bne.n	800ac28 <_strtod_l+0x8d0>
 800abd0:	9b08      	ldr	r3, [sp, #32]
 800abd2:	4651      	mov	r1, sl
 800abd4:	b303      	cbz	r3, 800ac18 <_strtod_l+0x8c0>
 800abd6:	4b9d      	ldr	r3, [pc, #628]	@ (800ae4c <_strtod_l+0xaf4>)
 800abd8:	465a      	mov	r2, fp
 800abda:	4013      	ands	r3, r2
 800abdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	d81b      	bhi.n	800ac1e <_strtod_l+0x8c6>
 800abe6:	0d1b      	lsrs	r3, r3, #20
 800abe8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800abec:	fa02 f303 	lsl.w	r3, r2, r3
 800abf0:	4299      	cmp	r1, r3
 800abf2:	d119      	bne.n	800ac28 <_strtod_l+0x8d0>
 800abf4:	4b96      	ldr	r3, [pc, #600]	@ (800ae50 <_strtod_l+0xaf8>)
 800abf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d102      	bne.n	800ac02 <_strtod_l+0x8aa>
 800abfc:	3101      	adds	r1, #1
 800abfe:	f43f adca 	beq.w	800a796 <_strtod_l+0x43e>
 800ac02:	4b92      	ldr	r3, [pc, #584]	@ (800ae4c <_strtod_l+0xaf4>)
 800ac04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac06:	401a      	ands	r2, r3
 800ac08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ac0c:	f04f 0a00 	mov.w	sl, #0
 800ac10:	9b08      	ldr	r3, [sp, #32]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1b8      	bne.n	800ab88 <_strtod_l+0x830>
 800ac16:	e5c9      	b.n	800a7ac <_strtod_l+0x454>
 800ac18:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1c:	e7e8      	b.n	800abf0 <_strtod_l+0x898>
 800ac1e:	4613      	mov	r3, r2
 800ac20:	e7e6      	b.n	800abf0 <_strtod_l+0x898>
 800ac22:	ea53 030a 	orrs.w	r3, r3, sl
 800ac26:	d0a1      	beq.n	800ab6c <_strtod_l+0x814>
 800ac28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac2a:	b1db      	cbz	r3, 800ac64 <_strtod_l+0x90c>
 800ac2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac2e:	4213      	tst	r3, r2
 800ac30:	d0ee      	beq.n	800ac10 <_strtod_l+0x8b8>
 800ac32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac34:	9a08      	ldr	r2, [sp, #32]
 800ac36:	4650      	mov	r0, sl
 800ac38:	4659      	mov	r1, fp
 800ac3a:	b1bb      	cbz	r3, 800ac6c <_strtod_l+0x914>
 800ac3c:	f7ff fb6e 	bl	800a31c <sulp>
 800ac40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac44:	ec53 2b10 	vmov	r2, r3, d0
 800ac48:	f7f5 fb30 	bl	80002ac <__adddf3>
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	468b      	mov	fp, r1
 800ac50:	e7de      	b.n	800ac10 <_strtod_l+0x8b8>
 800ac52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ac62:	e7d5      	b.n	800ac10 <_strtod_l+0x8b8>
 800ac64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac66:	ea13 0f0a 	tst.w	r3, sl
 800ac6a:	e7e1      	b.n	800ac30 <_strtod_l+0x8d8>
 800ac6c:	f7ff fb56 	bl	800a31c <sulp>
 800ac70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac74:	ec53 2b10 	vmov	r2, r3, d0
 800ac78:	f7f5 fb16 	bl	80002a8 <__aeabi_dsub>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4682      	mov	sl, r0
 800ac82:	468b      	mov	fp, r1
 800ac84:	f7f5 ff30 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d0c1      	beq.n	800ac10 <_strtod_l+0x8b8>
 800ac8c:	e619      	b.n	800a8c2 <_strtod_l+0x56a>
 800ac8e:	4641      	mov	r1, r8
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7ff facd 	bl	800a230 <__ratio>
 800ac96:	ec57 6b10 	vmov	r6, r7, d0
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 ff34 	bl	8000b10 <__aeabi_dcmple>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d06f      	beq.n	800ad8c <_strtod_l+0xa34>
 800acac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d17a      	bne.n	800ada8 <_strtod_l+0xa50>
 800acb2:	f1ba 0f00 	cmp.w	sl, #0
 800acb6:	d158      	bne.n	800ad6a <_strtod_l+0xa12>
 800acb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d15a      	bne.n	800ad78 <_strtod_l+0xa20>
 800acc2:	4b64      	ldr	r3, [pc, #400]	@ (800ae54 <_strtod_l+0xafc>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 ff17 	bl	8000afc <__aeabi_dcmplt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d159      	bne.n	800ad86 <_strtod_l+0xa2e>
 800acd2:	4630      	mov	r0, r6
 800acd4:	4639      	mov	r1, r7
 800acd6:	4b60      	ldr	r3, [pc, #384]	@ (800ae58 <_strtod_l+0xb00>)
 800acd8:	2200      	movs	r2, #0
 800acda:	f7f5 fc9d 	bl	8000618 <__aeabi_dmul>
 800acde:	4606      	mov	r6, r0
 800ace0:	460f      	mov	r7, r1
 800ace2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ace6:	9606      	str	r6, [sp, #24]
 800ace8:	9307      	str	r3, [sp, #28]
 800acea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acee:	4d57      	ldr	r5, [pc, #348]	@ (800ae4c <_strtod_l+0xaf4>)
 800acf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf6:	401d      	ands	r5, r3
 800acf8:	4b58      	ldr	r3, [pc, #352]	@ (800ae5c <_strtod_l+0xb04>)
 800acfa:	429d      	cmp	r5, r3
 800acfc:	f040 80b2 	bne.w	800ae64 <_strtod_l+0xb0c>
 800ad00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ad06:	ec4b ab10 	vmov	d0, sl, fp
 800ad0a:	f7ff f9c9 	bl	800a0a0 <__ulp>
 800ad0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad12:	ec51 0b10 	vmov	r0, r1, d0
 800ad16:	f7f5 fc7f 	bl	8000618 <__aeabi_dmul>
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	f7f5 fac5 	bl	80002ac <__adddf3>
 800ad22:	460b      	mov	r3, r1
 800ad24:	4949      	ldr	r1, [pc, #292]	@ (800ae4c <_strtod_l+0xaf4>)
 800ad26:	4a4e      	ldr	r2, [pc, #312]	@ (800ae60 <_strtod_l+0xb08>)
 800ad28:	4019      	ands	r1, r3
 800ad2a:	4291      	cmp	r1, r2
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	d942      	bls.n	800adb6 <_strtod_l+0xa5e>
 800ad30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad32:	4b47      	ldr	r3, [pc, #284]	@ (800ae50 <_strtod_l+0xaf8>)
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d103      	bne.n	800ad40 <_strtod_l+0x9e8>
 800ad38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	f43f ad2b 	beq.w	800a796 <_strtod_l+0x43e>
 800ad40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ae50 <_strtod_l+0xaf8>
 800ad44:	f04f 3aff 	mov.w	sl, #4294967295
 800ad48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad4a:	9805      	ldr	r0, [sp, #20]
 800ad4c:	f7fe fe74 	bl	8009a38 <_Bfree>
 800ad50:	9805      	ldr	r0, [sp, #20]
 800ad52:	4649      	mov	r1, r9
 800ad54:	f7fe fe70 	bl	8009a38 <_Bfree>
 800ad58:	9805      	ldr	r0, [sp, #20]
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	f7fe fe6c 	bl	8009a38 <_Bfree>
 800ad60:	9805      	ldr	r0, [sp, #20]
 800ad62:	4621      	mov	r1, r4
 800ad64:	f7fe fe68 	bl	8009a38 <_Bfree>
 800ad68:	e618      	b.n	800a99c <_strtod_l+0x644>
 800ad6a:	f1ba 0f01 	cmp.w	sl, #1
 800ad6e:	d103      	bne.n	800ad78 <_strtod_l+0xa20>
 800ad70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f43f ada5 	beq.w	800a8c2 <_strtod_l+0x56a>
 800ad78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ae28 <_strtod_l+0xad0>
 800ad7c:	4f35      	ldr	r7, [pc, #212]	@ (800ae54 <_strtod_l+0xafc>)
 800ad7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad82:	2600      	movs	r6, #0
 800ad84:	e7b1      	b.n	800acea <_strtod_l+0x992>
 800ad86:	4f34      	ldr	r7, [pc, #208]	@ (800ae58 <_strtod_l+0xb00>)
 800ad88:	2600      	movs	r6, #0
 800ad8a:	e7aa      	b.n	800ace2 <_strtod_l+0x98a>
 800ad8c:	4b32      	ldr	r3, [pc, #200]	@ (800ae58 <_strtod_l+0xb00>)
 800ad8e:	4630      	mov	r0, r6
 800ad90:	4639      	mov	r1, r7
 800ad92:	2200      	movs	r2, #0
 800ad94:	f7f5 fc40 	bl	8000618 <__aeabi_dmul>
 800ad98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d09f      	beq.n	800ace2 <_strtod_l+0x98a>
 800ada2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ada6:	e7a0      	b.n	800acea <_strtod_l+0x992>
 800ada8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ae30 <_strtod_l+0xad8>
 800adac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800adb0:	ec57 6b17 	vmov	r6, r7, d7
 800adb4:	e799      	b.n	800acea <_strtod_l+0x992>
 800adb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1c1      	bne.n	800ad48 <_strtod_l+0x9f0>
 800adc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adc8:	0d1b      	lsrs	r3, r3, #20
 800adca:	051b      	lsls	r3, r3, #20
 800adcc:	429d      	cmp	r5, r3
 800adce:	d1bb      	bne.n	800ad48 <_strtod_l+0x9f0>
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 ff80 	bl	8000cd8 <__aeabi_d2lz>
 800add8:	f7f5 fbf0 	bl	80005bc <__aeabi_l2d>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fa60 	bl	80002a8 <__aeabi_dsub>
 800ade8:	460b      	mov	r3, r1
 800adea:	4602      	mov	r2, r0
 800adec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800adf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800adf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adf6:	ea46 060a 	orr.w	r6, r6, sl
 800adfa:	431e      	orrs	r6, r3
 800adfc:	d06f      	beq.n	800aede <_strtod_l+0xb86>
 800adfe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae38 <_strtod_l+0xae0>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fe7a 	bl	8000afc <__aeabi_dcmplt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f47f accf 	bne.w	800a7ac <_strtod_l+0x454>
 800ae0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ae40 <_strtod_l+0xae8>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae18:	f7f5 fe8e 	bl	8000b38 <__aeabi_dcmpgt>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d093      	beq.n	800ad48 <_strtod_l+0x9f0>
 800ae20:	e4c4      	b.n	800a7ac <_strtod_l+0x454>
 800ae22:	bf00      	nop
 800ae24:	f3af 8000 	nop.w
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	bff00000 	.word	0xbff00000
 800ae30:	00000000 	.word	0x00000000
 800ae34:	3ff00000 	.word	0x3ff00000
 800ae38:	94a03595 	.word	0x94a03595
 800ae3c:	3fdfffff 	.word	0x3fdfffff
 800ae40:	35afe535 	.word	0x35afe535
 800ae44:	3fe00000 	.word	0x3fe00000
 800ae48:	000fffff 	.word	0x000fffff
 800ae4c:	7ff00000 	.word	0x7ff00000
 800ae50:	7fefffff 	.word	0x7fefffff
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	3fe00000 	.word	0x3fe00000
 800ae5c:	7fe00000 	.word	0x7fe00000
 800ae60:	7c9fffff 	.word	0x7c9fffff
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	b323      	cbz	r3, 800aeb2 <_strtod_l+0xb5a>
 800ae68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae6c:	d821      	bhi.n	800aeb2 <_strtod_l+0xb5a>
 800ae6e:	a328      	add	r3, pc, #160	@ (adr r3, 800af10 <_strtod_l+0xbb8>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	4630      	mov	r0, r6
 800ae76:	4639      	mov	r1, r7
 800ae78:	f7f5 fe4a 	bl	8000b10 <__aeabi_dcmple>
 800ae7c:	b1a0      	cbz	r0, 800aea8 <_strtod_l+0xb50>
 800ae7e:	4639      	mov	r1, r7
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7f5 fea1 	bl	8000bc8 <__aeabi_d2uiz>
 800ae86:	2801      	cmp	r0, #1
 800ae88:	bf38      	it	cc
 800ae8a:	2001      	movcc	r0, #1
 800ae8c:	f7f5 fb4a 	bl	8000524 <__aeabi_ui2d>
 800ae90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae92:	4606      	mov	r6, r0
 800ae94:	460f      	mov	r7, r1
 800ae96:	b9fb      	cbnz	r3, 800aed8 <_strtod_l+0xb80>
 800ae98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae9c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae9e:	9315      	str	r3, [sp, #84]	@ 0x54
 800aea0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aea4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aea8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aeaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aeae:	1b5b      	subs	r3, r3, r5
 800aeb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aeb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aeb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aeba:	f7ff f8f1 	bl	800a0a0 <__ulp>
 800aebe:	4650      	mov	r0, sl
 800aec0:	ec53 2b10 	vmov	r2, r3, d0
 800aec4:	4659      	mov	r1, fp
 800aec6:	f7f5 fba7 	bl	8000618 <__aeabi_dmul>
 800aeca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aece:	f7f5 f9ed 	bl	80002ac <__adddf3>
 800aed2:	4682      	mov	sl, r0
 800aed4:	468b      	mov	fp, r1
 800aed6:	e770      	b.n	800adba <_strtod_l+0xa62>
 800aed8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aedc:	e7e0      	b.n	800aea0 <_strtod_l+0xb48>
 800aede:	a30e      	add	r3, pc, #56	@ (adr r3, 800af18 <_strtod_l+0xbc0>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f7f5 fe0a 	bl	8000afc <__aeabi_dcmplt>
 800aee8:	e798      	b.n	800ae1c <_strtod_l+0xac4>
 800aeea:	2300      	movs	r3, #0
 800aeec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	f7ff ba6d 	b.w	800a3d2 <_strtod_l+0x7a>
 800aef8:	2a65      	cmp	r2, #101	@ 0x65
 800aefa:	f43f ab66 	beq.w	800a5ca <_strtod_l+0x272>
 800aefe:	2a45      	cmp	r2, #69	@ 0x45
 800af00:	f43f ab63 	beq.w	800a5ca <_strtod_l+0x272>
 800af04:	2301      	movs	r3, #1
 800af06:	f7ff bb9e 	b.w	800a646 <_strtod_l+0x2ee>
 800af0a:	bf00      	nop
 800af0c:	f3af 8000 	nop.w
 800af10:	ffc00000 	.word	0xffc00000
 800af14:	41dfffff 	.word	0x41dfffff
 800af18:	94a03595 	.word	0x94a03595
 800af1c:	3fcfffff 	.word	0x3fcfffff

0800af20 <_strtod_r>:
 800af20:	4b01      	ldr	r3, [pc, #4]	@ (800af28 <_strtod_r+0x8>)
 800af22:	f7ff ba19 	b.w	800a358 <_strtod_l>
 800af26:	bf00      	nop
 800af28:	20000078 	.word	0x20000078

0800af2c <_strtol_l.constprop.0>:
 800af2c:	2b24      	cmp	r3, #36	@ 0x24
 800af2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af32:	4686      	mov	lr, r0
 800af34:	4690      	mov	r8, r2
 800af36:	d801      	bhi.n	800af3c <_strtol_l.constprop.0+0x10>
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d106      	bne.n	800af4a <_strtol_l.constprop.0+0x1e>
 800af3c:	f7fd fdbc 	bl	8008ab8 <__errno>
 800af40:	2316      	movs	r3, #22
 800af42:	6003      	str	r3, [r0, #0]
 800af44:	2000      	movs	r0, #0
 800af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4a:	4834      	ldr	r0, [pc, #208]	@ (800b01c <_strtol_l.constprop.0+0xf0>)
 800af4c:	460d      	mov	r5, r1
 800af4e:	462a      	mov	r2, r5
 800af50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af54:	5d06      	ldrb	r6, [r0, r4]
 800af56:	f016 0608 	ands.w	r6, r6, #8
 800af5a:	d1f8      	bne.n	800af4e <_strtol_l.constprop.0+0x22>
 800af5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af5e:	d12d      	bne.n	800afbc <_strtol_l.constprop.0+0x90>
 800af60:	782c      	ldrb	r4, [r5, #0]
 800af62:	2601      	movs	r6, #1
 800af64:	1c95      	adds	r5, r2, #2
 800af66:	f033 0210 	bics.w	r2, r3, #16
 800af6a:	d109      	bne.n	800af80 <_strtol_l.constprop.0+0x54>
 800af6c:	2c30      	cmp	r4, #48	@ 0x30
 800af6e:	d12a      	bne.n	800afc6 <_strtol_l.constprop.0+0x9a>
 800af70:	782a      	ldrb	r2, [r5, #0]
 800af72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af76:	2a58      	cmp	r2, #88	@ 0x58
 800af78:	d125      	bne.n	800afc6 <_strtol_l.constprop.0+0x9a>
 800af7a:	786c      	ldrb	r4, [r5, #1]
 800af7c:	2310      	movs	r3, #16
 800af7e:	3502      	adds	r5, #2
 800af80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af84:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af88:	2200      	movs	r2, #0
 800af8a:	fbbc f9f3 	udiv	r9, ip, r3
 800af8e:	4610      	mov	r0, r2
 800af90:	fb03 ca19 	mls	sl, r3, r9, ip
 800af94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af98:	2f09      	cmp	r7, #9
 800af9a:	d81b      	bhi.n	800afd4 <_strtol_l.constprop.0+0xa8>
 800af9c:	463c      	mov	r4, r7
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	dd27      	ble.n	800aff2 <_strtol_l.constprop.0+0xc6>
 800afa2:	1c57      	adds	r7, r2, #1
 800afa4:	d007      	beq.n	800afb6 <_strtol_l.constprop.0+0x8a>
 800afa6:	4581      	cmp	r9, r0
 800afa8:	d320      	bcc.n	800afec <_strtol_l.constprop.0+0xc0>
 800afaa:	d101      	bne.n	800afb0 <_strtol_l.constprop.0+0x84>
 800afac:	45a2      	cmp	sl, r4
 800afae:	db1d      	blt.n	800afec <_strtol_l.constprop.0+0xc0>
 800afb0:	fb00 4003 	mla	r0, r0, r3, r4
 800afb4:	2201      	movs	r2, #1
 800afb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afba:	e7eb      	b.n	800af94 <_strtol_l.constprop.0+0x68>
 800afbc:	2c2b      	cmp	r4, #43	@ 0x2b
 800afbe:	bf04      	itt	eq
 800afc0:	782c      	ldrbeq	r4, [r5, #0]
 800afc2:	1c95      	addeq	r5, r2, #2
 800afc4:	e7cf      	b.n	800af66 <_strtol_l.constprop.0+0x3a>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1da      	bne.n	800af80 <_strtol_l.constprop.0+0x54>
 800afca:	2c30      	cmp	r4, #48	@ 0x30
 800afcc:	bf0c      	ite	eq
 800afce:	2308      	moveq	r3, #8
 800afd0:	230a      	movne	r3, #10
 800afd2:	e7d5      	b.n	800af80 <_strtol_l.constprop.0+0x54>
 800afd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afd8:	2f19      	cmp	r7, #25
 800afda:	d801      	bhi.n	800afe0 <_strtol_l.constprop.0+0xb4>
 800afdc:	3c37      	subs	r4, #55	@ 0x37
 800afde:	e7de      	b.n	800af9e <_strtol_l.constprop.0+0x72>
 800afe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afe4:	2f19      	cmp	r7, #25
 800afe6:	d804      	bhi.n	800aff2 <_strtol_l.constprop.0+0xc6>
 800afe8:	3c57      	subs	r4, #87	@ 0x57
 800afea:	e7d8      	b.n	800af9e <_strtol_l.constprop.0+0x72>
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	e7e1      	b.n	800afb6 <_strtol_l.constprop.0+0x8a>
 800aff2:	1c53      	adds	r3, r2, #1
 800aff4:	d108      	bne.n	800b008 <_strtol_l.constprop.0+0xdc>
 800aff6:	2322      	movs	r3, #34	@ 0x22
 800aff8:	f8ce 3000 	str.w	r3, [lr]
 800affc:	4660      	mov	r0, ip
 800affe:	f1b8 0f00 	cmp.w	r8, #0
 800b002:	d0a0      	beq.n	800af46 <_strtol_l.constprop.0+0x1a>
 800b004:	1e69      	subs	r1, r5, #1
 800b006:	e006      	b.n	800b016 <_strtol_l.constprop.0+0xea>
 800b008:	b106      	cbz	r6, 800b00c <_strtol_l.constprop.0+0xe0>
 800b00a:	4240      	negs	r0, r0
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	d099      	beq.n	800af46 <_strtol_l.constprop.0+0x1a>
 800b012:	2a00      	cmp	r2, #0
 800b014:	d1f6      	bne.n	800b004 <_strtol_l.constprop.0+0xd8>
 800b016:	f8c8 1000 	str.w	r1, [r8]
 800b01a:	e794      	b.n	800af46 <_strtol_l.constprop.0+0x1a>
 800b01c:	0800c5b9 	.word	0x0800c5b9

0800b020 <_strtol_r>:
 800b020:	f7ff bf84 	b.w	800af2c <_strtol_l.constprop.0>

0800b024 <__ssputs_r>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	688e      	ldr	r6, [r1, #8]
 800b02a:	461f      	mov	r7, r3
 800b02c:	42be      	cmp	r6, r7
 800b02e:	680b      	ldr	r3, [r1, #0]
 800b030:	4682      	mov	sl, r0
 800b032:	460c      	mov	r4, r1
 800b034:	4690      	mov	r8, r2
 800b036:	d82d      	bhi.n	800b094 <__ssputs_r+0x70>
 800b038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b03c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b040:	d026      	beq.n	800b090 <__ssputs_r+0x6c>
 800b042:	6965      	ldr	r5, [r4, #20]
 800b044:	6909      	ldr	r1, [r1, #16]
 800b046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b04a:	eba3 0901 	sub.w	r9, r3, r1
 800b04e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b052:	1c7b      	adds	r3, r7, #1
 800b054:	444b      	add	r3, r9
 800b056:	106d      	asrs	r5, r5, #1
 800b058:	429d      	cmp	r5, r3
 800b05a:	bf38      	it	cc
 800b05c:	461d      	movcc	r5, r3
 800b05e:	0553      	lsls	r3, r2, #21
 800b060:	d527      	bpl.n	800b0b2 <__ssputs_r+0x8e>
 800b062:	4629      	mov	r1, r5
 800b064:	f7fe fc1c 	bl	80098a0 <_malloc_r>
 800b068:	4606      	mov	r6, r0
 800b06a:	b360      	cbz	r0, 800b0c6 <__ssputs_r+0xa2>
 800b06c:	6921      	ldr	r1, [r4, #16]
 800b06e:	464a      	mov	r2, r9
 800b070:	f000 fa18 	bl	800b4a4 <memcpy>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b07e:	81a3      	strh	r3, [r4, #12]
 800b080:	6126      	str	r6, [r4, #16]
 800b082:	6165      	str	r5, [r4, #20]
 800b084:	444e      	add	r6, r9
 800b086:	eba5 0509 	sub.w	r5, r5, r9
 800b08a:	6026      	str	r6, [r4, #0]
 800b08c:	60a5      	str	r5, [r4, #8]
 800b08e:	463e      	mov	r6, r7
 800b090:	42be      	cmp	r6, r7
 800b092:	d900      	bls.n	800b096 <__ssputs_r+0x72>
 800b094:	463e      	mov	r6, r7
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	4632      	mov	r2, r6
 800b09a:	4641      	mov	r1, r8
 800b09c:	f000 f9c6 	bl	800b42c <memmove>
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	1b9b      	subs	r3, r3, r6
 800b0a4:	60a3      	str	r3, [r4, #8]
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	4433      	add	r3, r6
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	462a      	mov	r2, r5
 800b0b4:	f000 fd89 	bl	800bbca <_realloc_r>
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d1e0      	bne.n	800b080 <__ssputs_r+0x5c>
 800b0be:	6921      	ldr	r1, [r4, #16]
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	f7fe fb79 	bl	80097b8 <_free_r>
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	f8ca 3000 	str.w	r3, [sl]
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0d2:	81a3      	strh	r3, [r4, #12]
 800b0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d8:	e7e9      	b.n	800b0ae <__ssputs_r+0x8a>
	...

0800b0dc <_svfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	4698      	mov	r8, r3
 800b0e2:	898b      	ldrh	r3, [r1, #12]
 800b0e4:	061b      	lsls	r3, r3, #24
 800b0e6:	b09d      	sub	sp, #116	@ 0x74
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	d510      	bpl.n	800b112 <_svfiprintf_r+0x36>
 800b0f0:	690b      	ldr	r3, [r1, #16]
 800b0f2:	b973      	cbnz	r3, 800b112 <_svfiprintf_r+0x36>
 800b0f4:	2140      	movs	r1, #64	@ 0x40
 800b0f6:	f7fe fbd3 	bl	80098a0 <_malloc_r>
 800b0fa:	6028      	str	r0, [r5, #0]
 800b0fc:	6128      	str	r0, [r5, #16]
 800b0fe:	b930      	cbnz	r0, 800b10e <_svfiprintf_r+0x32>
 800b100:	230c      	movs	r3, #12
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	b01d      	add	sp, #116	@ 0x74
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	2340      	movs	r3, #64	@ 0x40
 800b110:	616b      	str	r3, [r5, #20]
 800b112:	2300      	movs	r3, #0
 800b114:	9309      	str	r3, [sp, #36]	@ 0x24
 800b116:	2320      	movs	r3, #32
 800b118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b120:	2330      	movs	r3, #48	@ 0x30
 800b122:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b2c0 <_svfiprintf_r+0x1e4>
 800b126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b12a:	f04f 0901 	mov.w	r9, #1
 800b12e:	4623      	mov	r3, r4
 800b130:	469a      	mov	sl, r3
 800b132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b136:	b10a      	cbz	r2, 800b13c <_svfiprintf_r+0x60>
 800b138:	2a25      	cmp	r2, #37	@ 0x25
 800b13a:	d1f9      	bne.n	800b130 <_svfiprintf_r+0x54>
 800b13c:	ebba 0b04 	subs.w	fp, sl, r4
 800b140:	d00b      	beq.n	800b15a <_svfiprintf_r+0x7e>
 800b142:	465b      	mov	r3, fp
 800b144:	4622      	mov	r2, r4
 800b146:	4629      	mov	r1, r5
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ff6b 	bl	800b024 <__ssputs_r>
 800b14e:	3001      	adds	r0, #1
 800b150:	f000 80a7 	beq.w	800b2a2 <_svfiprintf_r+0x1c6>
 800b154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b156:	445a      	add	r2, fp
 800b158:	9209      	str	r2, [sp, #36]	@ 0x24
 800b15a:	f89a 3000 	ldrb.w	r3, [sl]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 809f 	beq.w	800b2a2 <_svfiprintf_r+0x1c6>
 800b164:	2300      	movs	r3, #0
 800b166:	f04f 32ff 	mov.w	r2, #4294967295
 800b16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b16e:	f10a 0a01 	add.w	sl, sl, #1
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b17a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b17c:	4654      	mov	r4, sl
 800b17e:	2205      	movs	r2, #5
 800b180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b184:	484e      	ldr	r0, [pc, #312]	@ (800b2c0 <_svfiprintf_r+0x1e4>)
 800b186:	f7f5 f833 	bl	80001f0 <memchr>
 800b18a:	9a04      	ldr	r2, [sp, #16]
 800b18c:	b9d8      	cbnz	r0, 800b1c6 <_svfiprintf_r+0xea>
 800b18e:	06d0      	lsls	r0, r2, #27
 800b190:	bf44      	itt	mi
 800b192:	2320      	movmi	r3, #32
 800b194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b198:	0711      	lsls	r1, r2, #28
 800b19a:	bf44      	itt	mi
 800b19c:	232b      	movmi	r3, #43	@ 0x2b
 800b19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1a8:	d015      	beq.n	800b1d6 <_svfiprintf_r+0xfa>
 800b1aa:	9a07      	ldr	r2, [sp, #28]
 800b1ac:	4654      	mov	r4, sl
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f04f 0c0a 	mov.w	ip, #10
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ba:	3b30      	subs	r3, #48	@ 0x30
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	d94b      	bls.n	800b258 <_svfiprintf_r+0x17c>
 800b1c0:	b1b0      	cbz	r0, 800b1f0 <_svfiprintf_r+0x114>
 800b1c2:	9207      	str	r2, [sp, #28]
 800b1c4:	e014      	b.n	800b1f0 <_svfiprintf_r+0x114>
 800b1c6:	eba0 0308 	sub.w	r3, r0, r8
 800b1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	46a2      	mov	sl, r4
 800b1d4:	e7d2      	b.n	800b17c <_svfiprintf_r+0xa0>
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	9103      	str	r1, [sp, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bfbb      	ittet	lt
 800b1e2:	425b      	neglt	r3, r3
 800b1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1e8:	9307      	strge	r3, [sp, #28]
 800b1ea:	9307      	strlt	r3, [sp, #28]
 800b1ec:	bfb8      	it	lt
 800b1ee:	9204      	strlt	r2, [sp, #16]
 800b1f0:	7823      	ldrb	r3, [r4, #0]
 800b1f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1f4:	d10a      	bne.n	800b20c <_svfiprintf_r+0x130>
 800b1f6:	7863      	ldrb	r3, [r4, #1]
 800b1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1fa:	d132      	bne.n	800b262 <_svfiprintf_r+0x186>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9203      	str	r2, [sp, #12]
 800b204:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b208:	3402      	adds	r4, #2
 800b20a:	9305      	str	r3, [sp, #20]
 800b20c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b2d0 <_svfiprintf_r+0x1f4>
 800b210:	7821      	ldrb	r1, [r4, #0]
 800b212:	2203      	movs	r2, #3
 800b214:	4650      	mov	r0, sl
 800b216:	f7f4 ffeb 	bl	80001f0 <memchr>
 800b21a:	b138      	cbz	r0, 800b22c <_svfiprintf_r+0x150>
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	eba0 000a 	sub.w	r0, r0, sl
 800b222:	2240      	movs	r2, #64	@ 0x40
 800b224:	4082      	lsls	r2, r0
 800b226:	4313      	orrs	r3, r2
 800b228:	3401      	adds	r4, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b230:	4824      	ldr	r0, [pc, #144]	@ (800b2c4 <_svfiprintf_r+0x1e8>)
 800b232:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b236:	2206      	movs	r2, #6
 800b238:	f7f4 ffda 	bl	80001f0 <memchr>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d036      	beq.n	800b2ae <_svfiprintf_r+0x1d2>
 800b240:	4b21      	ldr	r3, [pc, #132]	@ (800b2c8 <_svfiprintf_r+0x1ec>)
 800b242:	bb1b      	cbnz	r3, 800b28c <_svfiprintf_r+0x1b0>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	3307      	adds	r3, #7
 800b248:	f023 0307 	bic.w	r3, r3, #7
 800b24c:	3308      	adds	r3, #8
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b252:	4433      	add	r3, r6
 800b254:	9309      	str	r3, [sp, #36]	@ 0x24
 800b256:	e76a      	b.n	800b12e <_svfiprintf_r+0x52>
 800b258:	fb0c 3202 	mla	r2, ip, r2, r3
 800b25c:	460c      	mov	r4, r1
 800b25e:	2001      	movs	r0, #1
 800b260:	e7a8      	b.n	800b1b4 <_svfiprintf_r+0xd8>
 800b262:	2300      	movs	r3, #0
 800b264:	3401      	adds	r4, #1
 800b266:	9305      	str	r3, [sp, #20]
 800b268:	4619      	mov	r1, r3
 800b26a:	f04f 0c0a 	mov.w	ip, #10
 800b26e:	4620      	mov	r0, r4
 800b270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b274:	3a30      	subs	r2, #48	@ 0x30
 800b276:	2a09      	cmp	r2, #9
 800b278:	d903      	bls.n	800b282 <_svfiprintf_r+0x1a6>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0c6      	beq.n	800b20c <_svfiprintf_r+0x130>
 800b27e:	9105      	str	r1, [sp, #20]
 800b280:	e7c4      	b.n	800b20c <_svfiprintf_r+0x130>
 800b282:	fb0c 2101 	mla	r1, ip, r1, r2
 800b286:	4604      	mov	r4, r0
 800b288:	2301      	movs	r3, #1
 800b28a:	e7f0      	b.n	800b26e <_svfiprintf_r+0x192>
 800b28c:	ab03      	add	r3, sp, #12
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	462a      	mov	r2, r5
 800b292:	4b0e      	ldr	r3, [pc, #56]	@ (800b2cc <_svfiprintf_r+0x1f0>)
 800b294:	a904      	add	r1, sp, #16
 800b296:	4638      	mov	r0, r7
 800b298:	f7fc fcb8 	bl	8007c0c <_printf_float>
 800b29c:	1c42      	adds	r2, r0, #1
 800b29e:	4606      	mov	r6, r0
 800b2a0:	d1d6      	bne.n	800b250 <_svfiprintf_r+0x174>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	065b      	lsls	r3, r3, #25
 800b2a6:	f53f af2d 	bmi.w	800b104 <_svfiprintf_r+0x28>
 800b2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ac:	e72c      	b.n	800b108 <_svfiprintf_r+0x2c>
 800b2ae:	ab03      	add	r3, sp, #12
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4b05      	ldr	r3, [pc, #20]	@ (800b2cc <_svfiprintf_r+0x1f0>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7fc ff3f 	bl	800813c <_printf_i>
 800b2be:	e7ed      	b.n	800b29c <_svfiprintf_r+0x1c0>
 800b2c0:	0800c6b9 	.word	0x0800c6b9
 800b2c4:	0800c6c3 	.word	0x0800c6c3
 800b2c8:	08007c0d 	.word	0x08007c0d
 800b2cc:	0800b025 	.word	0x0800b025
 800b2d0:	0800c6bf 	.word	0x0800c6bf

0800b2d4 <__sflush_r>:
 800b2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	0716      	lsls	r6, r2, #28
 800b2de:	4605      	mov	r5, r0
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	d454      	bmi.n	800b38e <__sflush_r+0xba>
 800b2e4:	684b      	ldr	r3, [r1, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dc02      	bgt.n	800b2f0 <__sflush_r+0x1c>
 800b2ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dd48      	ble.n	800b382 <__sflush_r+0xae>
 800b2f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d045      	beq.n	800b382 <__sflush_r+0xae>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2fc:	682f      	ldr	r7, [r5, #0]
 800b2fe:	6a21      	ldr	r1, [r4, #32]
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	d030      	beq.n	800b366 <__sflush_r+0x92>
 800b304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	0759      	lsls	r1, r3, #29
 800b30a:	d505      	bpl.n	800b318 <__sflush_r+0x44>
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	1ad2      	subs	r2, r2, r3
 800b310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b312:	b10b      	cbz	r3, 800b318 <__sflush_r+0x44>
 800b314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	2300      	movs	r3, #0
 800b31a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b31c:	6a21      	ldr	r1, [r4, #32]
 800b31e:	4628      	mov	r0, r5
 800b320:	47b0      	blx	r6
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	d106      	bne.n	800b336 <__sflush_r+0x62>
 800b328:	6829      	ldr	r1, [r5, #0]
 800b32a:	291d      	cmp	r1, #29
 800b32c:	d82b      	bhi.n	800b386 <__sflush_r+0xb2>
 800b32e:	4a2a      	ldr	r2, [pc, #168]	@ (800b3d8 <__sflush_r+0x104>)
 800b330:	410a      	asrs	r2, r1
 800b332:	07d6      	lsls	r6, r2, #31
 800b334:	d427      	bmi.n	800b386 <__sflush_r+0xb2>
 800b336:	2200      	movs	r2, #0
 800b338:	6062      	str	r2, [r4, #4]
 800b33a:	04d9      	lsls	r1, r3, #19
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	6022      	str	r2, [r4, #0]
 800b340:	d504      	bpl.n	800b34c <__sflush_r+0x78>
 800b342:	1c42      	adds	r2, r0, #1
 800b344:	d101      	bne.n	800b34a <__sflush_r+0x76>
 800b346:	682b      	ldr	r3, [r5, #0]
 800b348:	b903      	cbnz	r3, 800b34c <__sflush_r+0x78>
 800b34a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b34e:	602f      	str	r7, [r5, #0]
 800b350:	b1b9      	cbz	r1, 800b382 <__sflush_r+0xae>
 800b352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b356:	4299      	cmp	r1, r3
 800b358:	d002      	beq.n	800b360 <__sflush_r+0x8c>
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7fe fa2c 	bl	80097b8 <_free_r>
 800b360:	2300      	movs	r3, #0
 800b362:	6363      	str	r3, [r4, #52]	@ 0x34
 800b364:	e00d      	b.n	800b382 <__sflush_r+0xae>
 800b366:	2301      	movs	r3, #1
 800b368:	4628      	mov	r0, r5
 800b36a:	47b0      	blx	r6
 800b36c:	4602      	mov	r2, r0
 800b36e:	1c50      	adds	r0, r2, #1
 800b370:	d1c9      	bne.n	800b306 <__sflush_r+0x32>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d0c6      	beq.n	800b306 <__sflush_r+0x32>
 800b378:	2b1d      	cmp	r3, #29
 800b37a:	d001      	beq.n	800b380 <__sflush_r+0xac>
 800b37c:	2b16      	cmp	r3, #22
 800b37e:	d11e      	bne.n	800b3be <__sflush_r+0xea>
 800b380:	602f      	str	r7, [r5, #0]
 800b382:	2000      	movs	r0, #0
 800b384:	e022      	b.n	800b3cc <__sflush_r+0xf8>
 800b386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38a:	b21b      	sxth	r3, r3
 800b38c:	e01b      	b.n	800b3c6 <__sflush_r+0xf2>
 800b38e:	690f      	ldr	r7, [r1, #16]
 800b390:	2f00      	cmp	r7, #0
 800b392:	d0f6      	beq.n	800b382 <__sflush_r+0xae>
 800b394:	0793      	lsls	r3, r2, #30
 800b396:	680e      	ldr	r6, [r1, #0]
 800b398:	bf08      	it	eq
 800b39a:	694b      	ldreq	r3, [r1, #20]
 800b39c:	600f      	str	r7, [r1, #0]
 800b39e:	bf18      	it	ne
 800b3a0:	2300      	movne	r3, #0
 800b3a2:	eba6 0807 	sub.w	r8, r6, r7
 800b3a6:	608b      	str	r3, [r1, #8]
 800b3a8:	f1b8 0f00 	cmp.w	r8, #0
 800b3ac:	dde9      	ble.n	800b382 <__sflush_r+0xae>
 800b3ae:	6a21      	ldr	r1, [r4, #32]
 800b3b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3b2:	4643      	mov	r3, r8
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b0      	blx	r6
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	dc08      	bgt.n	800b3d0 <__sflush_r+0xfc>
 800b3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d0:	4407      	add	r7, r0
 800b3d2:	eba8 0800 	sub.w	r8, r8, r0
 800b3d6:	e7e7      	b.n	800b3a8 <__sflush_r+0xd4>
 800b3d8:	dfbffffe 	.word	0xdfbffffe

0800b3dc <_fflush_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	690b      	ldr	r3, [r1, #16]
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b913      	cbnz	r3, 800b3ec <_fflush_r+0x10>
 800b3e6:	2500      	movs	r5, #0
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	b118      	cbz	r0, 800b3f6 <_fflush_r+0x1a>
 800b3ee:	6a03      	ldr	r3, [r0, #32]
 800b3f0:	b90b      	cbnz	r3, 800b3f6 <_fflush_r+0x1a>
 800b3f2:	f7fd fa63 	bl	80088bc <__sinit>
 800b3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0f3      	beq.n	800b3e6 <_fflush_r+0xa>
 800b3fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b400:	07d0      	lsls	r0, r2, #31
 800b402:	d404      	bmi.n	800b40e <_fflush_r+0x32>
 800b404:	0599      	lsls	r1, r3, #22
 800b406:	d402      	bmi.n	800b40e <_fflush_r+0x32>
 800b408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b40a:	f7fd fb80 	bl	8008b0e <__retarget_lock_acquire_recursive>
 800b40e:	4628      	mov	r0, r5
 800b410:	4621      	mov	r1, r4
 800b412:	f7ff ff5f 	bl	800b2d4 <__sflush_r>
 800b416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b418:	07da      	lsls	r2, r3, #31
 800b41a:	4605      	mov	r5, r0
 800b41c:	d4e4      	bmi.n	800b3e8 <_fflush_r+0xc>
 800b41e:	89a3      	ldrh	r3, [r4, #12]
 800b420:	059b      	lsls	r3, r3, #22
 800b422:	d4e1      	bmi.n	800b3e8 <_fflush_r+0xc>
 800b424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b426:	f7fd fb73 	bl	8008b10 <__retarget_lock_release_recursive>
 800b42a:	e7dd      	b.n	800b3e8 <_fflush_r+0xc>

0800b42c <memmove>:
 800b42c:	4288      	cmp	r0, r1
 800b42e:	b510      	push	{r4, lr}
 800b430:	eb01 0402 	add.w	r4, r1, r2
 800b434:	d902      	bls.n	800b43c <memmove+0x10>
 800b436:	4284      	cmp	r4, r0
 800b438:	4623      	mov	r3, r4
 800b43a:	d807      	bhi.n	800b44c <memmove+0x20>
 800b43c:	1e43      	subs	r3, r0, #1
 800b43e:	42a1      	cmp	r1, r4
 800b440:	d008      	beq.n	800b454 <memmove+0x28>
 800b442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b44a:	e7f8      	b.n	800b43e <memmove+0x12>
 800b44c:	4402      	add	r2, r0
 800b44e:	4601      	mov	r1, r0
 800b450:	428a      	cmp	r2, r1
 800b452:	d100      	bne.n	800b456 <memmove+0x2a>
 800b454:	bd10      	pop	{r4, pc}
 800b456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b45e:	e7f7      	b.n	800b450 <memmove+0x24>

0800b460 <strncmp>:
 800b460:	b510      	push	{r4, lr}
 800b462:	b16a      	cbz	r2, 800b480 <strncmp+0x20>
 800b464:	3901      	subs	r1, #1
 800b466:	1884      	adds	r4, r0, r2
 800b468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b46c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b470:	429a      	cmp	r2, r3
 800b472:	d103      	bne.n	800b47c <strncmp+0x1c>
 800b474:	42a0      	cmp	r0, r4
 800b476:	d001      	beq.n	800b47c <strncmp+0x1c>
 800b478:	2a00      	cmp	r2, #0
 800b47a:	d1f5      	bne.n	800b468 <strncmp+0x8>
 800b47c:	1ad0      	subs	r0, r2, r3
 800b47e:	bd10      	pop	{r4, pc}
 800b480:	4610      	mov	r0, r2
 800b482:	e7fc      	b.n	800b47e <strncmp+0x1e>

0800b484 <_sbrk_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d06      	ldr	r5, [pc, #24]	@ (800b4a0 <_sbrk_r+0x1c>)
 800b488:	2300      	movs	r3, #0
 800b48a:	4604      	mov	r4, r0
 800b48c:	4608      	mov	r0, r1
 800b48e:	602b      	str	r3, [r5, #0]
 800b490:	f7f6 fe60 	bl	8002154 <_sbrk>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_sbrk_r+0x1a>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_sbrk_r+0x1a>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	200005a8 	.word	0x200005a8

0800b4a4 <memcpy>:
 800b4a4:	440a      	add	r2, r1
 800b4a6:	4291      	cmp	r1, r2
 800b4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4ac:	d100      	bne.n	800b4b0 <memcpy+0xc>
 800b4ae:	4770      	bx	lr
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ba:	4291      	cmp	r1, r2
 800b4bc:	d1f9      	bne.n	800b4b2 <memcpy+0xe>
 800b4be:	bd10      	pop	{r4, pc}

0800b4c0 <nan>:
 800b4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b4c8 <nan+0x8>
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	00000000 	.word	0x00000000
 800b4cc:	7ff80000 	.word	0x7ff80000

0800b4d0 <__assert_func>:
 800b4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4d2:	4614      	mov	r4, r2
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	4b09      	ldr	r3, [pc, #36]	@ (800b4fc <__assert_func+0x2c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4605      	mov	r5, r0
 800b4dc:	68d8      	ldr	r0, [r3, #12]
 800b4de:	b954      	cbnz	r4, 800b4f6 <__assert_func+0x26>
 800b4e0:	4b07      	ldr	r3, [pc, #28]	@ (800b500 <__assert_func+0x30>)
 800b4e2:	461c      	mov	r4, r3
 800b4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4e8:	9100      	str	r1, [sp, #0]
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	4905      	ldr	r1, [pc, #20]	@ (800b504 <__assert_func+0x34>)
 800b4ee:	f000 fba7 	bl	800bc40 <fiprintf>
 800b4f2:	f000 fbb7 	bl	800bc64 <abort>
 800b4f6:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <__assert_func+0x38>)
 800b4f8:	e7f4      	b.n	800b4e4 <__assert_func+0x14>
 800b4fa:	bf00      	nop
 800b4fc:	20000028 	.word	0x20000028
 800b500:	0800c70d 	.word	0x0800c70d
 800b504:	0800c6df 	.word	0x0800c6df
 800b508:	0800c6d2 	.word	0x0800c6d2

0800b50c <_calloc_r>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	fba1 5402 	umull	r5, r4, r1, r2
 800b512:	b93c      	cbnz	r4, 800b524 <_calloc_r+0x18>
 800b514:	4629      	mov	r1, r5
 800b516:	f7fe f9c3 	bl	80098a0 <_malloc_r>
 800b51a:	4606      	mov	r6, r0
 800b51c:	b928      	cbnz	r0, 800b52a <_calloc_r+0x1e>
 800b51e:	2600      	movs	r6, #0
 800b520:	4630      	mov	r0, r6
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	220c      	movs	r2, #12
 800b526:	6002      	str	r2, [r0, #0]
 800b528:	e7f9      	b.n	800b51e <_calloc_r+0x12>
 800b52a:	462a      	mov	r2, r5
 800b52c:	4621      	mov	r1, r4
 800b52e:	f7fd fa5e 	bl	80089ee <memset>
 800b532:	e7f5      	b.n	800b520 <_calloc_r+0x14>

0800b534 <rshift>:
 800b534:	6903      	ldr	r3, [r0, #16]
 800b536:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b53a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b53e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b542:	f100 0414 	add.w	r4, r0, #20
 800b546:	dd45      	ble.n	800b5d4 <rshift+0xa0>
 800b548:	f011 011f 	ands.w	r1, r1, #31
 800b54c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b550:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b554:	d10c      	bne.n	800b570 <rshift+0x3c>
 800b556:	f100 0710 	add.w	r7, r0, #16
 800b55a:	4629      	mov	r1, r5
 800b55c:	42b1      	cmp	r1, r6
 800b55e:	d334      	bcc.n	800b5ca <rshift+0x96>
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	1eea      	subs	r2, r5, #3
 800b566:	4296      	cmp	r6, r2
 800b568:	bf38      	it	cc
 800b56a:	2300      	movcc	r3, #0
 800b56c:	4423      	add	r3, r4
 800b56e:	e015      	b.n	800b59c <rshift+0x68>
 800b570:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b574:	f1c1 0820 	rsb	r8, r1, #32
 800b578:	40cf      	lsrs	r7, r1
 800b57a:	f105 0e04 	add.w	lr, r5, #4
 800b57e:	46a1      	mov	r9, r4
 800b580:	4576      	cmp	r6, lr
 800b582:	46f4      	mov	ip, lr
 800b584:	d815      	bhi.n	800b5b2 <rshift+0x7e>
 800b586:	1a9a      	subs	r2, r3, r2
 800b588:	0092      	lsls	r2, r2, #2
 800b58a:	3a04      	subs	r2, #4
 800b58c:	3501      	adds	r5, #1
 800b58e:	42ae      	cmp	r6, r5
 800b590:	bf38      	it	cc
 800b592:	2200      	movcc	r2, #0
 800b594:	18a3      	adds	r3, r4, r2
 800b596:	50a7      	str	r7, [r4, r2]
 800b598:	b107      	cbz	r7, 800b59c <rshift+0x68>
 800b59a:	3304      	adds	r3, #4
 800b59c:	1b1a      	subs	r2, r3, r4
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b5a4:	bf08      	it	eq
 800b5a6:	2300      	moveq	r3, #0
 800b5a8:	6102      	str	r2, [r0, #16]
 800b5aa:	bf08      	it	eq
 800b5ac:	6143      	streq	r3, [r0, #20]
 800b5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	f8dc c000 	ldr.w	ip, [ip]
 800b5b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b5ba:	ea4c 0707 	orr.w	r7, ip, r7
 800b5be:	f849 7b04 	str.w	r7, [r9], #4
 800b5c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5c6:	40cf      	lsrs	r7, r1
 800b5c8:	e7da      	b.n	800b580 <rshift+0x4c>
 800b5ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5d2:	e7c3      	b.n	800b55c <rshift+0x28>
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	e7e1      	b.n	800b59c <rshift+0x68>

0800b5d8 <__hexdig_fun>:
 800b5d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d802      	bhi.n	800b5e6 <__hexdig_fun+0xe>
 800b5e0:	3820      	subs	r0, #32
 800b5e2:	b2c0      	uxtb	r0, r0
 800b5e4:	4770      	bx	lr
 800b5e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	d801      	bhi.n	800b5f2 <__hexdig_fun+0x1a>
 800b5ee:	3847      	subs	r0, #71	@ 0x47
 800b5f0:	e7f7      	b.n	800b5e2 <__hexdig_fun+0xa>
 800b5f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	d801      	bhi.n	800b5fe <__hexdig_fun+0x26>
 800b5fa:	3827      	subs	r0, #39	@ 0x27
 800b5fc:	e7f1      	b.n	800b5e2 <__hexdig_fun+0xa>
 800b5fe:	2000      	movs	r0, #0
 800b600:	4770      	bx	lr
	...

0800b604 <__gethex>:
 800b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	b085      	sub	sp, #20
 800b60a:	468a      	mov	sl, r1
 800b60c:	9302      	str	r3, [sp, #8]
 800b60e:	680b      	ldr	r3, [r1, #0]
 800b610:	9001      	str	r0, [sp, #4]
 800b612:	4690      	mov	r8, r2
 800b614:	1c9c      	adds	r4, r3, #2
 800b616:	46a1      	mov	r9, r4
 800b618:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b61c:	2830      	cmp	r0, #48	@ 0x30
 800b61e:	d0fa      	beq.n	800b616 <__gethex+0x12>
 800b620:	eba9 0303 	sub.w	r3, r9, r3
 800b624:	f1a3 0b02 	sub.w	fp, r3, #2
 800b628:	f7ff ffd6 	bl	800b5d8 <__hexdig_fun>
 800b62c:	4605      	mov	r5, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	d168      	bne.n	800b704 <__gethex+0x100>
 800b632:	49a0      	ldr	r1, [pc, #640]	@ (800b8b4 <__gethex+0x2b0>)
 800b634:	2201      	movs	r2, #1
 800b636:	4648      	mov	r0, r9
 800b638:	f7ff ff12 	bl	800b460 <strncmp>
 800b63c:	4607      	mov	r7, r0
 800b63e:	2800      	cmp	r0, #0
 800b640:	d167      	bne.n	800b712 <__gethex+0x10e>
 800b642:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b646:	4626      	mov	r6, r4
 800b648:	f7ff ffc6 	bl	800b5d8 <__hexdig_fun>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d062      	beq.n	800b716 <__gethex+0x112>
 800b650:	4623      	mov	r3, r4
 800b652:	7818      	ldrb	r0, [r3, #0]
 800b654:	2830      	cmp	r0, #48	@ 0x30
 800b656:	4699      	mov	r9, r3
 800b658:	f103 0301 	add.w	r3, r3, #1
 800b65c:	d0f9      	beq.n	800b652 <__gethex+0x4e>
 800b65e:	f7ff ffbb 	bl	800b5d8 <__hexdig_fun>
 800b662:	fab0 f580 	clz	r5, r0
 800b666:	096d      	lsrs	r5, r5, #5
 800b668:	f04f 0b01 	mov.w	fp, #1
 800b66c:	464a      	mov	r2, r9
 800b66e:	4616      	mov	r6, r2
 800b670:	3201      	adds	r2, #1
 800b672:	7830      	ldrb	r0, [r6, #0]
 800b674:	f7ff ffb0 	bl	800b5d8 <__hexdig_fun>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d1f8      	bne.n	800b66e <__gethex+0x6a>
 800b67c:	498d      	ldr	r1, [pc, #564]	@ (800b8b4 <__gethex+0x2b0>)
 800b67e:	2201      	movs	r2, #1
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff feed 	bl	800b460 <strncmp>
 800b686:	2800      	cmp	r0, #0
 800b688:	d13f      	bne.n	800b70a <__gethex+0x106>
 800b68a:	b944      	cbnz	r4, 800b69e <__gethex+0x9a>
 800b68c:	1c74      	adds	r4, r6, #1
 800b68e:	4622      	mov	r2, r4
 800b690:	4616      	mov	r6, r2
 800b692:	3201      	adds	r2, #1
 800b694:	7830      	ldrb	r0, [r6, #0]
 800b696:	f7ff ff9f 	bl	800b5d8 <__hexdig_fun>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d1f8      	bne.n	800b690 <__gethex+0x8c>
 800b69e:	1ba4      	subs	r4, r4, r6
 800b6a0:	00a7      	lsls	r7, r4, #2
 800b6a2:	7833      	ldrb	r3, [r6, #0]
 800b6a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b6a8:	2b50      	cmp	r3, #80	@ 0x50
 800b6aa:	d13e      	bne.n	800b72a <__gethex+0x126>
 800b6ac:	7873      	ldrb	r3, [r6, #1]
 800b6ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800b6b0:	d033      	beq.n	800b71a <__gethex+0x116>
 800b6b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b6b4:	d034      	beq.n	800b720 <__gethex+0x11c>
 800b6b6:	1c71      	adds	r1, r6, #1
 800b6b8:	2400      	movs	r4, #0
 800b6ba:	7808      	ldrb	r0, [r1, #0]
 800b6bc:	f7ff ff8c 	bl	800b5d8 <__hexdig_fun>
 800b6c0:	1e43      	subs	r3, r0, #1
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b18      	cmp	r3, #24
 800b6c6:	d830      	bhi.n	800b72a <__gethex+0x126>
 800b6c8:	f1a0 0210 	sub.w	r2, r0, #16
 800b6cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6d0:	f7ff ff82 	bl	800b5d8 <__hexdig_fun>
 800b6d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b6d8:	fa5f fc8c 	uxtb.w	ip, ip
 800b6dc:	f1bc 0f18 	cmp.w	ip, #24
 800b6e0:	f04f 030a 	mov.w	r3, #10
 800b6e4:	d91e      	bls.n	800b724 <__gethex+0x120>
 800b6e6:	b104      	cbz	r4, 800b6ea <__gethex+0xe6>
 800b6e8:	4252      	negs	r2, r2
 800b6ea:	4417      	add	r7, r2
 800b6ec:	f8ca 1000 	str.w	r1, [sl]
 800b6f0:	b1ed      	cbz	r5, 800b72e <__gethex+0x12a>
 800b6f2:	f1bb 0f00 	cmp.w	fp, #0
 800b6f6:	bf0c      	ite	eq
 800b6f8:	2506      	moveq	r5, #6
 800b6fa:	2500      	movne	r5, #0
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	b005      	add	sp, #20
 800b700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b704:	2500      	movs	r5, #0
 800b706:	462c      	mov	r4, r5
 800b708:	e7b0      	b.n	800b66c <__gethex+0x68>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	d1c7      	bne.n	800b69e <__gethex+0x9a>
 800b70e:	4627      	mov	r7, r4
 800b710:	e7c7      	b.n	800b6a2 <__gethex+0x9e>
 800b712:	464e      	mov	r6, r9
 800b714:	462f      	mov	r7, r5
 800b716:	2501      	movs	r5, #1
 800b718:	e7c3      	b.n	800b6a2 <__gethex+0x9e>
 800b71a:	2400      	movs	r4, #0
 800b71c:	1cb1      	adds	r1, r6, #2
 800b71e:	e7cc      	b.n	800b6ba <__gethex+0xb6>
 800b720:	2401      	movs	r4, #1
 800b722:	e7fb      	b.n	800b71c <__gethex+0x118>
 800b724:	fb03 0002 	mla	r0, r3, r2, r0
 800b728:	e7ce      	b.n	800b6c8 <__gethex+0xc4>
 800b72a:	4631      	mov	r1, r6
 800b72c:	e7de      	b.n	800b6ec <__gethex+0xe8>
 800b72e:	eba6 0309 	sub.w	r3, r6, r9
 800b732:	3b01      	subs	r3, #1
 800b734:	4629      	mov	r1, r5
 800b736:	2b07      	cmp	r3, #7
 800b738:	dc0a      	bgt.n	800b750 <__gethex+0x14c>
 800b73a:	9801      	ldr	r0, [sp, #4]
 800b73c:	f7fe f93c 	bl	80099b8 <_Balloc>
 800b740:	4604      	mov	r4, r0
 800b742:	b940      	cbnz	r0, 800b756 <__gethex+0x152>
 800b744:	4b5c      	ldr	r3, [pc, #368]	@ (800b8b8 <__gethex+0x2b4>)
 800b746:	4602      	mov	r2, r0
 800b748:	21e4      	movs	r1, #228	@ 0xe4
 800b74a:	485c      	ldr	r0, [pc, #368]	@ (800b8bc <__gethex+0x2b8>)
 800b74c:	f7ff fec0 	bl	800b4d0 <__assert_func>
 800b750:	3101      	adds	r1, #1
 800b752:	105b      	asrs	r3, r3, #1
 800b754:	e7ef      	b.n	800b736 <__gethex+0x132>
 800b756:	f100 0a14 	add.w	sl, r0, #20
 800b75a:	2300      	movs	r3, #0
 800b75c:	4655      	mov	r5, sl
 800b75e:	469b      	mov	fp, r3
 800b760:	45b1      	cmp	r9, r6
 800b762:	d337      	bcc.n	800b7d4 <__gethex+0x1d0>
 800b764:	f845 bb04 	str.w	fp, [r5], #4
 800b768:	eba5 050a 	sub.w	r5, r5, sl
 800b76c:	10ad      	asrs	r5, r5, #2
 800b76e:	6125      	str	r5, [r4, #16]
 800b770:	4658      	mov	r0, fp
 800b772:	f7fe fa13 	bl	8009b9c <__hi0bits>
 800b776:	016d      	lsls	r5, r5, #5
 800b778:	f8d8 6000 	ldr.w	r6, [r8]
 800b77c:	1a2d      	subs	r5, r5, r0
 800b77e:	42b5      	cmp	r5, r6
 800b780:	dd54      	ble.n	800b82c <__gethex+0x228>
 800b782:	1bad      	subs	r5, r5, r6
 800b784:	4629      	mov	r1, r5
 800b786:	4620      	mov	r0, r4
 800b788:	f7fe fda7 	bl	800a2da <__any_on>
 800b78c:	4681      	mov	r9, r0
 800b78e:	b178      	cbz	r0, 800b7b0 <__gethex+0x1ac>
 800b790:	1e6b      	subs	r3, r5, #1
 800b792:	1159      	asrs	r1, r3, #5
 800b794:	f003 021f 	and.w	r2, r3, #31
 800b798:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b79c:	f04f 0901 	mov.w	r9, #1
 800b7a0:	fa09 f202 	lsl.w	r2, r9, r2
 800b7a4:	420a      	tst	r2, r1
 800b7a6:	d003      	beq.n	800b7b0 <__gethex+0x1ac>
 800b7a8:	454b      	cmp	r3, r9
 800b7aa:	dc36      	bgt.n	800b81a <__gethex+0x216>
 800b7ac:	f04f 0902 	mov.w	r9, #2
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7ff febe 	bl	800b534 <rshift>
 800b7b8:	442f      	add	r7, r5
 800b7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7be:	42bb      	cmp	r3, r7
 800b7c0:	da42      	bge.n	800b848 <__gethex+0x244>
 800b7c2:	9801      	ldr	r0, [sp, #4]
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	f7fe f937 	bl	8009a38 <_Bfree>
 800b7ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	25a3      	movs	r5, #163	@ 0xa3
 800b7d2:	e793      	b.n	800b6fc <__gethex+0xf8>
 800b7d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b7d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b7da:	d012      	beq.n	800b802 <__gethex+0x1fe>
 800b7dc:	2b20      	cmp	r3, #32
 800b7de:	d104      	bne.n	800b7ea <__gethex+0x1e6>
 800b7e0:	f845 bb04 	str.w	fp, [r5], #4
 800b7e4:	f04f 0b00 	mov.w	fp, #0
 800b7e8:	465b      	mov	r3, fp
 800b7ea:	7830      	ldrb	r0, [r6, #0]
 800b7ec:	9303      	str	r3, [sp, #12]
 800b7ee:	f7ff fef3 	bl	800b5d8 <__hexdig_fun>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	f000 000f 	and.w	r0, r0, #15
 800b7f8:	4098      	lsls	r0, r3
 800b7fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800b7fe:	3304      	adds	r3, #4
 800b800:	e7ae      	b.n	800b760 <__gethex+0x15c>
 800b802:	45b1      	cmp	r9, r6
 800b804:	d8ea      	bhi.n	800b7dc <__gethex+0x1d8>
 800b806:	492b      	ldr	r1, [pc, #172]	@ (800b8b4 <__gethex+0x2b0>)
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7ff fe27 	bl	800b460 <strncmp>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	2800      	cmp	r0, #0
 800b816:	d1e1      	bne.n	800b7dc <__gethex+0x1d8>
 800b818:	e7a2      	b.n	800b760 <__gethex+0x15c>
 800b81a:	1ea9      	subs	r1, r5, #2
 800b81c:	4620      	mov	r0, r4
 800b81e:	f7fe fd5c 	bl	800a2da <__any_on>
 800b822:	2800      	cmp	r0, #0
 800b824:	d0c2      	beq.n	800b7ac <__gethex+0x1a8>
 800b826:	f04f 0903 	mov.w	r9, #3
 800b82a:	e7c1      	b.n	800b7b0 <__gethex+0x1ac>
 800b82c:	da09      	bge.n	800b842 <__gethex+0x23e>
 800b82e:	1b75      	subs	r5, r6, r5
 800b830:	4621      	mov	r1, r4
 800b832:	9801      	ldr	r0, [sp, #4]
 800b834:	462a      	mov	r2, r5
 800b836:	f7fe fb17 	bl	8009e68 <__lshift>
 800b83a:	1b7f      	subs	r7, r7, r5
 800b83c:	4604      	mov	r4, r0
 800b83e:	f100 0a14 	add.w	sl, r0, #20
 800b842:	f04f 0900 	mov.w	r9, #0
 800b846:	e7b8      	b.n	800b7ba <__gethex+0x1b6>
 800b848:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b84c:	42bd      	cmp	r5, r7
 800b84e:	dd6f      	ble.n	800b930 <__gethex+0x32c>
 800b850:	1bed      	subs	r5, r5, r7
 800b852:	42ae      	cmp	r6, r5
 800b854:	dc34      	bgt.n	800b8c0 <__gethex+0x2bc>
 800b856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d022      	beq.n	800b8a4 <__gethex+0x2a0>
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d024      	beq.n	800b8ac <__gethex+0x2a8>
 800b862:	2b01      	cmp	r3, #1
 800b864:	d115      	bne.n	800b892 <__gethex+0x28e>
 800b866:	42ae      	cmp	r6, r5
 800b868:	d113      	bne.n	800b892 <__gethex+0x28e>
 800b86a:	2e01      	cmp	r6, #1
 800b86c:	d10b      	bne.n	800b886 <__gethex+0x282>
 800b86e:	9a02      	ldr	r2, [sp, #8]
 800b870:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	2301      	movs	r3, #1
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	f8ca 3000 	str.w	r3, [sl]
 800b87e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b880:	2562      	movs	r5, #98	@ 0x62
 800b882:	601c      	str	r4, [r3, #0]
 800b884:	e73a      	b.n	800b6fc <__gethex+0xf8>
 800b886:	1e71      	subs	r1, r6, #1
 800b888:	4620      	mov	r0, r4
 800b88a:	f7fe fd26 	bl	800a2da <__any_on>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d1ed      	bne.n	800b86e <__gethex+0x26a>
 800b892:	9801      	ldr	r0, [sp, #4]
 800b894:	4621      	mov	r1, r4
 800b896:	f7fe f8cf 	bl	8009a38 <_Bfree>
 800b89a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b89c:	2300      	movs	r3, #0
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	2550      	movs	r5, #80	@ 0x50
 800b8a2:	e72b      	b.n	800b6fc <__gethex+0xf8>
 800b8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1f3      	bne.n	800b892 <__gethex+0x28e>
 800b8aa:	e7e0      	b.n	800b86e <__gethex+0x26a>
 800b8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1dd      	bne.n	800b86e <__gethex+0x26a>
 800b8b2:	e7ee      	b.n	800b892 <__gethex+0x28e>
 800b8b4:	0800c560 	.word	0x0800c560
 800b8b8:	0800c3f5 	.word	0x0800c3f5
 800b8bc:	0800c70e 	.word	0x0800c70e
 800b8c0:	1e6f      	subs	r7, r5, #1
 800b8c2:	f1b9 0f00 	cmp.w	r9, #0
 800b8c6:	d130      	bne.n	800b92a <__gethex+0x326>
 800b8c8:	b127      	cbz	r7, 800b8d4 <__gethex+0x2d0>
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7fe fd04 	bl	800a2da <__any_on>
 800b8d2:	4681      	mov	r9, r0
 800b8d4:	117a      	asrs	r2, r7, #5
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b8dc:	f007 071f 	and.w	r7, r7, #31
 800b8e0:	40bb      	lsls	r3, r7
 800b8e2:	4213      	tst	r3, r2
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	bf18      	it	ne
 800b8ea:	f049 0902 	orrne.w	r9, r9, #2
 800b8ee:	f7ff fe21 	bl	800b534 <rshift>
 800b8f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b8f6:	1b76      	subs	r6, r6, r5
 800b8f8:	2502      	movs	r5, #2
 800b8fa:	f1b9 0f00 	cmp.w	r9, #0
 800b8fe:	d047      	beq.n	800b990 <__gethex+0x38c>
 800b900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d015      	beq.n	800b934 <__gethex+0x330>
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d017      	beq.n	800b93c <__gethex+0x338>
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d109      	bne.n	800b924 <__gethex+0x320>
 800b910:	f019 0f02 	tst.w	r9, #2
 800b914:	d006      	beq.n	800b924 <__gethex+0x320>
 800b916:	f8da 3000 	ldr.w	r3, [sl]
 800b91a:	ea49 0903 	orr.w	r9, r9, r3
 800b91e:	f019 0f01 	tst.w	r9, #1
 800b922:	d10e      	bne.n	800b942 <__gethex+0x33e>
 800b924:	f045 0510 	orr.w	r5, r5, #16
 800b928:	e032      	b.n	800b990 <__gethex+0x38c>
 800b92a:	f04f 0901 	mov.w	r9, #1
 800b92e:	e7d1      	b.n	800b8d4 <__gethex+0x2d0>
 800b930:	2501      	movs	r5, #1
 800b932:	e7e2      	b.n	800b8fa <__gethex+0x2f6>
 800b934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b936:	f1c3 0301 	rsb	r3, r3, #1
 800b93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d0f0      	beq.n	800b924 <__gethex+0x320>
 800b942:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b946:	f104 0314 	add.w	r3, r4, #20
 800b94a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b94e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b952:	f04f 0c00 	mov.w	ip, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b960:	d01b      	beq.n	800b99a <__gethex+0x396>
 800b962:	3201      	adds	r2, #1
 800b964:	6002      	str	r2, [r0, #0]
 800b966:	2d02      	cmp	r5, #2
 800b968:	f104 0314 	add.w	r3, r4, #20
 800b96c:	d13c      	bne.n	800b9e8 <__gethex+0x3e4>
 800b96e:	f8d8 2000 	ldr.w	r2, [r8]
 800b972:	3a01      	subs	r2, #1
 800b974:	42b2      	cmp	r2, r6
 800b976:	d109      	bne.n	800b98c <__gethex+0x388>
 800b978:	1171      	asrs	r1, r6, #5
 800b97a:	2201      	movs	r2, #1
 800b97c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b980:	f006 061f 	and.w	r6, r6, #31
 800b984:	fa02 f606 	lsl.w	r6, r2, r6
 800b988:	421e      	tst	r6, r3
 800b98a:	d13a      	bne.n	800ba02 <__gethex+0x3fe>
 800b98c:	f045 0520 	orr.w	r5, r5, #32
 800b990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b992:	601c      	str	r4, [r3, #0]
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	601f      	str	r7, [r3, #0]
 800b998:	e6b0      	b.n	800b6fc <__gethex+0xf8>
 800b99a:	4299      	cmp	r1, r3
 800b99c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9a0:	d8d9      	bhi.n	800b956 <__gethex+0x352>
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	459b      	cmp	fp, r3
 800b9a6:	db17      	blt.n	800b9d8 <__gethex+0x3d4>
 800b9a8:	6861      	ldr	r1, [r4, #4]
 800b9aa:	9801      	ldr	r0, [sp, #4]
 800b9ac:	3101      	adds	r1, #1
 800b9ae:	f7fe f803 	bl	80099b8 <_Balloc>
 800b9b2:	4681      	mov	r9, r0
 800b9b4:	b918      	cbnz	r0, 800b9be <__gethex+0x3ba>
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <__gethex+0x41c>)
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	2184      	movs	r1, #132	@ 0x84
 800b9bc:	e6c5      	b.n	800b74a <__gethex+0x146>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	f104 010c 	add.w	r1, r4, #12
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7ff fd6b 	bl	800b4a4 <memcpy>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	9801      	ldr	r0, [sp, #4]
 800b9d2:	f7fe f831 	bl	8009a38 <_Bfree>
 800b9d6:	464c      	mov	r4, r9
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9e0:	6122      	str	r2, [r4, #16]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	615a      	str	r2, [r3, #20]
 800b9e6:	e7be      	b.n	800b966 <__gethex+0x362>
 800b9e8:	6922      	ldr	r2, [r4, #16]
 800b9ea:	455a      	cmp	r2, fp
 800b9ec:	dd0b      	ble.n	800ba06 <__gethex+0x402>
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff fd9f 	bl	800b534 <rshift>
 800b9f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9fa:	3701      	adds	r7, #1
 800b9fc:	42bb      	cmp	r3, r7
 800b9fe:	f6ff aee0 	blt.w	800b7c2 <__gethex+0x1be>
 800ba02:	2501      	movs	r5, #1
 800ba04:	e7c2      	b.n	800b98c <__gethex+0x388>
 800ba06:	f016 061f 	ands.w	r6, r6, #31
 800ba0a:	d0fa      	beq.n	800ba02 <__gethex+0x3fe>
 800ba0c:	4453      	add	r3, sl
 800ba0e:	f1c6 0620 	rsb	r6, r6, #32
 800ba12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba16:	f7fe f8c1 	bl	8009b9c <__hi0bits>
 800ba1a:	42b0      	cmp	r0, r6
 800ba1c:	dbe7      	blt.n	800b9ee <__gethex+0x3ea>
 800ba1e:	e7f0      	b.n	800ba02 <__gethex+0x3fe>
 800ba20:	0800c3f5 	.word	0x0800c3f5

0800ba24 <L_shift>:
 800ba24:	f1c2 0208 	rsb	r2, r2, #8
 800ba28:	0092      	lsls	r2, r2, #2
 800ba2a:	b570      	push	{r4, r5, r6, lr}
 800ba2c:	f1c2 0620 	rsb	r6, r2, #32
 800ba30:	6843      	ldr	r3, [r0, #4]
 800ba32:	6804      	ldr	r4, [r0, #0]
 800ba34:	fa03 f506 	lsl.w	r5, r3, r6
 800ba38:	432c      	orrs	r4, r5
 800ba3a:	40d3      	lsrs	r3, r2
 800ba3c:	6004      	str	r4, [r0, #0]
 800ba3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba42:	4288      	cmp	r0, r1
 800ba44:	d3f4      	bcc.n	800ba30 <L_shift+0xc>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}

0800ba48 <__match>:
 800ba48:	b530      	push	{r4, r5, lr}
 800ba4a:	6803      	ldr	r3, [r0, #0]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba52:	b914      	cbnz	r4, 800ba5a <__match+0x12>
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	2001      	movs	r0, #1
 800ba58:	bd30      	pop	{r4, r5, pc}
 800ba5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ba62:	2d19      	cmp	r5, #25
 800ba64:	bf98      	it	ls
 800ba66:	3220      	addls	r2, #32
 800ba68:	42a2      	cmp	r2, r4
 800ba6a:	d0f0      	beq.n	800ba4e <__match+0x6>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	e7f3      	b.n	800ba58 <__match+0x10>

0800ba70 <__hexnan>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	680b      	ldr	r3, [r1, #0]
 800ba76:	6801      	ldr	r1, [r0, #0]
 800ba78:	115e      	asrs	r6, r3, #5
 800ba7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba7e:	f013 031f 	ands.w	r3, r3, #31
 800ba82:	b087      	sub	sp, #28
 800ba84:	bf18      	it	ne
 800ba86:	3604      	addne	r6, #4
 800ba88:	2500      	movs	r5, #0
 800ba8a:	1f37      	subs	r7, r6, #4
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	4690      	mov	r8, r2
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba96:	46b9      	mov	r9, r7
 800ba98:	463c      	mov	r4, r7
 800ba9a:	9502      	str	r5, [sp, #8]
 800ba9c:	46ab      	mov	fp, r5
 800ba9e:	784a      	ldrb	r2, [r1, #1]
 800baa0:	1c4b      	adds	r3, r1, #1
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	b342      	cbz	r2, 800baf8 <__hexnan+0x88>
 800baa6:	4610      	mov	r0, r2
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	9204      	str	r2, [sp, #16]
 800baac:	f7ff fd94 	bl	800b5d8 <__hexdig_fun>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d151      	bne.n	800bb58 <__hexnan+0xe8>
 800bab4:	9a04      	ldr	r2, [sp, #16]
 800bab6:	9905      	ldr	r1, [sp, #20]
 800bab8:	2a20      	cmp	r2, #32
 800baba:	d818      	bhi.n	800baee <__hexnan+0x7e>
 800babc:	9b02      	ldr	r3, [sp, #8]
 800babe:	459b      	cmp	fp, r3
 800bac0:	dd13      	ble.n	800baea <__hexnan+0x7a>
 800bac2:	454c      	cmp	r4, r9
 800bac4:	d206      	bcs.n	800bad4 <__hexnan+0x64>
 800bac6:	2d07      	cmp	r5, #7
 800bac8:	dc04      	bgt.n	800bad4 <__hexnan+0x64>
 800baca:	462a      	mov	r2, r5
 800bacc:	4649      	mov	r1, r9
 800bace:	4620      	mov	r0, r4
 800bad0:	f7ff ffa8 	bl	800ba24 <L_shift>
 800bad4:	4544      	cmp	r4, r8
 800bad6:	d952      	bls.n	800bb7e <__hexnan+0x10e>
 800bad8:	2300      	movs	r3, #0
 800bada:	f1a4 0904 	sub.w	r9, r4, #4
 800bade:	f844 3c04 	str.w	r3, [r4, #-4]
 800bae2:	f8cd b008 	str.w	fp, [sp, #8]
 800bae6:	464c      	mov	r4, r9
 800bae8:	461d      	mov	r5, r3
 800baea:	9903      	ldr	r1, [sp, #12]
 800baec:	e7d7      	b.n	800ba9e <__hexnan+0x2e>
 800baee:	2a29      	cmp	r2, #41	@ 0x29
 800baf0:	d157      	bne.n	800bba2 <__hexnan+0x132>
 800baf2:	3102      	adds	r1, #2
 800baf4:	f8ca 1000 	str.w	r1, [sl]
 800baf8:	f1bb 0f00 	cmp.w	fp, #0
 800bafc:	d051      	beq.n	800bba2 <__hexnan+0x132>
 800bafe:	454c      	cmp	r4, r9
 800bb00:	d206      	bcs.n	800bb10 <__hexnan+0xa0>
 800bb02:	2d07      	cmp	r5, #7
 800bb04:	dc04      	bgt.n	800bb10 <__hexnan+0xa0>
 800bb06:	462a      	mov	r2, r5
 800bb08:	4649      	mov	r1, r9
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7ff ff8a 	bl	800ba24 <L_shift>
 800bb10:	4544      	cmp	r4, r8
 800bb12:	d936      	bls.n	800bb82 <__hexnan+0x112>
 800bb14:	f1a8 0204 	sub.w	r2, r8, #4
 800bb18:	4623      	mov	r3, r4
 800bb1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb22:	429f      	cmp	r7, r3
 800bb24:	d2f9      	bcs.n	800bb1a <__hexnan+0xaa>
 800bb26:	1b3b      	subs	r3, r7, r4
 800bb28:	f023 0303 	bic.w	r3, r3, #3
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	3401      	adds	r4, #1
 800bb30:	3e03      	subs	r6, #3
 800bb32:	42b4      	cmp	r4, r6
 800bb34:	bf88      	it	hi
 800bb36:	2304      	movhi	r3, #4
 800bb38:	4443      	add	r3, r8
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f843 2b04 	str.w	r2, [r3], #4
 800bb40:	429f      	cmp	r7, r3
 800bb42:	d2fb      	bcs.n	800bb3c <__hexnan+0xcc>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	b91b      	cbnz	r3, 800bb50 <__hexnan+0xe0>
 800bb48:	4547      	cmp	r7, r8
 800bb4a:	d128      	bne.n	800bb9e <__hexnan+0x12e>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	2005      	movs	r0, #5
 800bb52:	b007      	add	sp, #28
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	3501      	adds	r5, #1
 800bb5a:	2d08      	cmp	r5, #8
 800bb5c:	f10b 0b01 	add.w	fp, fp, #1
 800bb60:	dd06      	ble.n	800bb70 <__hexnan+0x100>
 800bb62:	4544      	cmp	r4, r8
 800bb64:	d9c1      	bls.n	800baea <__hexnan+0x7a>
 800bb66:	2300      	movs	r3, #0
 800bb68:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb6c:	2501      	movs	r5, #1
 800bb6e:	3c04      	subs	r4, #4
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	f000 000f 	and.w	r0, r0, #15
 800bb76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	e7b5      	b.n	800baea <__hexnan+0x7a>
 800bb7e:	2508      	movs	r5, #8
 800bb80:	e7b3      	b.n	800baea <__hexnan+0x7a>
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0dd      	beq.n	800bb44 <__hexnan+0xd4>
 800bb88:	f1c3 0320 	rsb	r3, r3, #32
 800bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb90:	40da      	lsrs	r2, r3
 800bb92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb96:	4013      	ands	r3, r2
 800bb98:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb9c:	e7d2      	b.n	800bb44 <__hexnan+0xd4>
 800bb9e:	3f04      	subs	r7, #4
 800bba0:	e7d0      	b.n	800bb44 <__hexnan+0xd4>
 800bba2:	2004      	movs	r0, #4
 800bba4:	e7d5      	b.n	800bb52 <__hexnan+0xe2>

0800bba6 <__ascii_mbtowc>:
 800bba6:	b082      	sub	sp, #8
 800bba8:	b901      	cbnz	r1, 800bbac <__ascii_mbtowc+0x6>
 800bbaa:	a901      	add	r1, sp, #4
 800bbac:	b142      	cbz	r2, 800bbc0 <__ascii_mbtowc+0x1a>
 800bbae:	b14b      	cbz	r3, 800bbc4 <__ascii_mbtowc+0x1e>
 800bbb0:	7813      	ldrb	r3, [r2, #0]
 800bbb2:	600b      	str	r3, [r1, #0]
 800bbb4:	7812      	ldrb	r2, [r2, #0]
 800bbb6:	1e10      	subs	r0, r2, #0
 800bbb8:	bf18      	it	ne
 800bbba:	2001      	movne	r0, #1
 800bbbc:	b002      	add	sp, #8
 800bbbe:	4770      	bx	lr
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	e7fb      	b.n	800bbbc <__ascii_mbtowc+0x16>
 800bbc4:	f06f 0001 	mvn.w	r0, #1
 800bbc8:	e7f8      	b.n	800bbbc <__ascii_mbtowc+0x16>

0800bbca <_realloc_r>:
 800bbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4615      	mov	r5, r2
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	b921      	cbnz	r1, 800bbe0 <_realloc_r+0x16>
 800bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	4611      	mov	r1, r2
 800bbdc:	f7fd be60 	b.w	80098a0 <_malloc_r>
 800bbe0:	b92a      	cbnz	r2, 800bbee <_realloc_r+0x24>
 800bbe2:	f7fd fde9 	bl	80097b8 <_free_r>
 800bbe6:	2400      	movs	r4, #0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbee:	f000 f840 	bl	800bc72 <_malloc_usable_size_r>
 800bbf2:	4285      	cmp	r5, r0
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	d802      	bhi.n	800bbfe <_realloc_r+0x34>
 800bbf8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bbfc:	d8f4      	bhi.n	800bbe8 <_realloc_r+0x1e>
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4640      	mov	r0, r8
 800bc02:	f7fd fe4d 	bl	80098a0 <_malloc_r>
 800bc06:	4607      	mov	r7, r0
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d0ec      	beq.n	800bbe6 <_realloc_r+0x1c>
 800bc0c:	42b5      	cmp	r5, r6
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4621      	mov	r1, r4
 800bc12:	bf28      	it	cs
 800bc14:	4632      	movcs	r2, r6
 800bc16:	f7ff fc45 	bl	800b4a4 <memcpy>
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	f7fd fdcb 	bl	80097b8 <_free_r>
 800bc22:	463c      	mov	r4, r7
 800bc24:	e7e0      	b.n	800bbe8 <_realloc_r+0x1e>

0800bc26 <__ascii_wctomb>:
 800bc26:	4603      	mov	r3, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	b141      	cbz	r1, 800bc3e <__ascii_wctomb+0x18>
 800bc2c:	2aff      	cmp	r2, #255	@ 0xff
 800bc2e:	d904      	bls.n	800bc3a <__ascii_wctomb+0x14>
 800bc30:	228a      	movs	r2, #138	@ 0x8a
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	4770      	bx	lr
 800bc3a:	700a      	strb	r2, [r1, #0]
 800bc3c:	2001      	movs	r0, #1
 800bc3e:	4770      	bx	lr

0800bc40 <fiprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b503      	push	{r0, r1, lr}
 800bc44:	4601      	mov	r1, r0
 800bc46:	ab03      	add	r3, sp, #12
 800bc48:	4805      	ldr	r0, [pc, #20]	@ (800bc60 <fiprintf+0x20>)
 800bc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	f000 f83f 	bl	800bcd4 <_vfiprintf_r>
 800bc56:	b002      	add	sp, #8
 800bc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc5c:	b003      	add	sp, #12
 800bc5e:	4770      	bx	lr
 800bc60:	20000028 	.word	0x20000028

0800bc64 <abort>:
 800bc64:	b508      	push	{r3, lr}
 800bc66:	2006      	movs	r0, #6
 800bc68:	f000 fa08 	bl	800c07c <raise>
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f7f6 f9f9 	bl	8002064 <_exit>

0800bc72 <_malloc_usable_size_r>:
 800bc72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc76:	1f18      	subs	r0, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfbc      	itt	lt
 800bc7c:	580b      	ldrlt	r3, [r1, r0]
 800bc7e:	18c0      	addlt	r0, r0, r3
 800bc80:	4770      	bx	lr

0800bc82 <__sfputc_r>:
 800bc82:	6893      	ldr	r3, [r2, #8]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	b410      	push	{r4}
 800bc8a:	6093      	str	r3, [r2, #8]
 800bc8c:	da08      	bge.n	800bca0 <__sfputc_r+0x1e>
 800bc8e:	6994      	ldr	r4, [r2, #24]
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	db01      	blt.n	800bc98 <__sfputc_r+0x16>
 800bc94:	290a      	cmp	r1, #10
 800bc96:	d103      	bne.n	800bca0 <__sfputc_r+0x1e>
 800bc98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc9c:	f000 b932 	b.w	800bf04 <__swbuf_r>
 800bca0:	6813      	ldr	r3, [r2, #0]
 800bca2:	1c58      	adds	r0, r3, #1
 800bca4:	6010      	str	r0, [r2, #0]
 800bca6:	7019      	strb	r1, [r3, #0]
 800bca8:	4608      	mov	r0, r1
 800bcaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <__sfputs_r>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	18d5      	adds	r5, r2, r3
 800bcba:	42ac      	cmp	r4, r5
 800bcbc:	d101      	bne.n	800bcc2 <__sfputs_r+0x12>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e007      	b.n	800bcd2 <__sfputs_r+0x22>
 800bcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc6:	463a      	mov	r2, r7
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff ffda 	bl	800bc82 <__sfputc_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d1f3      	bne.n	800bcba <__sfputs_r+0xa>
 800bcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcd4 <_vfiprintf_r>:
 800bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	460d      	mov	r5, r1
 800bcda:	b09d      	sub	sp, #116	@ 0x74
 800bcdc:	4614      	mov	r4, r2
 800bcde:	4698      	mov	r8, r3
 800bce0:	4606      	mov	r6, r0
 800bce2:	b118      	cbz	r0, 800bcec <_vfiprintf_r+0x18>
 800bce4:	6a03      	ldr	r3, [r0, #32]
 800bce6:	b90b      	cbnz	r3, 800bcec <_vfiprintf_r+0x18>
 800bce8:	f7fc fde8 	bl	80088bc <__sinit>
 800bcec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcee:	07d9      	lsls	r1, r3, #31
 800bcf0:	d405      	bmi.n	800bcfe <_vfiprintf_r+0x2a>
 800bcf2:	89ab      	ldrh	r3, [r5, #12]
 800bcf4:	059a      	lsls	r2, r3, #22
 800bcf6:	d402      	bmi.n	800bcfe <_vfiprintf_r+0x2a>
 800bcf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcfa:	f7fc ff08 	bl	8008b0e <__retarget_lock_acquire_recursive>
 800bcfe:	89ab      	ldrh	r3, [r5, #12]
 800bd00:	071b      	lsls	r3, r3, #28
 800bd02:	d501      	bpl.n	800bd08 <_vfiprintf_r+0x34>
 800bd04:	692b      	ldr	r3, [r5, #16]
 800bd06:	b99b      	cbnz	r3, 800bd30 <_vfiprintf_r+0x5c>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f000 f938 	bl	800bf80 <__swsetup_r>
 800bd10:	b170      	cbz	r0, 800bd30 <_vfiprintf_r+0x5c>
 800bd12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd14:	07dc      	lsls	r4, r3, #31
 800bd16:	d504      	bpl.n	800bd22 <_vfiprintf_r+0x4e>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	b01d      	add	sp, #116	@ 0x74
 800bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	0598      	lsls	r0, r3, #22
 800bd26:	d4f7      	bmi.n	800bd18 <_vfiprintf_r+0x44>
 800bd28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd2a:	f7fc fef1 	bl	8008b10 <__retarget_lock_release_recursive>
 800bd2e:	e7f3      	b.n	800bd18 <_vfiprintf_r+0x44>
 800bd30:	2300      	movs	r3, #0
 800bd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd34:	2320      	movs	r3, #32
 800bd36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd3e:	2330      	movs	r3, #48	@ 0x30
 800bd40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bef0 <_vfiprintf_r+0x21c>
 800bd44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd48:	f04f 0901 	mov.w	r9, #1
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	469a      	mov	sl, r3
 800bd50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd54:	b10a      	cbz	r2, 800bd5a <_vfiprintf_r+0x86>
 800bd56:	2a25      	cmp	r2, #37	@ 0x25
 800bd58:	d1f9      	bne.n	800bd4e <_vfiprintf_r+0x7a>
 800bd5a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd5e:	d00b      	beq.n	800bd78 <_vfiprintf_r+0xa4>
 800bd60:	465b      	mov	r3, fp
 800bd62:	4622      	mov	r2, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7ff ffa2 	bl	800bcb0 <__sfputs_r>
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f000 80a7 	beq.w	800bec0 <_vfiprintf_r+0x1ec>
 800bd72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd74:	445a      	add	r2, fp
 800bd76:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd78:	f89a 3000 	ldrb.w	r3, [sl]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 809f 	beq.w	800bec0 <_vfiprintf_r+0x1ec>
 800bd82:	2300      	movs	r3, #0
 800bd84:	f04f 32ff 	mov.w	r2, #4294967295
 800bd88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd8c:	f10a 0a01 	add.w	sl, sl, #1
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	9307      	str	r3, [sp, #28]
 800bd94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd98:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd9a:	4654      	mov	r4, sl
 800bd9c:	2205      	movs	r2, #5
 800bd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda2:	4853      	ldr	r0, [pc, #332]	@ (800bef0 <_vfiprintf_r+0x21c>)
 800bda4:	f7f4 fa24 	bl	80001f0 <memchr>
 800bda8:	9a04      	ldr	r2, [sp, #16]
 800bdaa:	b9d8      	cbnz	r0, 800bde4 <_vfiprintf_r+0x110>
 800bdac:	06d1      	lsls	r1, r2, #27
 800bdae:	bf44      	itt	mi
 800bdb0:	2320      	movmi	r3, #32
 800bdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb6:	0713      	lsls	r3, r2, #28
 800bdb8:	bf44      	itt	mi
 800bdba:	232b      	movmi	r3, #43	@ 0x2b
 800bdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc6:	d015      	beq.n	800bdf4 <_vfiprintf_r+0x120>
 800bdc8:	9a07      	ldr	r2, [sp, #28]
 800bdca:	4654      	mov	r4, sl
 800bdcc:	2000      	movs	r0, #0
 800bdce:	f04f 0c0a 	mov.w	ip, #10
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd8:	3b30      	subs	r3, #48	@ 0x30
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	d94b      	bls.n	800be76 <_vfiprintf_r+0x1a2>
 800bdde:	b1b0      	cbz	r0, 800be0e <_vfiprintf_r+0x13a>
 800bde0:	9207      	str	r2, [sp, #28]
 800bde2:	e014      	b.n	800be0e <_vfiprintf_r+0x13a>
 800bde4:	eba0 0308 	sub.w	r3, r0, r8
 800bde8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdec:	4313      	orrs	r3, r2
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	46a2      	mov	sl, r4
 800bdf2:	e7d2      	b.n	800bd9a <_vfiprintf_r+0xc6>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	1d19      	adds	r1, r3, #4
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	9103      	str	r1, [sp, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfbb      	ittet	lt
 800be00:	425b      	neglt	r3, r3
 800be02:	f042 0202 	orrlt.w	r2, r2, #2
 800be06:	9307      	strge	r3, [sp, #28]
 800be08:	9307      	strlt	r3, [sp, #28]
 800be0a:	bfb8      	it	lt
 800be0c:	9204      	strlt	r2, [sp, #16]
 800be0e:	7823      	ldrb	r3, [r4, #0]
 800be10:	2b2e      	cmp	r3, #46	@ 0x2e
 800be12:	d10a      	bne.n	800be2a <_vfiprintf_r+0x156>
 800be14:	7863      	ldrb	r3, [r4, #1]
 800be16:	2b2a      	cmp	r3, #42	@ 0x2a
 800be18:	d132      	bne.n	800be80 <_vfiprintf_r+0x1ac>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	1d1a      	adds	r2, r3, #4
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	9203      	str	r2, [sp, #12]
 800be22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be26:	3402      	adds	r4, #2
 800be28:	9305      	str	r3, [sp, #20]
 800be2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf00 <_vfiprintf_r+0x22c>
 800be2e:	7821      	ldrb	r1, [r4, #0]
 800be30:	2203      	movs	r2, #3
 800be32:	4650      	mov	r0, sl
 800be34:	f7f4 f9dc 	bl	80001f0 <memchr>
 800be38:	b138      	cbz	r0, 800be4a <_vfiprintf_r+0x176>
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	eba0 000a 	sub.w	r0, r0, sl
 800be40:	2240      	movs	r2, #64	@ 0x40
 800be42:	4082      	lsls	r2, r0
 800be44:	4313      	orrs	r3, r2
 800be46:	3401      	adds	r4, #1
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4e:	4829      	ldr	r0, [pc, #164]	@ (800bef4 <_vfiprintf_r+0x220>)
 800be50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be54:	2206      	movs	r2, #6
 800be56:	f7f4 f9cb 	bl	80001f0 <memchr>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d03f      	beq.n	800bede <_vfiprintf_r+0x20a>
 800be5e:	4b26      	ldr	r3, [pc, #152]	@ (800bef8 <_vfiprintf_r+0x224>)
 800be60:	bb1b      	cbnz	r3, 800beaa <_vfiprintf_r+0x1d6>
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	3307      	adds	r3, #7
 800be66:	f023 0307 	bic.w	r3, r3, #7
 800be6a:	3308      	adds	r3, #8
 800be6c:	9303      	str	r3, [sp, #12]
 800be6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be70:	443b      	add	r3, r7
 800be72:	9309      	str	r3, [sp, #36]	@ 0x24
 800be74:	e76a      	b.n	800bd4c <_vfiprintf_r+0x78>
 800be76:	fb0c 3202 	mla	r2, ip, r2, r3
 800be7a:	460c      	mov	r4, r1
 800be7c:	2001      	movs	r0, #1
 800be7e:	e7a8      	b.n	800bdd2 <_vfiprintf_r+0xfe>
 800be80:	2300      	movs	r3, #0
 800be82:	3401      	adds	r4, #1
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	4619      	mov	r1, r3
 800be88:	f04f 0c0a 	mov.w	ip, #10
 800be8c:	4620      	mov	r0, r4
 800be8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be92:	3a30      	subs	r2, #48	@ 0x30
 800be94:	2a09      	cmp	r2, #9
 800be96:	d903      	bls.n	800bea0 <_vfiprintf_r+0x1cc>
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0c6      	beq.n	800be2a <_vfiprintf_r+0x156>
 800be9c:	9105      	str	r1, [sp, #20]
 800be9e:	e7c4      	b.n	800be2a <_vfiprintf_r+0x156>
 800bea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea4:	4604      	mov	r4, r0
 800bea6:	2301      	movs	r3, #1
 800bea8:	e7f0      	b.n	800be8c <_vfiprintf_r+0x1b8>
 800beaa:	ab03      	add	r3, sp, #12
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	462a      	mov	r2, r5
 800beb0:	4b12      	ldr	r3, [pc, #72]	@ (800befc <_vfiprintf_r+0x228>)
 800beb2:	a904      	add	r1, sp, #16
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7fb fea9 	bl	8007c0c <_printf_float>
 800beba:	4607      	mov	r7, r0
 800bebc:	1c78      	adds	r0, r7, #1
 800bebe:	d1d6      	bne.n	800be6e <_vfiprintf_r+0x19a>
 800bec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bec2:	07d9      	lsls	r1, r3, #31
 800bec4:	d405      	bmi.n	800bed2 <_vfiprintf_r+0x1fe>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	059a      	lsls	r2, r3, #22
 800beca:	d402      	bmi.n	800bed2 <_vfiprintf_r+0x1fe>
 800becc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bece:	f7fc fe1f 	bl	8008b10 <__retarget_lock_release_recursive>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	065b      	lsls	r3, r3, #25
 800bed6:	f53f af1f 	bmi.w	800bd18 <_vfiprintf_r+0x44>
 800beda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bedc:	e71e      	b.n	800bd1c <_vfiprintf_r+0x48>
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	462a      	mov	r2, r5
 800bee4:	4b05      	ldr	r3, [pc, #20]	@ (800befc <_vfiprintf_r+0x228>)
 800bee6:	a904      	add	r1, sp, #16
 800bee8:	4630      	mov	r0, r6
 800beea:	f7fc f927 	bl	800813c <_printf_i>
 800beee:	e7e4      	b.n	800beba <_vfiprintf_r+0x1e6>
 800bef0:	0800c6b9 	.word	0x0800c6b9
 800bef4:	0800c6c3 	.word	0x0800c6c3
 800bef8:	08007c0d 	.word	0x08007c0d
 800befc:	0800bcb1 	.word	0x0800bcb1
 800bf00:	0800c6bf 	.word	0x0800c6bf

0800bf04 <__swbuf_r>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	460e      	mov	r6, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b118      	cbz	r0, 800bf16 <__swbuf_r+0x12>
 800bf0e:	6a03      	ldr	r3, [r0, #32]
 800bf10:	b90b      	cbnz	r3, 800bf16 <__swbuf_r+0x12>
 800bf12:	f7fc fcd3 	bl	80088bc <__sinit>
 800bf16:	69a3      	ldr	r3, [r4, #24]
 800bf18:	60a3      	str	r3, [r4, #8]
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	071a      	lsls	r2, r3, #28
 800bf1e:	d501      	bpl.n	800bf24 <__swbuf_r+0x20>
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	b943      	cbnz	r3, 800bf36 <__swbuf_r+0x32>
 800bf24:	4621      	mov	r1, r4
 800bf26:	4628      	mov	r0, r5
 800bf28:	f000 f82a 	bl	800bf80 <__swsetup_r>
 800bf2c:	b118      	cbz	r0, 800bf36 <__swbuf_r+0x32>
 800bf2e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf32:	4638      	mov	r0, r7
 800bf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	6922      	ldr	r2, [r4, #16]
 800bf3a:	1a98      	subs	r0, r3, r2
 800bf3c:	6963      	ldr	r3, [r4, #20]
 800bf3e:	b2f6      	uxtb	r6, r6
 800bf40:	4283      	cmp	r3, r0
 800bf42:	4637      	mov	r7, r6
 800bf44:	dc05      	bgt.n	800bf52 <__swbuf_r+0x4e>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f7ff fa47 	bl	800b3dc <_fflush_r>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d1ed      	bne.n	800bf2e <__swbuf_r+0x2a>
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	60a3      	str	r3, [r4, #8]
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	701e      	strb	r6, [r3, #0]
 800bf60:	6962      	ldr	r2, [r4, #20]
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d004      	beq.n	800bf72 <__swbuf_r+0x6e>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	07db      	lsls	r3, r3, #31
 800bf6c:	d5e1      	bpl.n	800bf32 <__swbuf_r+0x2e>
 800bf6e:	2e0a      	cmp	r6, #10
 800bf70:	d1df      	bne.n	800bf32 <__swbuf_r+0x2e>
 800bf72:	4621      	mov	r1, r4
 800bf74:	4628      	mov	r0, r5
 800bf76:	f7ff fa31 	bl	800b3dc <_fflush_r>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d0d9      	beq.n	800bf32 <__swbuf_r+0x2e>
 800bf7e:	e7d6      	b.n	800bf2e <__swbuf_r+0x2a>

0800bf80 <__swsetup_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4b29      	ldr	r3, [pc, #164]	@ (800c028 <__swsetup_r+0xa8>)
 800bf84:	4605      	mov	r5, r0
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	460c      	mov	r4, r1
 800bf8a:	b118      	cbz	r0, 800bf94 <__swsetup_r+0x14>
 800bf8c:	6a03      	ldr	r3, [r0, #32]
 800bf8e:	b90b      	cbnz	r3, 800bf94 <__swsetup_r+0x14>
 800bf90:	f7fc fc94 	bl	80088bc <__sinit>
 800bf94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf98:	0719      	lsls	r1, r3, #28
 800bf9a:	d422      	bmi.n	800bfe2 <__swsetup_r+0x62>
 800bf9c:	06da      	lsls	r2, r3, #27
 800bf9e:	d407      	bmi.n	800bfb0 <__swsetup_r+0x30>
 800bfa0:	2209      	movs	r2, #9
 800bfa2:	602a      	str	r2, [r5, #0]
 800bfa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	e033      	b.n	800c018 <__swsetup_r+0x98>
 800bfb0:	0758      	lsls	r0, r3, #29
 800bfb2:	d512      	bpl.n	800bfda <__swsetup_r+0x5a>
 800bfb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfb6:	b141      	cbz	r1, 800bfca <__swsetup_r+0x4a>
 800bfb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfbc:	4299      	cmp	r1, r3
 800bfbe:	d002      	beq.n	800bfc6 <__swsetup_r+0x46>
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7fd fbf9 	bl	80097b8 <_free_r>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfca:	89a3      	ldrh	r3, [r4, #12]
 800bfcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6063      	str	r3, [r4, #4]
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	f043 0308 	orr.w	r3, r3, #8
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	b94b      	cbnz	r3, 800bffa <__swsetup_r+0x7a>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bff0:	d003      	beq.n	800bffa <__swsetup_r+0x7a>
 800bff2:	4621      	mov	r1, r4
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 f883 	bl	800c100 <__smakebuf_r>
 800bffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bffe:	f013 0201 	ands.w	r2, r3, #1
 800c002:	d00a      	beq.n	800c01a <__swsetup_r+0x9a>
 800c004:	2200      	movs	r2, #0
 800c006:	60a2      	str	r2, [r4, #8]
 800c008:	6962      	ldr	r2, [r4, #20]
 800c00a:	4252      	negs	r2, r2
 800c00c:	61a2      	str	r2, [r4, #24]
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	b942      	cbnz	r2, 800c024 <__swsetup_r+0xa4>
 800c012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c016:	d1c5      	bne.n	800bfa4 <__swsetup_r+0x24>
 800c018:	bd38      	pop	{r3, r4, r5, pc}
 800c01a:	0799      	lsls	r1, r3, #30
 800c01c:	bf58      	it	pl
 800c01e:	6962      	ldrpl	r2, [r4, #20]
 800c020:	60a2      	str	r2, [r4, #8]
 800c022:	e7f4      	b.n	800c00e <__swsetup_r+0x8e>
 800c024:	2000      	movs	r0, #0
 800c026:	e7f7      	b.n	800c018 <__swsetup_r+0x98>
 800c028:	20000028 	.word	0x20000028

0800c02c <_raise_r>:
 800c02c:	291f      	cmp	r1, #31
 800c02e:	b538      	push	{r3, r4, r5, lr}
 800c030:	4605      	mov	r5, r0
 800c032:	460c      	mov	r4, r1
 800c034:	d904      	bls.n	800c040 <_raise_r+0x14>
 800c036:	2316      	movs	r3, #22
 800c038:	6003      	str	r3, [r0, #0]
 800c03a:	f04f 30ff 	mov.w	r0, #4294967295
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c042:	b112      	cbz	r2, 800c04a <_raise_r+0x1e>
 800c044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c048:	b94b      	cbnz	r3, 800c05e <_raise_r+0x32>
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 f830 	bl	800c0b0 <_getpid_r>
 800c050:	4622      	mov	r2, r4
 800c052:	4601      	mov	r1, r0
 800c054:	4628      	mov	r0, r5
 800c056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05a:	f000 b817 	b.w	800c08c <_kill_r>
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d00a      	beq.n	800c078 <_raise_r+0x4c>
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	d103      	bne.n	800c06e <_raise_r+0x42>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	2001      	movs	r0, #1
 800c06c:	e7e7      	b.n	800c03e <_raise_r+0x12>
 800c06e:	2100      	movs	r1, #0
 800c070:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c074:	4620      	mov	r0, r4
 800c076:	4798      	blx	r3
 800c078:	2000      	movs	r0, #0
 800c07a:	e7e0      	b.n	800c03e <_raise_r+0x12>

0800c07c <raise>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <raise+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f7ff bfd3 	b.w	800c02c <_raise_r>
 800c086:	bf00      	nop
 800c088:	20000028 	.word	0x20000028

0800c08c <_kill_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d07      	ldr	r5, [pc, #28]	@ (800c0ac <_kill_r+0x20>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	f7f5 ffd3 	bl	8002044 <_kill>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d102      	bne.n	800c0a8 <_kill_r+0x1c>
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	b103      	cbz	r3, 800c0a8 <_kill_r+0x1c>
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	bd38      	pop	{r3, r4, r5, pc}
 800c0aa:	bf00      	nop
 800c0ac:	200005a8 	.word	0x200005a8

0800c0b0 <_getpid_r>:
 800c0b0:	f7f5 bfc0 	b.w	8002034 <_getpid>

0800c0b4 <__swhatbuf_r>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	b096      	sub	sp, #88	@ 0x58
 800c0c0:	4615      	mov	r5, r2
 800c0c2:	461e      	mov	r6, r3
 800c0c4:	da0d      	bge.n	800c0e2 <__swhatbuf_r+0x2e>
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0cc:	f04f 0100 	mov.w	r1, #0
 800c0d0:	bf14      	ite	ne
 800c0d2:	2340      	movne	r3, #64	@ 0x40
 800c0d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0d8:	2000      	movs	r0, #0
 800c0da:	6031      	str	r1, [r6, #0]
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	b016      	add	sp, #88	@ 0x58
 800c0e0:	bd70      	pop	{r4, r5, r6, pc}
 800c0e2:	466a      	mov	r2, sp
 800c0e4:	f000 f848 	bl	800c178 <_fstat_r>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	dbec      	blt.n	800c0c6 <__swhatbuf_r+0x12>
 800c0ec:	9901      	ldr	r1, [sp, #4]
 800c0ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0f6:	4259      	negs	r1, r3
 800c0f8:	4159      	adcs	r1, r3
 800c0fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0fe:	e7eb      	b.n	800c0d8 <__swhatbuf_r+0x24>

0800c100 <__smakebuf_r>:
 800c100:	898b      	ldrh	r3, [r1, #12]
 800c102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c104:	079d      	lsls	r5, r3, #30
 800c106:	4606      	mov	r6, r0
 800c108:	460c      	mov	r4, r1
 800c10a:	d507      	bpl.n	800c11c <__smakebuf_r+0x1c>
 800c10c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	2301      	movs	r3, #1
 800c116:	6163      	str	r3, [r4, #20]
 800c118:	b003      	add	sp, #12
 800c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11c:	ab01      	add	r3, sp, #4
 800c11e:	466a      	mov	r2, sp
 800c120:	f7ff ffc8 	bl	800c0b4 <__swhatbuf_r>
 800c124:	9f00      	ldr	r7, [sp, #0]
 800c126:	4605      	mov	r5, r0
 800c128:	4639      	mov	r1, r7
 800c12a:	4630      	mov	r0, r6
 800c12c:	f7fd fbb8 	bl	80098a0 <_malloc_r>
 800c130:	b948      	cbnz	r0, 800c146 <__smakebuf_r+0x46>
 800c132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c136:	059a      	lsls	r2, r3, #22
 800c138:	d4ee      	bmi.n	800c118 <__smakebuf_r+0x18>
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	f043 0302 	orr.w	r3, r3, #2
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	e7e2      	b.n	800c10c <__smakebuf_r+0xc>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	6020      	str	r0, [r4, #0]
 800c14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c14e:	81a3      	strh	r3, [r4, #12]
 800c150:	9b01      	ldr	r3, [sp, #4]
 800c152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c156:	b15b      	cbz	r3, 800c170 <__smakebuf_r+0x70>
 800c158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c15c:	4630      	mov	r0, r6
 800c15e:	f000 f81d 	bl	800c19c <_isatty_r>
 800c162:	b128      	cbz	r0, 800c170 <__smakebuf_r+0x70>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f023 0303 	bic.w	r3, r3, #3
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	431d      	orrs	r5, r3
 800c174:	81a5      	strh	r5, [r4, #12]
 800c176:	e7cf      	b.n	800c118 <__smakebuf_r+0x18>

0800c178 <_fstat_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d07      	ldr	r5, [pc, #28]	@ (800c198 <_fstat_r+0x20>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	f7f5 ffbd 	bl	8002104 <_fstat>
 800c18a:	1c43      	adds	r3, r0, #1
 800c18c:	d102      	bne.n	800c194 <_fstat_r+0x1c>
 800c18e:	682b      	ldr	r3, [r5, #0]
 800c190:	b103      	cbz	r3, 800c194 <_fstat_r+0x1c>
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	bf00      	nop
 800c198:	200005a8 	.word	0x200005a8

0800c19c <_isatty_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d06      	ldr	r5, [pc, #24]	@ (800c1b8 <_isatty_r+0x1c>)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	602b      	str	r3, [r5, #0]
 800c1a8:	f7f5 ffbc 	bl	8002124 <_isatty>
 800c1ac:	1c43      	adds	r3, r0, #1
 800c1ae:	d102      	bne.n	800c1b6 <_isatty_r+0x1a>
 800c1b0:	682b      	ldr	r3, [r5, #0]
 800c1b2:	b103      	cbz	r3, 800c1b6 <_isatty_r+0x1a>
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	200005a8 	.word	0x200005a8

0800c1bc <_init>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	bf00      	nop
 800c1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c2:	bc08      	pop	{r3}
 800c1c4:	469e      	mov	lr, r3
 800c1c6:	4770      	bx	lr

0800c1c8 <_fini>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	bf00      	nop
 800c1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ce:	bc08      	pop	{r3}
 800c1d0:	469e      	mov	lr, r3
 800c1d2:	4770      	bx	lr
